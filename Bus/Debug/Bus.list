
Bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08007e98  08007e98  00017e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083b0  080083b0  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b8  080083b8  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083bc  080083bc  000183bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  080083c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000290  08008650  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08008650  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d860  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a5  00000000  00000000  0002db63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002fc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000932  00000000  00000000  000307e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e69  00000000  00000000  00031112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010039  00000000  00000000  00053f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf243  00000000  00000000  00063fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043ac  00000000  00000000  001331f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001375a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e7c 	.word	0x08007e7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	08007e7c 	.word	0x08007e7c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <BMP280_init>:
signed short dig_P9 = 0;
uint32_t t_fine;


int BMP280_init(h_BMP280_t * h_BMP280)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	h_BMP280->data_available = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	751a      	strb	r2, [r3, #20]
	h_BMP280->skipped_data = 0;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

	//Récupération de l'ID du composant
	uint8_t chip_id = BMP280_CHIP_ID_t;
 8000f18:	23d0      	movs	r3, #208	; 0xd0
 8000f1a:	73bb      	strb	r3, [r7, #14]
	h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &chip_id, 2);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f107 010e 	add.w	r1, r7, #14
 8000f24:	2202      	movs	r2, #2
 8000f26:	20ee      	movs	r0, #238	; 0xee
 8000f28:	4798      	blx	r3
	h_BMP280->I2C_drv.receive(BMP280_I2CADDR, &chip_id, 2);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f107 010e 	add.w	r1, r7, #14
 8000f32:	2202      	movs	r2, #2
 8000f34:	20ee      	movs	r0, #238	; 0xee
 8000f36:	4798      	blx	r3
	if(chip_id != 0x58)
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	2b58      	cmp	r3, #88	; 0x58
 8000f3c:	d004      	beq.n	8000f48 <BMP280_init+0x44>
	{
		printf("Incorrect ID\r\n");
 8000f3e:	481b      	ldr	r0, [pc, #108]	; (8000fac <BMP280_init+0xa8>)
 8000f40:	f004 fdc6 	bl	8005ad0 <puts>
		return 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e02d      	b.n	8000fa4 <BMP280_init+0xa0>
	}
	h_BMP280->chip = chip_id;
 8000f48:	7bba      	ldrb	r2, [r7, #14]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	701a      	strb	r2, [r3, #0]

	//Reset du composant
	uint8_t reset = BMP280_RESET;
 8000f4e:	23e0      	movs	r3, #224	; 0xe0
 8000f50:	737b      	strb	r3, [r7, #13]
	h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &reset, 1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f107 010d 	add.w	r1, r7, #13
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	20ee      	movs	r0, #238	; 0xee
 8000f5e:	4798      	blx	r3


	//Configuration du composant
	uint8_t power_mode = BMP280_SAMPLE_2|BMP280_SAMPLE_16|BMP280_NORMAL_MODE ;
 8000f60:	2307      	movs	r3, #7
 8000f62:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	buffer[0] = BMP280_CONTROL;
 8000f64:	23f4      	movs	r3, #244	; 0xf4
 8000f66:	723b      	strb	r3, [r7, #8]
	buffer[1] = power_mode;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	727b      	strb	r3, [r7, #9]
	h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, buffer, 2);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	2202      	movs	r2, #2
 8000f76:	20ee      	movs	r0, #238	; 0xee
 8000f78:	4798      	blx	r3
	h_BMP280->I2C_drv.receive(BMP280_I2CADDR, buffer, 1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f107 0108 	add.w	r1, r7, #8
 8000f82:	2201      	movs	r2, #1
 8000f84:	20ee      	movs	r0, #238	; 0xee
 8000f86:	4798      	blx	r3
	if (buffer[0] == power_mode){
 8000f88:	7a3b      	ldrb	r3, [r7, #8]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d108      	bne.n	8000fa2 <BMP280_init+0x9e>
		printf("Configuration done\r\n");
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <BMP280_init+0xac>)
 8000f92:	f004 fd9d 	bl	8005ad0 <puts>
		h_BMP280->power = BMP280_NORMAL_MODE ;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	709a      	strb	r2, [r3, #2]
		h_BMP280->sample = BMP280_SAMPLE_2|BMP280_SAMPLE_16 ;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	705a      	strb	r2, [r3, #1]
	}
	return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08007e98 	.word	0x08007e98
 8000fb0:	08007ea8 	.word	0x08007ea8

08000fb4 <BMP280_etalonnage>:


void BMP280_etalonnage(h_BMP280_t * h_BMP280)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uint8_t buffer[24];
	uint8_t etalonage = BMP250_CALIB;
 8000fbc:	2388      	movs	r3, #136	; 0x88
 8000fbe:	72fb      	strb	r3, [r7, #11]
	h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &etalonage, 1);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f107 010b 	add.w	r1, r7, #11
 8000fc8:	2201      	movs	r2, #1
 8000fca:	20ee      	movs	r0, #238	; 0xee
 8000fcc:	4798      	blx	r3
	h_BMP280->I2C_drv.receive(BMP280_I2CADDR, buffer, 24);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f107 010c 	add.w	r1, r7, #12
 8000fd6:	2218      	movs	r2, #24
 8000fd8:	20ee      	movs	r0, #238	; 0xee
 8000fda:	4798      	blx	r3
	printf("Valeurs d'étalonage : \r\n");
 8000fdc:	4844      	ldr	r0, [pc, #272]	; (80010f0 <BMP280_etalonnage+0x13c>)
 8000fde:	f004 fd77 	bl	8005ad0 <puts>
	for(int i=0;i<24;i++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	e00c      	b.n	8001002 <BMP280_etalonnage+0x4e>
		printf("calib %2d = 0x%x\r\n",i,buffer[i]);
 8000fe8:	f107 020c 	add.w	r2, r7, #12
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ff6:	483f      	ldr	r0, [pc, #252]	; (80010f4 <BMP280_etalonnage+0x140>)
 8000ff8:	f004 fd04 	bl	8005a04 <iprintf>
	for(int i=0;i<24;i++){
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	3301      	adds	r3, #1
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	2b17      	cmp	r3, #23
 8001006:	ddef      	ble.n	8000fe8 <BMP280_etalonnage+0x34>
	}
	dig_T1 = buffer[0]|(buffer[1]<<8);
 8001008:	7b3b      	ldrb	r3, [r7, #12]
 800100a:	b21a      	sxth	r2, r3
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <BMP280_etalonnage+0x144>)
 8001018:	801a      	strh	r2, [r3, #0]
	dig_T2 = buffer[2]|(buffer[3]<<8);
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	b21a      	sxth	r2, r3
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <BMP280_etalonnage+0x148>)
 800102a:	801a      	strh	r2, [r3, #0]
	dig_T3 = buffer[4]|(buffer[5]<<8);
 800102c:	7c3b      	ldrb	r3, [r7, #16]
 800102e:	b21a      	sxth	r2, r3
 8001030:	7c7b      	ldrb	r3, [r7, #17]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <BMP280_etalonnage+0x14c>)
 800103c:	801a      	strh	r2, [r3, #0]
	dig_P1 = buffer[6]|(buffer[7]<<8);
 800103e:	7cbb      	ldrb	r3, [r7, #18]
 8001040:	b21a      	sxth	r2, r3
 8001042:	7cfb      	ldrb	r3, [r7, #19]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <BMP280_etalonnage+0x150>)
 800104e:	801a      	strh	r2, [r3, #0]
	dig_P2 = buffer[8]|(buffer[9]<<8);
 8001050:	7d3b      	ldrb	r3, [r7, #20]
 8001052:	b21a      	sxth	r2, r3
 8001054:	7d7b      	ldrb	r3, [r7, #21]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <BMP280_etalonnage+0x154>)
 8001060:	801a      	strh	r2, [r3, #0]
	dig_P3 = buffer[10]|(buffer[11]<<8);
 8001062:	7dbb      	ldrb	r3, [r7, #22]
 8001064:	b21a      	sxth	r2, r3
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <BMP280_etalonnage+0x158>)
 8001072:	801a      	strh	r2, [r3, #0]
	dig_P4 = buffer[12]|(buffer[13]<<8);
 8001074:	7e3b      	ldrb	r3, [r7, #24]
 8001076:	b21a      	sxth	r2, r3
 8001078:	7e7b      	ldrb	r3, [r7, #25]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <BMP280_etalonnage+0x15c>)
 8001084:	801a      	strh	r2, [r3, #0]
	dig_P5 = buffer[14]|(buffer[15]<<8);
 8001086:	7ebb      	ldrb	r3, [r7, #26]
 8001088:	b21a      	sxth	r2, r3
 800108a:	7efb      	ldrb	r3, [r7, #27]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <BMP280_etalonnage+0x160>)
 8001096:	801a      	strh	r2, [r3, #0]
	dig_P6 = buffer[16]|(buffer[17]<<8);
 8001098:	7f3b      	ldrb	r3, [r7, #28]
 800109a:	b21a      	sxth	r2, r3
 800109c:	7f7b      	ldrb	r3, [r7, #29]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <BMP280_etalonnage+0x164>)
 80010a8:	801a      	strh	r2, [r3, #0]
	dig_P7 = buffer[18]|(buffer[19]<<8);
 80010aa:	7fbb      	ldrb	r3, [r7, #30]
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7ffb      	ldrb	r3, [r7, #31]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <BMP280_etalonnage+0x168>)
 80010ba:	801a      	strh	r2, [r3, #0]
	dig_P8 = buffer[20]|(buffer[21]<<8);
 80010bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <BMP280_etalonnage+0x16c>)
 80010d0:	801a      	strh	r2, [r3, #0]
	dig_P9 = buffer[22]|(buffer[23]<<8);
 80010d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <BMP280_etalonnage+0x170>)
 80010e6:	801a      	strh	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08007ebc 	.word	0x08007ebc
 80010f4:	08007ed8 	.word	0x08007ed8
 80010f8:	200002ac 	.word	0x200002ac
 80010fc:	200002ae 	.word	0x200002ae
 8001100:	200002b0 	.word	0x200002b0
 8001104:	200002b2 	.word	0x200002b2
 8001108:	200002b4 	.word	0x200002b4
 800110c:	200002b6 	.word	0x200002b6
 8001110:	200002b8 	.word	0x200002b8
 8001114:	200002ba 	.word	0x200002ba
 8001118:	200002bc 	.word	0x200002bc
 800111c:	200002be 	.word	0x200002be
 8001120:	200002c0 	.word	0x200002c0
 8001124:	200002c2 	.word	0x200002c2

08001128 <BMP280_get_temp>:

int BMP280_get_temp(h_BMP280_t * h_BMP280)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint32_t var1,var2,T;
	uint8_t buffer[3];
	uint8_t temp=BMP280_TEMP_MSB;
 8001130:	23fa      	movs	r3, #250	; 0xfa
 8001132:	73fb      	strb	r3, [r7, #15]
	h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &temp, 1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f107 010f 	add.w	r1, r7, #15
 800113c:	2201      	movs	r2, #1
 800113e:	20ee      	movs	r0, #238	; 0xee
 8001140:	4798      	blx	r3
	h_BMP280->I2C_drv.receive(BMP280_I2CADDR, buffer, 3);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f107 0110 	add.w	r1, r7, #16
 800114a:	2203      	movs	r2, #3
 800114c:	20ee      	movs	r0, #238	; 0xee
 800114e:	4798      	blx	r3
	if (buffer[0]==0){
 8001150:	7c3b      	ldrb	r3, [r7, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <BMP280_get_temp+0x38>
		printf("Erreur de lecture\r\n");
 8001156:	4825      	ldr	r0, [pc, #148]	; (80011ec <BMP280_get_temp+0xc4>)
 8001158:	f004 fcba 	bl	8005ad0 <puts>
		return 1;
 800115c:	2301      	movs	r3, #1
 800115e:	e041      	b.n	80011e4 <BMP280_get_temp+0xbc>
	}
	T=buffer[0]|buffer[1]|buffer[2];
 8001160:	7c3a      	ldrb	r2, [r7, #16]
 8001162:	7c7b      	ldrb	r3, [r7, #17]
 8001164:	4313      	orrs	r3, r2
 8001166:	b2da      	uxtb	r2, r3
 8001168:	7cbb      	ldrb	r3, [r7, #18]
 800116a:	4313      	orrs	r3, r2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	61fb      	str	r3, [r7, #28]
	var1 = ((((T>>3) - (((uint32_t)dig_T1<<1))) * ((uint32_t)dig_T2))) >> 11;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <BMP280_get_temp+0xc8>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <BMP280_get_temp+0xcc>)
 8001180:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	0adb      	lsrs	r3, r3, #11
 800118a:	61bb      	str	r3, [r7, #24]
	var2 = ((((T>>4) - ((uint32_t)dig_T1)) * ((T>>4) - ((uint32_t)dig_T1))) >> 12)*((uint32_t)dig_T3) >> 14;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <BMP280_get_temp+0xc8>)
 8001192:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	0912      	lsrs	r2, r2, #4
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <BMP280_get_temp+0xc8>)
 800119e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80011a2:	1a52      	subs	r2, r2, r1
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	0b1b      	lsrs	r3, r3, #12
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <BMP280_get_temp+0xd0>)
 80011ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	0b9b      	lsrs	r3, r3, #14
 80011b6:	617b      	str	r3, [r7, #20]
	t_fine = var1 + var2;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	4413      	add	r3, r2
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <BMP280_get_temp+0xd4>)
 80011c0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <BMP280_get_temp+0xd4>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3380      	adds	r3, #128	; 0x80
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	61fb      	str	r3, [r7, #28]
	h_BMP280->temp=T;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a03 	vstr	s15, [r3, #12]
	return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	08007eec 	.word	0x08007eec
 80011f0:	200002ac 	.word	0x200002ac
 80011f4:	200002ae 	.word	0x200002ae
 80011f8:	200002b0 	.word	0x200002b0
 80011fc:	200002c4 	.word	0x200002c4

08001200 <BMP280_get_pressure>:

int BMP280_get_pressure(h_BMP280_t * h_BMP280)
{
 8001200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001204:	b0cb      	sub	sp, #300	; 0x12c
 8001206:	af00      	add	r7, sp, #0
 8001208:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	uint64_t var1,var2,P;
	uint8_t buffer[3];
	uint8_t temp=BMP280_PRESSURE_MSB;
 800120c:	23f7      	movs	r3, #247	; 0xf7
 800120e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	h_BMP280->I2C_drv.transmit(BMP280_I2CADDR, &temp, 1);
 8001212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001216:	685c      	ldr	r4, [r3, #4]
 8001218:	f207 130b 	addw	r3, r7, #267	; 0x10b
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	20ee      	movs	r0, #238	; 0xee
 8001222:	47a0      	blx	r4
	h_BMP280->I2C_drv.receive(BMP280_I2CADDR, buffer, 3);
 8001224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001228:	689c      	ldr	r4, [r3, #8]
 800122a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800122e:	2203      	movs	r2, #3
 8001230:	4619      	mov	r1, r3
 8001232:	20ee      	movs	r0, #238	; 0xee
 8001234:	47a0      	blx	r4
	if (buffer[0]==0){
 8001236:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d104      	bne.n	8001248 <BMP280_get_pressure+0x48>
		printf("Erreur de lecture\r\n");
 800123e:	48af      	ldr	r0, [pc, #700]	; (80014fc <BMP280_get_pressure+0x2fc>)
 8001240:	f004 fc46 	bl	8005ad0 <puts>
		return 1;
 8001244:	2301      	movs	r3, #1
 8001246:	e2ba      	b.n	80017be <BMP280_get_pressure+0x5be>
	}
	P =buffer[0]|buffer[1]|buffer[2];
 8001248:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800124c:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001250:	4313      	orrs	r3, r2
 8001252:	b2da      	uxtb	r2, r3
 8001254:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001258:	4313      	orrs	r3, r2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2200      	movs	r2, #0
 8001260:	653b      	str	r3, [r7, #80]	; 0x50
 8001262:	657a      	str	r2, [r7, #84]	; 0x54
 8001264:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001268:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

	var1 = t_fine - 128000;
 800126c:	4ba4      	ldr	r3, [pc, #656]	; (8001500 <BMP280_get_pressure+0x300>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f5a3 33fa 	sub.w	r3, r3, #128000	; 0x1f400
 8001274:	2200      	movs	r2, #0
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
 8001278:	64fa      	str	r2, [r7, #76]	; 0x4c
 800127a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800127e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var1 * var1 * (uint64_t)dig_P6;
 8001282:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001286:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800128a:	fb03 f102 	mul.w	r1, r3, r2
 800128e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001292:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	18ca      	adds	r2, r1, r3
 800129c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012a0:	fba3 8903 	umull	r8, r9, r3, r3
 80012a4:	eb02 0309 	add.w	r3, r2, r9
 80012a8:	4699      	mov	r9, r3
 80012aa:	4b96      	ldr	r3, [pc, #600]	; (8001504 <BMP280_get_pressure+0x304>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	17da      	asrs	r2, r3, #31
 80012b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80012b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80012bc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80012c0:	4603      	mov	r3, r0
 80012c2:	fb03 f209 	mul.w	r2, r3, r9
 80012c6:	460b      	mov	r3, r1
 80012c8:	fb08 f303 	mul.w	r3, r8, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	4602      	mov	r2, r0
 80012d0:	fba8 ab02 	umull	sl, fp, r8, r2
 80012d4:	445b      	add	r3, fp
 80012d6:	469b      	mov	fp, r3
 80012d8:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
 80012dc:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
	var2 = var2 + ((var1*(uint64_t)dig_P5)<<17);
 80012e0:	4b89      	ldr	r3, [pc, #548]	; (8001508 <BMP280_get_pressure+0x308>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	17da      	asrs	r2, r3, #31
 80012ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012ee:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80012f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80012f6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80012fa:	464a      	mov	r2, r9
 80012fc:	fb02 f203 	mul.w	r2, r2, r3
 8001300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001304:	4641      	mov	r1, r8
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	441a      	add	r2, r3
 800130c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001310:	4641      	mov	r1, r8
 8001312:	fba3 5601 	umull	r5, r6, r3, r1
 8001316:	1993      	adds	r3, r2, r6
 8001318:	461e      	mov	r6, r3
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	0471      	lsls	r1, r6, #17
 8001324:	ea41 31d5 	orr.w	r1, r1, r5, lsr #15
 8001328:	0468      	lsls	r0, r5, #17
 800132a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800132e:	1814      	adds	r4, r2, r0
 8001330:	643c      	str	r4, [r7, #64]	; 0x40
 8001332:	414b      	adcs	r3, r1
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
 8001336:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800133a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	var2 = var2 + ((uint64_t)dig_P4<<35);
 800133e:	4b73      	ldr	r3, [pc, #460]	; (800150c <BMP280_get_pressure+0x30c>)
 8001340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001344:	b21b      	sxth	r3, r3
 8001346:	17da      	asrs	r2, r3, #31
 8001348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800134c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001350:	f04f 0000 	mov.w	r0, #0
 8001354:	f04f 0100 	mov.w	r1, #0
 8001358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800135c:	00d9      	lsls	r1, r3, #3
 800135e:	2000      	movs	r0, #0
 8001360:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001364:	1814      	adds	r4, r2, r0
 8001366:	63bc      	str	r4, [r7, #56]	; 0x38
 8001368:	414b      	adcs	r3, r1
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800136c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001370:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	var1 = ((var1 * var1 * (uint64_t)dig_P3)>>8) + ((var1 * (uint64_t)dig_P2)<<12);
 8001374:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001378:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800137c:	fb03 f102 	mul.w	r1, r3, r2
 8001380:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001384:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	18ca      	adds	r2, r1, r3
 800138e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001392:	fba3 1303 	umull	r1, r3, r3, r3
 8001396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800139a:	460b      	mov	r3, r1
 800139c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80013a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013a4:	18d3      	adds	r3, r2, r3
 80013a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80013aa:	4b59      	ldr	r3, [pc, #356]	; (8001510 <BMP280_get_pressure+0x310>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80013bc:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80013c0:	462b      	mov	r3, r5
 80013c2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80013c6:	4642      	mov	r2, r8
 80013c8:	fb02 f203 	mul.w	r2, r2, r3
 80013cc:	464b      	mov	r3, r9
 80013ce:	4621      	mov	r1, r4
 80013d0:	fb01 f303 	mul.w	r3, r1, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	4622      	mov	r2, r4
 80013d8:	4641      	mov	r1, r8
 80013da:	fba2 1201 	umull	r1, r2, r2, r1
 80013de:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80013e2:	460a      	mov	r2, r1
 80013e4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80013e8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80013ec:	4413      	add	r3, r2
 80013ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80013f2:	f04f 0000 	mov.w	r0, #0
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80013fe:	4623      	mov	r3, r4
 8001400:	0a18      	lsrs	r0, r3, #8
 8001402:	462b      	mov	r3, r5
 8001404:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001408:	462b      	mov	r3, r5
 800140a:	0a19      	lsrs	r1, r3, #8
 800140c:	4b41      	ldr	r3, [pc, #260]	; (8001514 <BMP280_get_pressure+0x314>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	b21b      	sxth	r3, r3
 8001414:	17da      	asrs	r2, r3, #31
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800141a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800141e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001422:	e9d7 5628 	ldrd	r5, r6, [r7, #160]	; 0xa0
 8001426:	4632      	mov	r2, r6
 8001428:	fb02 f203 	mul.w	r2, r2, r3
 800142c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001430:	462c      	mov	r4, r5
 8001432:	fb04 f303 	mul.w	r3, r4, r3
 8001436:	441a      	add	r2, r3
 8001438:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800143c:	462c      	mov	r4, r5
 800143e:	fba3 4304 	umull	r4, r3, r3, r4
 8001442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001446:	4623      	mov	r3, r4
 8001448:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800144c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 8001462:	4634      	mov	r4, r6
 8001464:	0323      	lsls	r3, r4, #12
 8001466:	462c      	mov	r4, r5
 8001468:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800146c:	462c      	mov	r4, r5
 800146e:	0322      	lsls	r2, r4, #12
 8001470:	1884      	adds	r4, r0, r2
 8001472:	633c      	str	r4, [r7, #48]	; 0x30
 8001474:	eb41 0303 	adc.w	r3, r1, r3
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
 800147a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800147e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((((uint64_t)1<<47)+var1)*((uint64_t)dig_P1))>>33;
 8001482:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001486:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800148a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800148e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <BMP280_get_pressure+0x318>)
 8001494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001498:	b21b      	sxth	r3, r3
 800149a:	17da      	asrs	r2, r3, #31
 800149c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80014a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80014a4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80014a8:	462b      	mov	r3, r5
 80014aa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80014ae:	4642      	mov	r2, r8
 80014b0:	fb02 f203 	mul.w	r2, r2, r3
 80014b4:	464b      	mov	r3, r9
 80014b6:	4621      	mov	r1, r4
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	4622      	mov	r2, r4
 80014c0:	4641      	mov	r1, r8
 80014c2:	fba2 1201 	umull	r1, r2, r2, r1
 80014c6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80014ca:	460a      	mov	r2, r1
 80014cc:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80014d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80014d4:	4413      	add	r3, r2
 80014d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80014e6:	084a      	lsrs	r2, r1, #1
 80014e8:	2300      	movs	r3, #0
 80014ea:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	if (var1 == 0)
 80014ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80014f2:	4313      	orrs	r3, r2
 80014f4:	d112      	bne.n	800151c <BMP280_get_pressure+0x31c>
	{
		return 0; // avoid exception caused by division by zero
 80014f6:	2300      	movs	r3, #0
 80014f8:	e161      	b.n	80017be <BMP280_get_pressure+0x5be>
 80014fa:	bf00      	nop
 80014fc:	08007eec 	.word	0x08007eec
 8001500:	200002c4 	.word	0x200002c4
 8001504:	200002bc 	.word	0x200002bc
 8001508:	200002ba 	.word	0x200002ba
 800150c:	200002b8 	.word	0x200002b8
 8001510:	200002b6 	.word	0x200002b6
 8001514:	200002b4 	.word	0x200002b4
 8001518:	200002b2 	.word	0x200002b2
	}
	P = 1048576-P;
 800151c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001520:	2100      	movs	r1, #0
 8001522:	f5d2 1080 	rsbs	r0, r2, #1048576	; 0x100000
 8001526:	62b8      	str	r0, [r7, #40]	; 0x28
 8001528:	eb61 0303 	sbc.w	r3, r1, r3
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800152e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001532:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	P = (((P<<31)-var2)*3125)/var1;
 8001536:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800153a:	f04f 0000 	mov.w	r0, #0
 800153e:	f04f 0100 	mov.w	r1, #0
 8001542:	07d9      	lsls	r1, r3, #31
 8001544:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001548:	07d0      	lsls	r0, r2, #31
 800154a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800154e:	1a84      	subs	r4, r0, r2
 8001550:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001554:	eb61 0303 	sbc.w	r3, r1, r3
 8001558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800155c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8001560:	4622      	mov	r2, r4
 8001562:	462b      	mov	r3, r5
 8001564:	1891      	adds	r1, r2, r2
 8001566:	6239      	str	r1, [r7, #32]
 8001568:	415b      	adcs	r3, r3
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
 800156c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001570:	4621      	mov	r1, r4
 8001572:	1851      	adds	r1, r2, r1
 8001574:	61b9      	str	r1, [r7, #24]
 8001576:	4629      	mov	r1, r5
 8001578:	414b      	adcs	r3, r1
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001588:	4649      	mov	r1, r9
 800158a:	018b      	lsls	r3, r1, #6
 800158c:	4641      	mov	r1, r8
 800158e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001592:	4641      	mov	r1, r8
 8001594:	018a      	lsls	r2, r1, #6
 8001596:	4641      	mov	r1, r8
 8001598:	1889      	adds	r1, r1, r2
 800159a:	6139      	str	r1, [r7, #16]
 800159c:	4649      	mov	r1, r9
 800159e:	eb43 0101 	adc.w	r1, r3, r1
 80015a2:	6179      	str	r1, [r7, #20]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015b0:	4649      	mov	r1, r9
 80015b2:	008b      	lsls	r3, r1, #2
 80015b4:	4641      	mov	r1, r8
 80015b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ba:	4641      	mov	r1, r8
 80015bc:	008a      	lsls	r2, r1, #2
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	4622      	mov	r2, r4
 80015c6:	189b      	adds	r3, r3, r2
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	460b      	mov	r3, r1
 80015cc:	462a      	mov	r2, r5
 80015ce:	eb42 0303 	adc.w	r3, r2, r3
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015e0:	4649      	mov	r1, r9
 80015e2:	008b      	lsls	r3, r1, #2
 80015e4:	4641      	mov	r1, r8
 80015e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ea:	4641      	mov	r1, r8
 80015ec:	008a      	lsls	r2, r1, #2
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	4622      	mov	r2, r4
 80015f6:	189b      	adds	r3, r3, r2
 80015f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015fc:	462b      	mov	r3, r5
 80015fe:	460a      	mov	r2, r1
 8001600:	eb42 0303 	adc.w	r3, r2, r3
 8001604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001608:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800160c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001610:	f7ff fafa 	bl	8000c08 <__aeabi_uldivmod>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var1 = (((uint64_t)dig_P9) * (P>>13) * (P>>13)) >> 25;
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <BMP280_get_pressure+0x5cc>)
 800161e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001622:	b21b      	sxth	r3, r3
 8001624:	17da      	asrs	r2, r3, #31
 8001626:	67bb      	str	r3, [r7, #120]	; 0x78
 8001628:	67fa      	str	r2, [r7, #124]	; 0x7c
 800162a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0b50      	lsrs	r0, r2, #13
 8001638:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800163c:	0b59      	lsrs	r1, r3, #13
 800163e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001642:	462b      	mov	r3, r5
 8001644:	fb00 f203 	mul.w	r2, r0, r3
 8001648:	4623      	mov	r3, r4
 800164a:	fb03 f301 	mul.w	r3, r3, r1
 800164e:	4413      	add	r3, r2
 8001650:	4622      	mov	r2, r4
 8001652:	fba2 1200 	umull	r1, r2, r2, r0
 8001656:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800165a:	460a      	mov	r2, r1
 800165c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001660:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001664:	4413      	add	r3, r2
 8001666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800166a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0b50      	lsrs	r0, r2, #13
 8001678:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800167c:	0b59      	lsrs	r1, r3, #13
 800167e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001682:	462b      	mov	r3, r5
 8001684:	fb00 f203 	mul.w	r2, r0, r3
 8001688:	4623      	mov	r3, r4
 800168a:	fb03 f301 	mul.w	r3, r3, r1
 800168e:	4413      	add	r3, r2
 8001690:	4622      	mov	r2, r4
 8001692:	fba2 1200 	umull	r1, r2, r2, r0
 8001696:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800169a:	460a      	mov	r2, r1
 800169c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80016a0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80016a4:	4413      	add	r3, r2
 80016a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80016b6:	4621      	mov	r1, r4
 80016b8:	0e4a      	lsrs	r2, r1, #25
 80016ba:	4629      	mov	r1, r5
 80016bc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016c0:	4629      	mov	r1, r5
 80016c2:	0e4b      	lsrs	r3, r1, #25
 80016c4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var2 = (((uint64_t)dig_P8) * P) >> 19;
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <BMP280_get_pressure+0x5d0>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	17da      	asrs	r2, r3, #31
 80016d2:	673b      	str	r3, [r7, #112]	; 0x70
 80016d4:	677a      	str	r2, [r7, #116]	; 0x74
 80016d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016da:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80016de:	462a      	mov	r2, r5
 80016e0:	fb02 f203 	mul.w	r2, r2, r3
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016e8:	4621      	mov	r1, r4
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80016f4:	4621      	mov	r1, r4
 80016f6:	fba2 1201 	umull	r1, r2, r2, r1
 80016fa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80016fe:	460a      	mov	r2, r1
 8001700:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001704:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001708:	4413      	add	r3, r2
 800170a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800171a:	4621      	mov	r1, r4
 800171c:	0cca      	lsrs	r2, r1, #19
 800171e:	4629      	mov	r1, r5
 8001720:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001724:	4629      	mov	r1, r5
 8001726:	0ccb      	lsrs	r3, r1, #19
 8001728:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	P = ((P + var1 + var2) >> 8) + ((uint64_t)dig_P7<<4);
 800172c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001730:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001734:	1884      	adds	r4, r0, r2
 8001736:	66bc      	str	r4, [r7, #104]	; 0x68
 8001738:	eb41 0303 	adc.w	r3, r1, r3
 800173c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800173e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001742:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001746:	4621      	mov	r1, r4
 8001748:	1889      	adds	r1, r1, r2
 800174a:	6639      	str	r1, [r7, #96]	; 0x60
 800174c:	4629      	mov	r1, r5
 800174e:	eb43 0101 	adc.w	r1, r3, r1
 8001752:	6679      	str	r1, [r7, #100]	; 0x64
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001760:	4623      	mov	r3, r4
 8001762:	0a18      	lsrs	r0, r3, #8
 8001764:	462b      	mov	r3, r5
 8001766:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800176a:	462b      	mov	r3, r5
 800176c:	0a19      	lsrs	r1, r3, #8
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <BMP280_get_pressure+0x5d4>)
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	b21b      	sxth	r3, r3
 8001776:	17da      	asrs	r2, r3, #31
 8001778:	65bb      	str	r3, [r7, #88]	; 0x58
 800177a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8001788:	4634      	mov	r4, r6
 800178a:	0123      	lsls	r3, r4, #4
 800178c:	462c      	mov	r4, r5
 800178e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001792:	462c      	mov	r4, r5
 8001794:	0122      	lsls	r2, r4, #4
 8001796:	1884      	adds	r4, r0, r2
 8001798:	603c      	str	r4, [r7, #0]
 800179a:	eb41 0303 	adc.w	r3, r1, r3
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	h_BMP280->press=(uint32_t)P;
 80017a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017b8:	edc3 7a04 	vstr	s15, [r3, #16]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80017c4:	46bd      	mov	sp, r7
 80017c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ca:	bf00      	nop
 80017cc:	200002c2 	.word	0x200002c2
 80017d0:	200002c0 	.word	0x200002c0
 80017d4:	200002be 	.word	0x200002be

080017d8 <I2C_transmit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int I2C_transmit(uint8_t address, uint8_t *p_data, uint16_t size)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, address, p_data, size, 100);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	b299      	uxth	r1, r3
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	2264      	movs	r2, #100	; 0x64
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <I2C_transmit+0x2c>)
 80017f6:	f001 fb73 	bl	8002ee0 <HAL_I2C_Master_Transmit>
	return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002f0 	.word	0x200002f0

08001808 <I2C_receive>:

int I2C_receive(uint8_t address, uint8_t *p_data, uint16_t size)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af02      	add	r7, sp, #8
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	80bb      	strh	r3, [r7, #4]

	HAL_I2C_Master_Receive(&hi2c1, address, p_data, size, 100);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	b299      	uxth	r1, r3
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	2264      	movs	r2, #100	; 0x64
 8001820:	9200      	str	r2, [sp, #0]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <I2C_receive+0x2c>)
 8001826:	f001 fc59 	bl	80030dc <HAL_I2C_Master_Receive>
	return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002f0 	.word	0x200002f0

08001838 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800183c:	f000 fe0a 	bl	8002454 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001840:	f000 f838 	bl	80018b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001844:	f000 f984 	bl	8001b50 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001848:	f000 f958 	bl	8001afc <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800184c:	f000 f8a0 	bl	8001990 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001850:	f000 f8d2 	bl	80019f8 <MX_I2C1_Init>
	MX_UART4_Init();
 8001854:	f000 f8fe 	bl	8001a54 <MX_UART4_Init>
	MX_UART5_Init();
 8001858:	f000 f926 	bl	8001aa8 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	//Shell
	Shell_Init();
 800185c:	f000 f9fa 	bl	8001c54 <Shell_Init>

	//Accélérométre
	h_BMP280.I2C_drv.receive = I2C_receive;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <main+0x64>)
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <main+0x68>)
 8001864:	609a      	str	r2, [r3, #8]
	h_BMP280.I2C_drv.transmit = I2C_transmit;
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <main+0x64>)
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <main+0x6c>)
 800186a:	605a      	str	r2, [r3, #4]
	BMP280_init(&h_BMP280);
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <main+0x64>)
 800186e:	f7ff fb49 	bl	8000f04 <BMP280_init>
	printf("chip ID = 0x%02X\r\n", h_BMP280.chip);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <main+0x64>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <main+0x70>)
 800187a:	f004 f8c3 	bl	8005a04 <iprintf>
	printf("power mode = 0x%02X\r\n", h_BMP280.power);
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <main+0x64>)
 8001880:	789b      	ldrb	r3, [r3, #2]
 8001882:	4619      	mov	r1, r3
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <main+0x74>)
 8001886:	f004 f8bd 	bl	8005a04 <iprintf>
	printf("sample = 0x%02X\r\n", h_BMP280.sample);
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <main+0x64>)
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	4619      	mov	r1, r3
 8001890:	4807      	ldr	r0, [pc, #28]	; (80018b0 <main+0x78>)
 8001892:	f004 f8b7 	bl	8005a04 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001896:	f000 fa1d 	bl	8001cd4 <Shell_Loop>
	{
 800189a:	e7fc      	b.n	8001896 <main+0x5e>
 800189c:	20000410 	.word	0x20000410
 80018a0:	08001809 	.word	0x08001809
 80018a4:	080017d9 	.word	0x080017d9
 80018a8:	08007f00 	.word	0x08007f00
 80018ac:	08007f14 	.word	0x08007f14
 80018b0:	08007f2c 	.word	0x08007f2c

080018b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b094      	sub	sp, #80	; 0x50
 80018b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	2234      	movs	r2, #52	; 0x34
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fa18 	bl	8005cf8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <SystemClock_Config+0xd4>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a29      	ldr	r2, [pc, #164]	; (8001988 <SystemClock_Config+0xd4>)
 80018e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <SystemClock_Config+0xd4>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018f4:	2300      	movs	r3, #0
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <SystemClock_Config+0xd8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001900:	4a22      	ldr	r2, [pc, #136]	; (800198c <SystemClock_Config+0xd8>)
 8001902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <SystemClock_Config+0xd8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001914:	2302      	movs	r3, #2
 8001916:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2310      	movs	r3, #16
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001920:	2302      	movs	r3, #2
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001924:	2300      	movs	r3, #0
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001928:	2310      	movs	r3, #16
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 800192c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001930:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001932:	2304      	movs	r3, #4
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001936:	2302      	movs	r3, #2
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800193a:	2302      	movs	r3, #2
 800193c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fc68 	bl	8004218 <HAL_RCC_OscConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800194e:	f000 f97b 	bl	8001c48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001952:	230f      	movs	r3, #15
 8001954:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001956:	2302      	movs	r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f002 f908 	bl	8003b84 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800197a:	f000 f965 	bl	8001c48 <Error_Handler>
	}
}
 800197e:	bf00      	nop
 8001980:	3750      	adds	r7, #80	; 0x50
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_CAN1_Init+0x60>)
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <MX_CAN1_Init+0x64>)
 8001998:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <MX_CAN1_Init+0x60>)
 800199c:	2210      	movs	r2, #16
 800199e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019d8:	2200      	movs	r2, #0
 80019da:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_CAN1_Init+0x60>)
 80019de:	f000 fdab 	bl	8002538 <HAL_CAN_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_CAN1_Init+0x5c>
	{
		Error_Handler();
 80019e8:	f000 f92e 	bl	8001c48 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200002c8 	.word	0x200002c8
 80019f4:	40006400 	.word	0x40006400

080019f8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x50>)
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <MX_I2C1_Init+0x54>)
 8001a00:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x58>)
 8001a06:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a36:	f001 f90f 	bl	8002c58 <HAL_I2C_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001a40:	f000 f902 	bl	8001c48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200002f0 	.word	0x200002f0
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	000186a0 	.word	0x000186a0

08001a54 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <MX_UART4_Init+0x50>)
 8001a5c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_UART4_Init+0x4c>)
 8001a8c:	f002 fe62 	bl	8004754 <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8001a96:	f000 f8d7 	bl	8001c48 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000344 	.word	0x20000344
 8001aa4:	40004c00 	.word	0x40004c00

08001aa8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <MX_UART5_Init+0x50>)
 8001ab0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_UART5_Init+0x4c>)
 8001ae0:	f002 fe38 	bl	8004754 <HAL_UART_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_UART5_Init+0x46>
	{
		Error_Handler();
 8001aea:	f000 f8ad 	bl	8001c48 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000388 	.word	0x20000388
 8001af8:	40005000 	.word	0x40005000

08001afc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART2_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b34:	f002 fe0e 	bl	8004754 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001b3e:	f000 f883 	bl	8001c48 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200003cc 	.word	0x200003cc
 8001b4c:	40004400 	.word	0x40004400

08001b50 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_GPIO_Init+0xec>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <MX_GPIO_Init+0xf0>)
 8001bf8:	f001 f814 	bl	8002c24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001c14:	f000 fe72 	bl	80028fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <MX_GPIO_Init+0xf0>)
 8001c30:	f000 fe64 	bl	80028fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020800 	.word	0x40020800

08001c48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <Shell_Init>:
/**
 * @brief Fonction d'initialisation du Shell
 * @note Affiche un message d'accueil lors du lançement du programme
 */

void Shell_Init(void){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001c58:	2224      	movs	r2, #36	; 0x24
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <Shell_Init+0x64>)
 8001c5e:	f004 f84b 	bl	8005cf8 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	2100      	movs	r1, #0
 8001c66:	4815      	ldr	r0, [pc, #84]	; (8001cbc <Shell_Init+0x68>)
 8001c68:	f004 f846 	bl	8005cf8 <memset>
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <Shell_Init+0x6c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	2100      	movs	r1, #0
 8001c76:	4813      	ldr	r0, [pc, #76]	; (8001cc4 <Shell_Init+0x70>)
 8001c78:	f004 f83e 	bl	8005cf8 <memset>

	HAL_UART_Receive_IT(&huart5, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4910      	ldr	r1, [pc, #64]	; (8001cc0 <Shell_Init+0x6c>)
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <Shell_Init+0x74>)
 8001c82:	f002 fe46 	bl	8004912 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart5, started, strlen((char *)started), HAL_MAX_DELAY);
 8001c86:	4811      	ldr	r0, [pc, #68]	; (8001ccc <Shell_Init+0x78>)
 8001c88:	f7fe fb22 	bl	80002d0 <strlen>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
 8001c94:	490d      	ldr	r1, [pc, #52]	; (8001ccc <Shell_Init+0x78>)
 8001c96:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <Shell_Init+0x74>)
 8001c98:	f002 fda9 	bl	80047ee <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart5, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <Shell_Init+0x7c>)
 8001c9e:	f7fe fb17 	bl	80002d0 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <Shell_Init+0x7c>)
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <Shell_Init+0x74>)
 8001cae:	f002 fd9e 	bl	80047ee <HAL_UART_Transmit>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200004b8 	.word	0x200004b8
 8001cbc:	20000474 	.word	0x20000474
 8001cc0:	20000430 	.word	0x20000430
 8001cc4:	20000434 	.word	0x20000434
 8001cc8:	20000388 	.word	0x20000388
 8001ccc:	2000001c 	.word	0x2000001c
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <Shell_Loop>:

/**
 * @brief Cette fonction tourne en boucle afin de recevoir et d'exécuter les commandes du Shell
 */
void Shell_Loop(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
	if(uartRxReceived){ //Condition verifiée lors de la réception d'un nouveau caractère UART
 8001cda:	4b6b      	ldr	r3, [pc, #428]	; (8001e88 <Shell_Loop+0x1b4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d05b      	beq.n	8001d9a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001ce2:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <Shell_Loop+0x1b8>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d034      	beq.n	8001d54 <Shell_Loop+0x80>
 8001cea:	2b0d      	cmp	r3, #13
 8001cec:	d142      	bne.n	8001d74 <Shell_Loop+0xa0>
		case ASCII_CR: //Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart5, newline, sizeof(newline), HAL_MAX_DELAY);
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	4966      	ldr	r1, [pc, #408]	; (8001e90 <Shell_Loop+0x1bc>)
 8001cf6:	4867      	ldr	r0, [pc, #412]	; (8001e94 <Shell_Loop+0x1c0>)
 8001cf8:	f002 fd79 	bl	80047ee <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <Shell_Loop+0x1c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a66      	ldr	r2, [pc, #408]	; (8001e9c <Shell_Loop+0x1c8>)
 8001d02:	2100      	movs	r1, #0
 8001d04:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001d06:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <Shell_Loop+0x1cc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001d0c:	4965      	ldr	r1, [pc, #404]	; (8001ea4 <Shell_Loop+0x1d0>)
 8001d0e:	4863      	ldr	r0, [pc, #396]	; (8001e9c <Shell_Loop+0x1c8>)
 8001d10:	f003 fffa 	bl	8005d08 <strtok>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a64      	ldr	r2, [pc, #400]	; (8001ea8 <Shell_Loop+0x1d4>)
 8001d18:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001d1a:	e010      	b.n	8001d3e <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001d1c:	4b60      	ldr	r3, [pc, #384]	; (8001ea0 <Shell_Loop+0x1cc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	495f      	ldr	r1, [pc, #380]	; (8001ea0 <Shell_Loop+0x1cc>)
 8001d24:	600a      	str	r2, [r1, #0]
 8001d26:	4a60      	ldr	r2, [pc, #384]	; (8001ea8 <Shell_Loop+0x1d4>)
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4960      	ldr	r1, [pc, #384]	; (8001eac <Shell_Loop+0x1d8>)
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001d30:	495c      	ldr	r1, [pc, #368]	; (8001ea4 <Shell_Loop+0x1d0>)
 8001d32:	2000      	movs	r0, #0
 8001d34:	f003 ffe8 	bl	8005d08 <strtok>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <Shell_Loop+0x1d4>)
 8001d3c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <Shell_Loop+0x1d4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ea      	bne.n	8001d1c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001d46:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <Shell_Loop+0x1c4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001d4c:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <Shell_Loop+0x1dc>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
			break;
 8001d52:	e01f      	b.n	8001d94 <Shell_Loop+0xc0>
		case ASCII_BACK: //Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001d54:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <Shell_Loop+0x1c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	494f      	ldr	r1, [pc, #316]	; (8001e98 <Shell_Loop+0x1c4>)
 8001d5c:	600a      	str	r2, [r1, #0]
 8001d5e:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <Shell_Loop+0x1c8>)
 8001d60:	2100      	movs	r1, #0
 8001d62:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart5, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4952      	ldr	r1, [pc, #328]	; (8001eb4 <Shell_Loop+0x1e0>)
 8001d6c:	4849      	ldr	r0, [pc, #292]	; (8001e94 <Shell_Loop+0x1c0>)
 8001d6e:	f002 fd3e 	bl	80047ee <HAL_UART_Transmit>
			break;
 8001d72:	e00f      	b.n	8001d94 <Shell_Loop+0xc0>

		default: //Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001d74:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <Shell_Loop+0x1c4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	4947      	ldr	r1, [pc, #284]	; (8001e98 <Shell_Loop+0x1c4>)
 8001d7c:	600a      	str	r2, [r1, #0]
 8001d7e:	4a43      	ldr	r2, [pc, #268]	; (8001e8c <Shell_Loop+0x1b8>)
 8001d80:	7811      	ldrb	r1, [r2, #0]
 8001d82:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <Shell_Loop+0x1c8>)
 8001d84:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart5, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	493f      	ldr	r1, [pc, #252]	; (8001e8c <Shell_Loop+0x1b8>)
 8001d8e:	4841      	ldr	r0, [pc, #260]	; (8001e94 <Shell_Loop+0x1c0>)
 8001d90:	f002 fd2d 	bl	80047ee <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001d94:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <Shell_Loop+0x1b4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){ //Condition vérifiant la validitée d'une commande
 8001d9a:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <Shell_Loop+0x1dc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d06d      	beq.n	8001e7e <Shell_Loop+0x1aa>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <Shell_Loop+0x1d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4944      	ldr	r1, [pc, #272]	; (8001eb8 <Shell_Loop+0x1e4>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fa31 	bl	8000210 <strcmp>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart5, brian, sizeof(brian), HAL_MAX_DELAY);
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	221a      	movs	r2, #26
 8001dba:	4940      	ldr	r1, [pc, #256]	; (8001ebc <Shell_Loop+0x1e8>)
 8001dbc:	4835      	ldr	r0, [pc, #212]	; (8001e94 <Shell_Loop+0x1c0>)
 8001dbe:	f002 fd16 	bl	80047ee <HAL_UART_Transmit>
 8001dc2:	e052      	b.n	8001e6a <Shell_Loop+0x196>
		}
		else if(strcmp(argv[0],"etalonnage")==0){//Fonction help renvoyant la notice des fonctions spécifiées
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <Shell_Loop+0x1d8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	493d      	ldr	r1, [pc, #244]	; (8001ec0 <Shell_Loop+0x1ec>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa20 	bl	8000210 <strcmp>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d142      	bne.n	8001e5c <Shell_Loop+0x188>
			BMP280_etalonnage(&h_BMP280);
 8001dd6:	483b      	ldr	r0, [pc, #236]	; (8001ec4 <Shell_Loop+0x1f0>)
 8001dd8:	f7ff f8ec 	bl	8000fb4 <BMP280_etalonnage>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Etalonnage en cours\r\n");
 8001ddc:	4a3a      	ldr	r2, [pc, #232]	; (8001ec8 <Shell_Loop+0x1f4>)
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	483a      	ldr	r0, [pc, #232]	; (8001ecc <Shell_Loop+0x1f8>)
 8001de2:	f003 fe7d 	bl	8005ae0 <sniprintf>
 8001de6:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart5, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	4936      	ldr	r1, [pc, #216]	; (8001ecc <Shell_Loop+0x1f8>)
 8001df2:	4828      	ldr	r0, [pc, #160]	; (8001e94 <Shell_Loop+0x1c0>)
 8001df4:	f002 fcfb 	bl	80047ee <HAL_UART_Transmit>
			if(strcmp(argv[1],"get_temp_press")==0){
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <Shell_Loop+0x1d8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <Shell_Loop+0x1fc>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fa06 	bl	8000210 <strcmp>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d12f      	bne.n	8001e6a <Shell_Loop+0x196>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Acquisition de la température\r\n");
 8001e0a:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <Shell_Loop+0x200>)
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	482f      	ldr	r0, [pc, #188]	; (8001ecc <Shell_Loop+0x1f8>)
 8001e10:	f003 fe66 	bl	8005ae0 <sniprintf>
 8001e14:	6038      	str	r0, [r7, #0]
				HAL_UART_Transmit(&huart5, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	492b      	ldr	r1, [pc, #172]	; (8001ecc <Shell_Loop+0x1f8>)
 8001e20:	481c      	ldr	r0, [pc, #112]	; (8001e94 <Shell_Loop+0x1c0>)
 8001e22:	f002 fce4 	bl	80047ee <HAL_UART_Transmit>
				BMP280_get_temp(&h_BMP280);
 8001e26:	4827      	ldr	r0, [pc, #156]	; (8001ec4 <Shell_Loop+0x1f0>)
 8001e28:	f7ff f97e 	bl	8001128 <BMP280_get_temp>
				BMP280_get_pressure(&h_BMP280);
 8001e2c:	4825      	ldr	r0, [pc, #148]	; (8001ec4 <Shell_Loop+0x1f0>)
 8001e2e:	f7ff f9e7 	bl	8001200 <BMP280_get_pressure>
				printf("power mode = %f\r\n", h_BMP280.temp);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <Shell_Loop+0x1f0>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fbb6 	bl	80005a8 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4825      	ldr	r0, [pc, #148]	; (8001ed8 <Shell_Loop+0x204>)
 8001e42:	f003 fddf 	bl	8005a04 <iprintf>
				printf("sample = %f\r\n", h_BMP280.press);
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <Shell_Loop+0x1f0>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fbac 	bl	80005a8 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4821      	ldr	r0, [pc, #132]	; (8001edc <Shell_Loop+0x208>)
 8001e56:	f003 fdd5 	bl	8005a04 <iprintf>
 8001e5a:	e006      	b.n	8001e6a <Shell_Loop+0x196>
			}
		}
		else{
			HAL_UART_Transmit(&huart5, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	2214      	movs	r2, #20
 8001e62:	491f      	ldr	r1, [pc, #124]	; (8001ee0 <Shell_Loop+0x20c>)
 8001e64:	480b      	ldr	r0, [pc, #44]	; (8001e94 <Shell_Loop+0x1c0>)
 8001e66:	f002 fcc2 	bl	80047ee <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart5, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	221c      	movs	r2, #28
 8001e70:	491c      	ldr	r1, [pc, #112]	; (8001ee4 <Shell_Loop+0x210>)
 8001e72:	4808      	ldr	r0, [pc, #32]	; (8001e94 <Shell_Loop+0x1c0>)
 8001e74:	f002 fcbb 	bl	80047ee <HAL_UART_Transmit>
		newCmdReady = 0;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <Shell_Loop+0x1dc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
	}
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000042c 	.word	0x2000042c
 8001e8c:	20000430 	.word	0x20000430
 8001e90:	20000084 	.word	0x20000084
 8001e94:	20000388 	.word	0x20000388
 8001e98:	200004b4 	.word	0x200004b4
 8001e9c:	20000474 	.word	0x20000474
 8001ea0:	200004dc 	.word	0x200004dc
 8001ea4:	08007f40 	.word	0x08007f40
 8001ea8:	200004e0 	.word	0x200004e0
 8001eac:	200004b8 	.word	0x200004b8
 8001eb0:	200004e4 	.word	0x200004e4
 8001eb4:	20000088 	.word	0x20000088
 8001eb8:	08007f44 	.word	0x08007f44
 8001ebc:	200000a0 	.word	0x200000a0
 8001ec0:	08007f54 	.word	0x08007f54
 8001ec4:	20000410 	.word	0x20000410
 8001ec8:	08007f60 	.word	0x08007f60
 8001ecc:	20000434 	.word	0x20000434
 8001ed0:	08007f78 	.word	0x08007f78
 8001ed4:	08007f88 	.word	0x08007f88
 8001ed8:	08007fac 	.word	0x08007fac
 8001edc:	08007fc0 	.word	0x08007fc0
 8001ee0:	2000008c 	.word	0x2000008c
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_MspInit+0x4c>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f26:	2007      	movs	r0, #7
 8001f28:	f000 fcb4 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_CAN_MspInit+0x84>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12c      	bne.n	8001fb4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_CAN_MspInit+0x88>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_CAN_MspInit+0x88>)
 8001f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_CAN_MspInit+0x88>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_CAN_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_CAN_MspInit+0x88>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_CAN_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fa4:	2309      	movs	r3, #9
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <HAL_CAN_MspInit+0x8c>)
 8001fb0:	f000 fca4 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40006400 	.word	0x40006400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_I2C_MspInit+0x84>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12c      	bne.n	8002044 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_I2C_MspInit+0x88>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a17      	ldr	r2, [pc, #92]	; (8002050 <HAL_I2C_MspInit+0x88>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_I2C_MspInit+0x88>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200c:	2312      	movs	r3, #18
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002018:	2304      	movs	r3, #4
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	480c      	ldr	r0, [pc, #48]	; (8002054 <HAL_I2C_MspInit+0x8c>)
 8002024:	f000 fc6a 	bl	80028fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_I2C_MspInit+0x88>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_I2C_MspInit+0x88>)
 8002032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_I2C_MspInit+0x88>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40005400 	.word	0x40005400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020400 	.word	0x40020400

08002058 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5a      	ldr	r2, [pc, #360]	; (80021e0 <HAL_UART_MspInit+0x188>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12c      	bne.n	80020d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002084:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020b2:	2303      	movs	r3, #3
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020c2:	2308      	movs	r3, #8
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4846      	ldr	r0, [pc, #280]	; (80021e8 <HAL_UART_MspInit+0x190>)
 80020ce:	f000 fc15 	bl	80028fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d2:	e081      	b.n	80021d8 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==UART5)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_UART_MspInit+0x194>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d14b      	bne.n	8002176 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a3f      	ldr	r2, [pc, #252]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80020e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a38      	ldr	r2, [pc, #224]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a31      	ldr	r2, [pc, #196]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002144:	2308      	movs	r3, #8
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4828      	ldr	r0, [pc, #160]	; (80021f0 <HAL_UART_MspInit+0x198>)
 8002150:	f000 fbd4 	bl	80028fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002154:	2304      	movs	r3, #4
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002164:	2308      	movs	r3, #8
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4821      	ldr	r0, [pc, #132]	; (80021f4 <HAL_UART_MspInit+0x19c>)
 8002170:	f000 fbc4 	bl	80028fc <HAL_GPIO_Init>
}
 8002174:	e030      	b.n	80021d8 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_UART_MspInit+0x1a0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12b      	bne.n	80021d8 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 800218a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_UART_MspInit+0x18c>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021b8:	230c      	movs	r3, #12
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c8:	2307      	movs	r3, #7
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_UART_MspInit+0x190>)
 80021d4:	f000 fb92 	bl	80028fc <HAL_GPIO_Init>
}
 80021d8:	bf00      	nop
 80021da:	3738      	adds	r7, #56	; 0x38
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40004c00 	.word	0x40004c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40005000 	.word	0x40005000
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40004400 	.word	0x40004400

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002248:	f000 f956 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_kill>:

int _kill(int pid, int sig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800226a:	f003 fdf3 	bl	8005e54 <__errno>
 800226e:	4603      	mov	r3, r0
 8002270:	2216      	movs	r2, #22
 8002272:	601a      	str	r2, [r3, #0]
  return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002292:	e7fe      	b.n	8002292 <_exit+0x12>

08002294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e00a      	b.n	80022bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	4601      	mov	r1, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf0      	blt.n	80022a6 <_read+0x12>
  }

  return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e009      	b.n	80022f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf1      	blt.n	80022e0 <_write+0x12>
  }
  return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_close>:

int _close(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232e:	605a      	str	r2, [r3, #4]
  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_isatty>:

int _isatty(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f003 fd58 	bl	8005e54 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20020000 	.word	0x20020000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	200004e8 	.word	0x200004e8
 80023d8:	20000640 	.word	0x20000640

080023dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002438 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002404:	480d      	ldr	r0, [pc, #52]	; (800243c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002406:	490e      	ldr	r1, [pc, #56]	; (8002440 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002408:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800241c:	4c0b      	ldr	r4, [pc, #44]	; (800244c <LoopFillZerobss+0x26>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800242a:	f7ff ffd7 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800242e:	f003 fd17 	bl	8005e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7ff fa01 	bl	8001838 <main>
  bx  lr    
 8002436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002444:	080083c0 	.word	0x080083c0
  ldr r2, =_sbss
 8002448:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800244c:	2000063c 	.word	0x2000063c

08002450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_Init+0x40>)
 800245e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_Init+0x40>)
 800246a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_Init+0x40>)
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f000 fa09 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f808 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fd2e 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023c00 	.word	0x40023c00

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x54>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x58>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fa13 	bl	80028e2 <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 f9e9 	bl	80028aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <HAL_InitTick+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200000bc 	.word	0x200000bc
 80024f0:	200000c4 	.word	0x200000c4
 80024f4:	200000c0 	.word	0x200000c0

080024f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200000c4 	.word	0x200000c4
 800251c:	200004ec 	.word	0x200004ec

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200004ec 	.word	0x200004ec

08002538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ed      	b.n	8002726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fcee 	bl	8001f38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256c:	f7ff ffd8 	bl	8002520 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002572:	e012      	b.n	800259a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002574:	f7ff ffd4 	bl	8002520 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d90b      	bls.n	800259a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0c5      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0e5      	beq.n	8002574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0202 	bic.w	r2, r2, #2
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b8:	f7ff ffb2 	bl	8002520 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025be:	e012      	b.n	80025e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff ffae 	bl	8002520 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d90b      	bls.n	80025e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e09f      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e5      	bne.n	80025c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e007      	b.n	8002648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e9b      	ldrb	r3, [r3, #26]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0220 	bic.w	r2, r2, #32
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7edb      	ldrb	r3, [r3, #27]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e007      	b.n	800269c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0210 	orr.w	r2, r2, #16
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7f1b      	ldrb	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0208 	orr.w	r2, r2, #8
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e007      	b.n	80026c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7f5b      	ldrb	r3, [r3, #29]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0204 	orr.w	r2, r2, #4
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e007      	b.n	80026f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800275c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	; (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	; (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	210f      	movs	r1, #15
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7ff ff8e 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff47 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff5c 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff8e 	bl	80027e8 <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5d 	bl	8002794 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffb0 	bl	8002850 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e165      	b.n	8002be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002918:	2201      	movs	r2, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8154 	bne.w	8002bde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b01      	cmp	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294a:	2b02      	cmp	r3, #2
 800294c:	d130      	bne.n	80029b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 0201 	and.w	r2, r3, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d017      	beq.n	80029ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d123      	bne.n	8002a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0203 	and.w	r2, r3, #3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80ae 	beq.w	8002bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b5a      	ldr	r3, [pc, #360]	; (8002bfc <HAL_GPIO_Init+0x300>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9e:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4f      	ldr	r2, [pc, #316]	; (8002c04 <HAL_GPIO_Init+0x308>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d025      	beq.n	8002b16 <HAL_GPIO_Init+0x21a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4e      	ldr	r2, [pc, #312]	; (8002c08 <HAL_GPIO_Init+0x30c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <HAL_GPIO_Init+0x216>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4d      	ldr	r2, [pc, #308]	; (8002c0c <HAL_GPIO_Init+0x310>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x212>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4c      	ldr	r2, [pc, #304]	; (8002c10 <HAL_GPIO_Init+0x314>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x20e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4b      	ldr	r2, [pc, #300]	; (8002c14 <HAL_GPIO_Init+0x318>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x20a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_GPIO_Init+0x31c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x206>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a49      	ldr	r2, [pc, #292]	; (8002c1c <HAL_GPIO_Init+0x320>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x202>
 8002afa:	2306      	movs	r3, #6
 8002afc:	e00c      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00a      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e008      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002b06:	2304      	movs	r3, #4
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e004      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_GPIO_Init+0x21c>
 8002b16:	2300      	movs	r3, #0
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	f002 0203 	and.w	r2, r2, #3
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	4093      	lsls	r3, r2
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b28:	4935      	ldr	r1, [pc, #212]	; (8002c00 <HAL_GPIO_Init+0x304>)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b36:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5a:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b60:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b84:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8a:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	f67f ae96 	bls.w	8002918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	807b      	strh	r3, [r7, #2]
 8002c30:	4613      	mov	r3, r2
 8002c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	787b      	ldrb	r3, [r7, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c40:	e003      	b.n	8002c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c42:	887b      	ldrh	r3, [r7, #2]
 8002c44:	041a      	lsls	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	619a      	str	r2, [r3, #24]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e12b      	b.n	8002ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff f9a2 	bl	8001fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2224      	movs	r2, #36	; 0x24
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cbc:	f001 f854 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8002cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a81      	ldr	r2, [pc, #516]	; (8002ecc <HAL_I2C_Init+0x274>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d807      	bhi.n	8002cdc <HAL_I2C_Init+0x84>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_I2C_Init+0x278>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	bf94      	ite	ls
 8002cd4:	2301      	movls	r3, #1
 8002cd6:	2300      	movhi	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e006      	b.n	8002cea <HAL_I2C_Init+0x92>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a7d      	ldr	r2, [pc, #500]	; (8002ed4 <HAL_I2C_Init+0x27c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	bf94      	ite	ls
 8002ce4:	2301      	movls	r3, #1
 8002ce6:	2300      	movhi	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0e7      	b.n	8002ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a78      	ldr	r2, [pc, #480]	; (8002ed8 <HAL_I2C_Init+0x280>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	0c9b      	lsrs	r3, r3, #18
 8002cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4a6a      	ldr	r2, [pc, #424]	; (8002ecc <HAL_I2C_Init+0x274>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d802      	bhi.n	8002d2c <HAL_I2C_Init+0xd4>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	e009      	b.n	8002d40 <HAL_I2C_Init+0xe8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	4a69      	ldr	r2, [pc, #420]	; (8002edc <HAL_I2C_Init+0x284>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	3301      	adds	r3, #1
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	495c      	ldr	r1, [pc, #368]	; (8002ecc <HAL_I2C_Init+0x274>)
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	d819      	bhi.n	8002d94 <HAL_I2C_Init+0x13c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e59      	subs	r1, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6e:	1c59      	adds	r1, r3, #1
 8002d70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d74:	400b      	ands	r3, r1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_I2C_Init+0x138>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e59      	subs	r1, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8e:	e051      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002d90:	2304      	movs	r3, #4
 8002d92:	e04f      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d111      	bne.n	8002dc0 <HAL_I2C_Init+0x168>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e58      	subs	r0, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e012      	b.n	8002de6 <HAL_I2C_Init+0x18e>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e58      	subs	r0, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	0099      	lsls	r1, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Init+0x196>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e022      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10e      	bne.n	8002e14 <HAL_I2C_Init+0x1bc>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e58      	subs	r0, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6859      	ldr	r1, [r3, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	440b      	add	r3, r1
 8002e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Init+0x1dc>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1e58      	subs	r0, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	0099      	lsls	r1, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	6809      	ldr	r1, [r1, #0]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6911      	ldr	r1, [r2, #16]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	000186a0 	.word	0x000186a0
 8002ed0:	001e847f 	.word	0x001e847f
 8002ed4:	003d08ff 	.word	0x003d08ff
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	10624dd3 	.word	0x10624dd3

08002ee0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	817b      	strh	r3, [r7, #10]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff fb14 	bl	8002520 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	f040 80e0 	bne.w	80030c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2319      	movs	r3, #25
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4970      	ldr	r1, [pc, #448]	; (80030d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fc58 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0d3      	b.n	80030ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_I2C_Master_Transmit+0x50>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e0cc      	b.n	80030ca <HAL_I2C_Master_Transmit+0x1ea>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d007      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2221      	movs	r2, #33	; 0x21
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2210      	movs	r2, #16
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	893a      	ldrh	r2, [r7, #8]
 8002f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a50      	ldr	r2, [pc, #320]	; (80030d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f98:	8979      	ldrh	r1, [r7, #10]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fac2 	bl	8003528 <I2C_MasterRequestWrite>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e08d      	b.n	80030ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fc4:	e066      	b.n	8003094 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	6a39      	ldr	r1, [r7, #32]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fcd2 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d107      	bne.n	8002fee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d11b      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x188>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d017      	beq.n	8003068 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	6a39      	ldr	r1, [r7, #32]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fcc2 	bl	80039f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00d      	beq.n	8003094 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b04      	cmp	r3, #4
 800307e:	d107      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e01a      	b.n	80030ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d194      	bne.n	8002fc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	00100002 	.word	0x00100002
 80030d8:	ffff0000 	.word	0xffff0000

080030dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	; 0x30
 80030e0:	af02      	add	r7, sp, #8
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	461a      	mov	r2, r3
 80030e8:	460b      	mov	r3, r1
 80030ea:	817b      	strh	r3, [r7, #10]
 80030ec:	4613      	mov	r3, r2
 80030ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fa16 	bl	8002520 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	f040 820b 	bne.w	800351a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2319      	movs	r3, #25
 800310a:	2201      	movs	r2, #1
 800310c:	497c      	ldr	r1, [pc, #496]	; (8003300 <HAL_I2C_Master_Receive+0x224>)
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fb5a 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
 800311c:	e1fe      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_I2C_Master_Receive+0x50>
 8003128:	2302      	movs	r3, #2
 800312a:	e1f7      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d007      	beq.n	8003152 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003160:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2222      	movs	r2, #34	; 0x22
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2210      	movs	r2, #16
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	893a      	ldrh	r2, [r7, #8]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a5c      	ldr	r2, [pc, #368]	; (8003304 <HAL_I2C_Master_Receive+0x228>)
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003194:	8979      	ldrh	r1, [r7, #10]
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa46 	bl	800362c <I2C_MasterRequestRead>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1b8      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	623b      	str	r3, [r7, #32]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	623b      	str	r3, [r7, #32]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e18c      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d11b      	bne.n	800321a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e16c      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b02      	cmp	r3, #2
 8003220:	d11b      	bne.n	800325a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003230:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	e14c      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003268:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003280:	e138      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003286:	2b03      	cmp	r3, #3
 8003288:	f200 80f1 	bhi.w	800346e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	2b01      	cmp	r3, #1
 8003292:	d123      	bne.n	80032dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fbed 	bl	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e139      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032da:	e10b      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d14e      	bne.n	8003382 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	2200      	movs	r2, #0
 80032ec:	4906      	ldr	r1, [pc, #24]	; (8003308 <HAL_I2C_Master_Receive+0x22c>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa6a 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e10e      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
 80032fe:	bf00      	nop
 8003300:	00100002 	.word	0x00100002
 8003304:	ffff0000 	.word	0xffff0000
 8003308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003380:	e0b8      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2200      	movs	r2, #0
 800338a:	4966      	ldr	r1, [pc, #408]	; (8003524 <HAL_I2C_Master_Receive+0x448>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fa1b 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0bf      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	2200      	movs	r2, #0
 80033e6:	494f      	ldr	r1, [pc, #316]	; (8003524 <HAL_I2C_Master_Receive+0x448>)
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f9ed 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e091      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800346c:	e042      	b.n	80034f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fb00 	bl	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e04c      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d118      	bne.n	80034f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f47f aec2 	bne.w	8003282 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3728      	adds	r7, #40	; 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	00010004 	.word	0x00010004

08003528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	460b      	mov	r3, r1
 8003536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d006      	beq.n	8003552 <I2C_MasterRequestWrite+0x2a>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d003      	beq.n	8003552 <I2C_MasterRequestWrite+0x2a>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003550:	d108      	bne.n	8003564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e00b      	b.n	800357c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b12      	cmp	r3, #18
 800356a:	d107      	bne.n	800357c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f91d 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a2:	d103      	bne.n	80035ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e035      	b.n	800361c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b8:	d108      	bne.n	80035cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	e01b      	b.n	8003604 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	11db      	asrs	r3, r3, #7
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f063 030f 	orn	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <I2C_MasterRequestWrite+0xfc>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f943 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e010      	b.n	800361c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <I2C_MasterRequestWrite+0x100>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f933 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010008 	.word	0x00010008
 8003628:	00010002 	.word	0x00010002

0800362c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	460b      	mov	r3, r1
 800363a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003650:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d006      	beq.n	8003666 <I2C_MasterRequestRead+0x3a>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d003      	beq.n	8003666 <I2C_MasterRequestRead+0x3a>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003664:	d108      	bne.n	8003678 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e00b      	b.n	8003690 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	2b11      	cmp	r3, #17
 800367e:	d107      	bne.n	8003690 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f893 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b6:	d103      	bne.n	80036c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e079      	b.n	80037b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036cc:	d108      	bne.n	80036e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036ce:	897b      	ldrh	r3, [r7, #10]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]
 80036de:	e05f      	b.n	80037a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036e0:	897b      	ldrh	r3, [r7, #10]
 80036e2:	11db      	asrs	r3, r3, #7
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f063 030f 	orn	r3, r3, #15
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4930      	ldr	r1, [pc, #192]	; (80037c0 <I2C_MasterRequestRead+0x194>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8b9 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e054      	b.n	80037b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4929      	ldr	r1, [pc, #164]	; (80037c4 <I2C_MasterRequestRead+0x198>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8a9 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e044      	b.n	80037b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003752:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f831 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377a:	d103      	bne.n	8003784 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e017      	b.n	80037b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003788:	897b      	ldrh	r3, [r7, #10]
 800378a:	11db      	asrs	r3, r3, #7
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 0306 	and.w	r3, r3, #6
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f063 030e 	orn	r3, r3, #14
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4907      	ldr	r1, [pc, #28]	; (80037c4 <I2C_MasterRequestRead+0x198>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f865 	bl	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	00010008 	.word	0x00010008
 80037c4:	00010002 	.word	0x00010002

080037c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d8:	e025      	b.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d021      	beq.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fe fe9d 	bl	8002520 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d116      	bne.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e023      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d10d      	bne.n	800384c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	e00c      	b.n	8003866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d0b6      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003884:	e051      	b.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003894:	d123      	bne.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e046      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d021      	beq.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe fe1b 	bl	8002520 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f043 0220 	orr.w	r2, r3, #32
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e020      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10c      	bne.n	800394e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e00b      	b.n	8003966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	43da      	mvns	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf14      	ite	ne
 8003960:	2301      	movne	r3, #1
 8003962:	2300      	moveq	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d18d      	bne.n	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003980:	e02d      	b.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f8ce 	bl	8003b24 <I2C_IsAcknowledgeFailed>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e02d      	b.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d021      	beq.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe fdc1 	bl	8002520 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e007      	b.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b80      	cmp	r3, #128	; 0x80
 80039ea:	d1ca      	bne.n	8003982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a02:	e02d      	b.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f88d 	bl	8003b24 <I2C_IsAcknowledgeFailed>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e02d      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d021      	beq.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7fe fd80 	bl	8002520 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e007      	b.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d1ca      	bne.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a84:	e042      	b.n	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d119      	bne.n	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0210 	mvn.w	r2, #16
 8003a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e029      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac8:	f7fe fd2a 	bl	8002520 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d302      	bcc.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d1b5      	bne.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d11b      	bne.n	8003b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0cc      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90c      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d044      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d119      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e067      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4934      	ldr	r1, [pc, #208]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fe fc54 	bl	8002520 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fe fc50 	bl	8002520 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e04f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d20c      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f855 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fbb4 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023c00 	.word	0x40023c00
 8003d40:	40023800 	.word	0x40023800
 8003d44:	08007fd0 	.word	0x08007fd0
 8003d48:	200000bc 	.word	0x200000bc
 8003d4c:	200000c0 	.word	0x200000c0

08003d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	200000bc 	.word	0x200000bc

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08007fe0 	.word	0x08007fe0

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d94:	f7ff ffdc 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0b5b      	lsrs	r3, r3, #13
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08007fe0 	.word	0x08007fe0

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b0ae      	sub	sp, #184	; 0xb8
 8003dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dde:	4bcb      	ldr	r3, [pc, #812]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	f200 8206 	bhi.w	80041f8 <HAL_RCC_GetSysClockFreq+0x440>
 8003dec:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df2:	bf00      	nop
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	080041f9 	.word	0x080041f9
 8003dfc:	080041f9 	.word	0x080041f9
 8003e00:	080041f9 	.word	0x080041f9
 8003e04:	08003e31 	.word	0x08003e31
 8003e08:	080041f9 	.word	0x080041f9
 8003e0c:	080041f9 	.word	0x080041f9
 8003e10:	080041f9 	.word	0x080041f9
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	080041f9 	.word	0x080041f9
 8003e1c:	080041f9 	.word	0x080041f9
 8003e20:	080041f9 	.word	0x080041f9
 8003e24:	08004029 	.word	0x08004029
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4bb9      	ldr	r3, [pc, #740]	; (8004110 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e2e:	e1e7      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e30:	4bb8      	ldr	r3, [pc, #736]	; (8004114 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e36:	e1e3      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e38:	4bb4      	ldr	r3, [pc, #720]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e44:	4bb1      	ldr	r3, [pc, #708]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d071      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e50:	4bae      	ldr	r3, [pc, #696]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e5c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f04f 0000 	mov.w	r0, #0
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	0159      	lsls	r1, r3, #5
 8003e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e88:	0150      	lsls	r0, r2, #5
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4621      	mov	r1, r4
 8003e90:	1a51      	subs	r1, r2, r1
 8003e92:	6439      	str	r1, [r7, #64]	; 0x40
 8003e94:	4629      	mov	r1, r5
 8003e96:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	018b      	lsls	r3, r1, #6
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	018a      	lsls	r2, r1, #6
 8003eb6:	4641      	mov	r1, r8
 8003eb8:	1a51      	subs	r1, r2, r1
 8003eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	00cb      	lsls	r3, r1, #3
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eda:	4641      	mov	r1, r8
 8003edc:	00ca      	lsls	r2, r1, #3
 8003ede:	4610      	mov	r0, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eea:	462b      	mov	r3, r5
 8003eec:	460a      	mov	r2, r1
 8003eee:	eb42 0303 	adc.w	r3, r2, r3
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f00:	4629      	mov	r1, r5
 8003f02:	024b      	lsls	r3, r1, #9
 8003f04:	4621      	mov	r1, r4
 8003f06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	024a      	lsls	r2, r1, #9
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f24:	f7fc fe70 	bl	8000c08 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f32:	e067      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f34:	4b75      	ldr	r3, [pc, #468]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f40:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f4e:	2300      	movs	r3, #0
 8003f50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	f04f 0000 	mov.w	r0, #0
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	0159      	lsls	r1, r3, #5
 8003f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f68:	0150      	lsls	r0, r2, #5
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4621      	mov	r1, r4
 8003f70:	1a51      	subs	r1, r2, r1
 8003f72:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb63 0301 	sbc.w	r3, r3, r1
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f88:	4649      	mov	r1, r9
 8003f8a:	018b      	lsls	r3, r1, #6
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f92:	4641      	mov	r1, r8
 8003f94:	018a      	lsls	r2, r1, #6
 8003f96:	4641      	mov	r1, r8
 8003f98:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb6:	4692      	mov	sl, r2
 8003fb8:	469b      	mov	fp, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb1a 0303 	adds.w	r3, sl, r3
 8003fc0:	623b      	str	r3, [r7, #32]
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	028b      	lsls	r3, r1, #10
 8003fda:	4621      	mov	r1, r4
 8003fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	028a      	lsls	r2, r1, #10
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fec:	2200      	movs	r2, #0
 8003fee:	673b      	str	r3, [r7, #112]	; 0x70
 8003ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ff2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ff6:	f7fc fe07 	bl	8000c08 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4613      	mov	r3, r2
 8004000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004004:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	3301      	adds	r3, #1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800401a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004026:	e0eb      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b38      	ldr	r3, [pc, #224]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d06b      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCC_GetSysClockFreq+0x354>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	2200      	movs	r2, #0
 8004048:	66bb      	str	r3, [r7, #104]	; 0x68
 800404a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800404c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	2300      	movs	r3, #0
 8004056:	667b      	str	r3, [r7, #100]	; 0x64
 8004058:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800405c:	4622      	mov	r2, r4
 800405e:	462b      	mov	r3, r5
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0159      	lsls	r1, r3, #5
 800406a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406e:	0150      	lsls	r0, r2, #5
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4621      	mov	r1, r4
 8004076:	1a51      	subs	r1, r2, r1
 8004078:	61b9      	str	r1, [r7, #24]
 800407a:	4629      	mov	r1, r5
 800407c:	eb63 0301 	sbc.w	r3, r3, r1
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800408e:	4659      	mov	r1, fp
 8004090:	018b      	lsls	r3, r1, #6
 8004092:	4651      	mov	r1, sl
 8004094:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004098:	4651      	mov	r1, sl
 800409a:	018a      	lsls	r2, r1, #6
 800409c:	4651      	mov	r1, sl
 800409e:	ebb2 0801 	subs.w	r8, r2, r1
 80040a2:	4659      	mov	r1, fp
 80040a4:	eb63 0901 	sbc.w	r9, r3, r1
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040bc:	4690      	mov	r8, r2
 80040be:	4699      	mov	r9, r3
 80040c0:	4623      	mov	r3, r4
 80040c2:	eb18 0303 	adds.w	r3, r8, r3
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	462b      	mov	r3, r5
 80040ca:	eb49 0303 	adc.w	r3, r9, r3
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80040dc:	4629      	mov	r1, r5
 80040de:	024b      	lsls	r3, r1, #9
 80040e0:	4621      	mov	r1, r4
 80040e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e6:	4621      	mov	r1, r4
 80040e8:	024a      	lsls	r2, r1, #9
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040f2:	2200      	movs	r2, #0
 80040f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80040f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040fc:	f7fc fd84 	bl	8000c08 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800410a:	e065      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x420>
 800410c:	40023800 	.word	0x40023800
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004118:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <HAL_RCC_GetSysClockFreq+0x458>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	2200      	movs	r2, #0
 8004120:	4618      	mov	r0, r3
 8004122:	4611      	mov	r1, r2
 8004124:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004128:	653b      	str	r3, [r7, #80]	; 0x50
 800412a:	2300      	movs	r3, #0
 800412c:	657b      	str	r3, [r7, #84]	; 0x54
 800412e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004132:	4642      	mov	r2, r8
 8004134:	464b      	mov	r3, r9
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4641      	mov	r1, r8
 800414c:	1a51      	subs	r1, r2, r1
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	4649      	mov	r1, r9
 8004152:	eb63 0301 	sbc.w	r3, r3, r1
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004164:	4659      	mov	r1, fp
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416e:	4651      	mov	r1, sl
 8004170:	018a      	lsls	r2, r1, #6
 8004172:	4651      	mov	r1, sl
 8004174:	1a54      	subs	r4, r2, r1
 8004176:	4659      	mov	r1, fp
 8004178:	eb63 0501 	sbc.w	r5, r3, r1
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	00eb      	lsls	r3, r5, #3
 8004186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	4614      	mov	r4, r2
 800418e:	461d      	mov	r5, r3
 8004190:	4643      	mov	r3, r8
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	464b      	mov	r3, r9
 8004198:	eb45 0303 	adc.w	r3, r5, r3
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041aa:	4629      	mov	r1, r5
 80041ac:	028b      	lsls	r3, r1, #10
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b4:	4621      	mov	r1, r4
 80041b6:	028a      	lsls	r2, r1, #10
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041c0:	2200      	movs	r2, #0
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041ca:	f7fc fd1d 	bl	8000c08 <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4613      	mov	r3, r2
 80041d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_RCC_GetSysClockFreq+0x458>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0f1b      	lsrs	r3, r3, #28
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80041e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041f6:	e003      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_GetSysClockFreq+0x45c>)
 80041fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004204:	4618      	mov	r0, r3
 8004206:	37b8      	adds	r7, #184	; 0xb8
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400

08004218 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e28d      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8083 	beq.w	800433e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004238:	4b94      	ldr	r3, [pc, #592]	; (800448c <HAL_RCC_OscConfig+0x274>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b04      	cmp	r3, #4
 8004242:	d019      	beq.n	8004278 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004244:	4b91      	ldr	r3, [pc, #580]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800424c:	2b08      	cmp	r3, #8
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004250:	4b8e      	ldr	r3, [pc, #568]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800425c:	d00c      	beq.n	8004278 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425e:	4b8b      	ldr	r3, [pc, #556]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d112      	bne.n	8004290 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426a:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_RCC_OscConfig+0x274>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b84      	ldr	r3, [pc, #528]	; (800448c <HAL_RCC_OscConfig+0x274>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05b      	beq.n	800433c <HAL_RCC_OscConfig+0x124>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d157      	bne.n	800433c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e25a      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x90>
 800429a:	4b7c      	ldr	r3, [pc, #496]	; (800448c <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7b      	ldr	r2, [pc, #492]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e01d      	b.n	80042e4 <HAL_RCC_OscConfig+0xcc>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0xb4>
 80042b2:	4b76      	ldr	r3, [pc, #472]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a75      	ldr	r2, [pc, #468]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b73      	ldr	r3, [pc, #460]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a72      	ldr	r2, [pc, #456]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0xcc>
 80042cc:	4b6f      	ldr	r3, [pc, #444]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a6e      	ldr	r2, [pc, #440]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	4b6c      	ldr	r3, [pc, #432]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6b      	ldr	r2, [pc, #428]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80042de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fe f918 	bl	8002520 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fe f914 	bl	8002520 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e21f      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b61      	ldr	r3, [pc, #388]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0xdc>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe f904 	bl	8002520 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe f900 	bl	8002520 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e20b      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	4b57      	ldr	r3, [pc, #348]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x104>
 800433a:	e000      	b.n	800433e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d06f      	beq.n	800442a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800434a:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_RCC_OscConfig+0x274>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b00      	cmp	r3, #0
 8004354:	d017      	beq.n	8004386 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004356:	4b4d      	ldr	r3, [pc, #308]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800435e:	2b08      	cmp	r3, #8
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004362:	4b4a      	ldr	r3, [pc, #296]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436e:	4b47      	ldr	r3, [pc, #284]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d11c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b44      	ldr	r3, [pc, #272]	; (800448c <HAL_RCC_OscConfig+0x274>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	4b41      	ldr	r3, [pc, #260]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_RCC_OscConfig+0x186>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e1d3      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b3b      	ldr	r3, [pc, #236]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4937      	ldr	r1, [pc, #220]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b2:	e03a      	b.n	800442a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043bc:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_RCC_OscConfig+0x278>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe f8ad 	bl	8002520 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe f8a9 	bl	8002520 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e1b4      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4925      	ldr	r1, [pc, #148]	; (800448c <HAL_RCC_OscConfig+0x274>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	e015      	b.n	800442a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCC_OscConfig+0x278>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe f88c 	bl	8002520 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440c:	f7fe f888 	bl	8002520 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e193      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d036      	beq.n	80044a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_RCC_OscConfig+0x27c>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe f86c 	bl	8002520 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444c:	f7fe f868 	bl	8002520 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e173      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_OscConfig+0x274>)
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x234>
 800446a:	e01b      	b.n	80044a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446c:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_OscConfig+0x27c>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fe f855 	bl	8002520 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004478:	e00e      	b.n	8004498 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447a:	f7fe f851 	bl	8002520 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d907      	bls.n	8004498 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e15c      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
 800448c:	40023800 	.word	0x40023800
 8004490:	42470000 	.word	0x42470000
 8004494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b8a      	ldr	r3, [pc, #552]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ea      	bne.n	800447a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8097 	beq.w	80045e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b83      	ldr	r3, [pc, #524]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a7e      	ldr	r2, [pc, #504]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b7c      	ldr	r3, [pc, #496]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <HAL_RCC_OscConfig+0x4b0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d118      	bne.n	8004520 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ee:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCC_OscConfig+0x4b0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a75      	ldr	r2, [pc, #468]	; (80046c8 <HAL_RCC_OscConfig+0x4b0>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fe f811 	bl	8002520 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fe f80d 	bl	8002520 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e118      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	4b6c      	ldr	r3, [pc, #432]	; (80046c8 <HAL_RCC_OscConfig+0x4b0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x31e>
 8004528:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a65      	ldr	r2, [pc, #404]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	e01c      	b.n	8004570 <HAL_RCC_OscConfig+0x358>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b05      	cmp	r3, #5
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x340>
 800453e:	4b61      	ldr	r3, [pc, #388]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a60      	ldr	r2, [pc, #384]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
 800454a:	4b5e      	ldr	r3, [pc, #376]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a5d      	ldr	r2, [pc, #372]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0x358>
 8004558:	4b5a      	ldr	r3, [pc, #360]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4a59      	ldr	r2, [pc, #356]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	4a56      	ldr	r2, [pc, #344]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800456a:	f023 0304 	bic.w	r3, r3, #4
 800456e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fd ffd2 	bl	8002520 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	e00a      	b.n	8004596 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fd ffce 	bl	8002520 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e0d7      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004596:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ee      	beq.n	8004580 <HAL_RCC_OscConfig+0x368>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a4:	f7fd ffbc 	bl	8002520 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fd ffb8 	bl	8002520 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0c1      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c2:	4b40      	ldr	r3, [pc, #256]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1ee      	bne.n	80045ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d4:	4b3b      	ldr	r3, [pc, #236]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80045da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80ad 	beq.w	8004744 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d060      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d145      	bne.n	800468a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_RCC_OscConfig+0x4b4>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fd ff8c 	bl	8002520 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fd ff88 	bl	8002520 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e093      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	041b      	lsls	r3, r3, #16
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	061b      	lsls	r3, r3, #24
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	071b      	lsls	r3, r3, #28
 8004656:	491b      	ldr	r1, [pc, #108]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_RCC_OscConfig+0x4b4>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fd ff5d 	bl	8002520 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466a:	f7fd ff59 	bl	8002520 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e064      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x452>
 8004688:	e05c      	b.n	8004744 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCC_OscConfig+0x4b4>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fd ff46 	bl	8002520 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004698:	f7fd ff42 	bl	8002520 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e04d      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x480>
 80046b6:	e045      	b.n	8004744 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e040      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000
 80046cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_RCC_OscConfig+0x538>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d030      	beq.n	8004740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d129      	bne.n	8004740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d122      	bne.n	8004740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004700:	4013      	ands	r3, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004708:	4293      	cmp	r3, r2
 800470a:	d119      	bne.n	8004740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	3b01      	subs	r3, #1
 800471a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d10f      	bne.n	8004740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800

08004754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e03f      	b.n	80047e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd fc6c 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f997 	bl	8004acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b08a      	sub	sp, #40	; 0x28
 80047f2:	af02      	add	r7, sp, #8
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d17c      	bne.n	8004908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_UART_Transmit+0x2c>
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e075      	b.n	800490a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_UART_Transmit+0x3e>
 8004828:	2302      	movs	r3, #2
 800482a:	e06e      	b.n	800490a <HAL_UART_Transmit+0x11c>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004842:	f7fd fe6d 	bl	8002520 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d108      	bne.n	8004870 <HAL_UART_Transmit+0x82>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e003      	b.n	8004878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004880:	e02a      	b.n	80048d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2200      	movs	r2, #0
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f870 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e036      	b.n	800490a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	3302      	adds	r3, #2
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e007      	b.n	80048ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cf      	bne.n	8004882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f840 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e006      	b.n	800490a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d11d      	bne.n	8004968 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Receive_IT+0x26>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e016      	b.n	800496a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Receive_IT+0x38>
 8004946:	2302      	movs	r3, #2
 8004948:	e00f      	b.n	800496a <HAL_UART_Receive_IT+0x58>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	461a      	mov	r2, r3
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f875 	bl	8004a4e <UART_Start_Receive_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	e000      	b.n	800496a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b090      	sub	sp, #64	; 0x40
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004982:	e050      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d04c      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800498c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004992:	f7fd fdc5 	bl	8002520 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499e:	429a      	cmp	r2, r3
 80049a0:	d241      	bcs.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049c2:	637a      	str	r2, [r7, #52]	; 0x34
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	613b      	str	r3, [r7, #16]
   return(result);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f6:	623a      	str	r2, [r7, #32]
 80049f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	69f9      	ldr	r1, [r7, #28]
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d09f      	beq.n	8004984 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3740      	adds	r7, #64	; 0x40
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2222      	movs	r2, #34	; 0x22
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0220 	orr.w	r2, r2, #32
 8004aba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b0c0      	sub	sp, #256	; 0x100
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	ea40 0301 	orr.w	r3, r0, r1
 8004af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b24:	f021 010c 	bic.w	r1, r1, #12
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b32:	430b      	orrs	r3, r1
 8004b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	6999      	ldr	r1, [r3, #24]
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	ea40 0301 	orr.w	r3, r0, r1
 8004b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b8f      	ldr	r3, [pc, #572]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d005      	beq.n	8004b6c <UART_SetConfig+0xa0>
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8d      	ldr	r3, [pc, #564]	; (8004d9c <UART_SetConfig+0x2d0>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d104      	bne.n	8004b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7ff f910 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8004b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b74:	e003      	b.n	8004b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b76:	f7ff f8f7 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8004b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b88:	f040 810c 	bne.w	8004da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bae:	4621      	mov	r1, r4
 8004bb0:	eb12 0801 	adds.w	r8, r2, r1
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	eb43 0901 	adc.w	r9, r3, r1
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bce:	4690      	mov	r8, r2
 8004bd0:	4699      	mov	r9, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	eb18 0303 	adds.w	r3, r8, r3
 8004bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bdc:	462b      	mov	r3, r5
 8004bde:	eb49 0303 	adc.w	r3, r9, r3
 8004be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	18db      	adds	r3, r3, r3
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	4613      	mov	r3, r2
 8004c02:	eb42 0303 	adc.w	r3, r2, r3
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
 8004c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c10:	f7fb fffa 	bl	8000c08 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c44:	4641      	mov	r1, r8
 8004c46:	eb12 0a01 	adds.w	sl, r2, r1
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c64:	4692      	mov	sl, r2
 8004c66:	469b      	mov	fp, r3
 8004c68:	4643      	mov	r3, r8
 8004c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c72:	464b      	mov	r3, r9
 8004c74:	eb4b 0303 	adc.w	r3, fp, r3
 8004c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c90:	460b      	mov	r3, r1
 8004c92:	18db      	adds	r3, r3, r3
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
 8004c96:	4613      	mov	r3, r2
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ca6:	f7fb ffaf 	bl	8000c08 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2264      	movs	r2, #100	; 0x64
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	1acb      	subs	r3, r1, r3
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cc6:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd4:	441c      	add	r4, r3
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	460a      	mov	r2, r1
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	18db      	adds	r3, r3, r3
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	4613      	mov	r3, r2
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d62:	f7fb ff51 	bl	8000c08 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	2164      	movs	r1, #100	; 0x64
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	3332      	adds	r3, #50	; 0x32
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	f003 0207 	and.w	r2, r3, #7
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4422      	add	r2, r4
 8004d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d94:	e106      	b.n	8004fa4 <UART_SetConfig+0x4d8>
 8004d96:	bf00      	nop
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	40011400 	.word	0x40011400
 8004da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004db6:	4642      	mov	r2, r8
 8004db8:	464b      	mov	r3, r9
 8004dba:	1891      	adds	r1, r2, r2
 8004dbc:	6239      	str	r1, [r7, #32]
 8004dbe:	415b      	adcs	r3, r3
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	1854      	adds	r4, r2, r1
 8004dca:	4649      	mov	r1, r9
 8004dcc:	eb43 0501 	adc.w	r5, r3, r1
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	00eb      	lsls	r3, r5, #3
 8004dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dde:	00e2      	lsls	r2, r4, #3
 8004de0:	4614      	mov	r4, r2
 8004de2:	461d      	mov	r5, r3
 8004de4:	4643      	mov	r3, r8
 8004de6:	18e3      	adds	r3, r4, r3
 8004de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dec:	464b      	mov	r3, r9
 8004dee:	eb45 0303 	adc.w	r3, r5, r3
 8004df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e12:	4629      	mov	r1, r5
 8004e14:	008b      	lsls	r3, r1, #2
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	008a      	lsls	r2, r1, #2
 8004e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e24:	f7fb fef0 	bl	8000c08 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	011c      	lsls	r4, r3, #4
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	61b9      	str	r1, [r7, #24]
 8004e50:	415b      	adcs	r3, r3
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e58:	4641      	mov	r1, r8
 8004e5a:	1851      	adds	r1, r2, r1
 8004e5c:	6139      	str	r1, [r7, #16]
 8004e5e:	4649      	mov	r1, r9
 8004e60:	414b      	adcs	r3, r1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e70:	4659      	mov	r1, fp
 8004e72:	00cb      	lsls	r3, r1, #3
 8004e74:	4651      	mov	r1, sl
 8004e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	00ca      	lsls	r2, r1, #3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	4642      	mov	r2, r8
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	460a      	mov	r2, r1
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	008b      	lsls	r3, r1, #2
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eba:	4641      	mov	r1, r8
 8004ebc:	008a      	lsls	r2, r1, #2
 8004ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ec2:	f7fb fea1 	bl	8000c08 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004ece:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2264      	movs	r2, #100	; 0x64
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	1acb      	subs	r3, r1, r3
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	3332      	adds	r3, #50	; 0x32
 8004ee0:	4a33      	ldr	r2, [pc, #204]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eec:	441c      	add	r4, r3
 8004eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ef8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	1891      	adds	r1, r2, r2
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	415b      	adcs	r3, r3
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	1851      	adds	r1, r2, r1
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	4649      	mov	r1, r9
 8004f14:	414b      	adcs	r3, r1
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f24:	4659      	mov	r1, fp
 8004f26:	00cb      	lsls	r3, r1, #3
 8004f28:	4651      	mov	r1, sl
 8004f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2e:	4651      	mov	r1, sl
 8004f30:	00ca      	lsls	r2, r1, #3
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	189b      	adds	r3, r3, r2
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3e:	464b      	mov	r3, r9
 8004f40:	460a      	mov	r2, r1
 8004f42:	eb42 0303 	adc.w	r3, r2, r3
 8004f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
 8004f52:	667a      	str	r2, [r7, #100]	; 0x64
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f60:	4649      	mov	r1, r9
 8004f62:	008b      	lsls	r3, r1, #2
 8004f64:	4641      	mov	r1, r8
 8004f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	008a      	lsls	r2, r1, #2
 8004f6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f72:	f7fb fe49 	bl	8000c08 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	2164      	movs	r1, #100	; 0x64
 8004f84:	fb01 f303 	mul.w	r3, r1, r3
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	3332      	adds	r3, #50	; 0x32
 8004f8e:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004f90:	fba2 2303 	umull	r2, r3, r2, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4422      	add	r2, r4
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004faa:	46bd      	mov	sp, r7
 8004fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb0:	51eb851f 	.word	0x51eb851f

08004fb4 <__cvt>:
 8004fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	ec55 4b10 	vmov	r4, r5, d0
 8004fbc:	2d00      	cmp	r5, #0
 8004fbe:	460e      	mov	r6, r1
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	462b      	mov	r3, r5
 8004fc4:	bfbb      	ittet	lt
 8004fc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004fca:	461d      	movlt	r5, r3
 8004fcc:	2300      	movge	r3, #0
 8004fce:	232d      	movlt	r3, #45	; 0x2d
 8004fd0:	700b      	strb	r3, [r1, #0]
 8004fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004fd8:	4691      	mov	r9, r2
 8004fda:	f023 0820 	bic.w	r8, r3, #32
 8004fde:	bfbc      	itt	lt
 8004fe0:	4622      	movlt	r2, r4
 8004fe2:	4614      	movlt	r4, r2
 8004fe4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fe8:	d005      	beq.n	8004ff6 <__cvt+0x42>
 8004fea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fee:	d100      	bne.n	8004ff2 <__cvt+0x3e>
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	2102      	movs	r1, #2
 8004ff4:	e000      	b.n	8004ff8 <__cvt+0x44>
 8004ff6:	2103      	movs	r1, #3
 8004ff8:	ab03      	add	r3, sp, #12
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	ab02      	add	r3, sp, #8
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	ec45 4b10 	vmov	d0, r4, r5
 8005004:	4653      	mov	r3, sl
 8005006:	4632      	mov	r2, r6
 8005008:	f000 fffa 	bl	8006000 <_dtoa_r>
 800500c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005010:	4607      	mov	r7, r0
 8005012:	d102      	bne.n	800501a <__cvt+0x66>
 8005014:	f019 0f01 	tst.w	r9, #1
 8005018:	d022      	beq.n	8005060 <__cvt+0xac>
 800501a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800501e:	eb07 0906 	add.w	r9, r7, r6
 8005022:	d110      	bne.n	8005046 <__cvt+0x92>
 8005024:	783b      	ldrb	r3, [r7, #0]
 8005026:	2b30      	cmp	r3, #48	; 0x30
 8005028:	d10a      	bne.n	8005040 <__cvt+0x8c>
 800502a:	2200      	movs	r2, #0
 800502c:	2300      	movs	r3, #0
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f7fb fd79 	bl	8000b28 <__aeabi_dcmpeq>
 8005036:	b918      	cbnz	r0, 8005040 <__cvt+0x8c>
 8005038:	f1c6 0601 	rsb	r6, r6, #1
 800503c:	f8ca 6000 	str.w	r6, [sl]
 8005040:	f8da 3000 	ldr.w	r3, [sl]
 8005044:	4499      	add	r9, r3
 8005046:	2200      	movs	r2, #0
 8005048:	2300      	movs	r3, #0
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	f7fb fd6b 	bl	8000b28 <__aeabi_dcmpeq>
 8005052:	b108      	cbz	r0, 8005058 <__cvt+0xa4>
 8005054:	f8cd 900c 	str.w	r9, [sp, #12]
 8005058:	2230      	movs	r2, #48	; 0x30
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	454b      	cmp	r3, r9
 800505e:	d307      	bcc.n	8005070 <__cvt+0xbc>
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005064:	1bdb      	subs	r3, r3, r7
 8005066:	4638      	mov	r0, r7
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	b004      	add	sp, #16
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	1c59      	adds	r1, r3, #1
 8005072:	9103      	str	r1, [sp, #12]
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e7f0      	b.n	800505a <__cvt+0xa6>

08005078 <__exponent>:
 8005078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507a:	4603      	mov	r3, r0
 800507c:	2900      	cmp	r1, #0
 800507e:	bfb8      	it	lt
 8005080:	4249      	neglt	r1, r1
 8005082:	f803 2b02 	strb.w	r2, [r3], #2
 8005086:	bfb4      	ite	lt
 8005088:	222d      	movlt	r2, #45	; 0x2d
 800508a:	222b      	movge	r2, #43	; 0x2b
 800508c:	2909      	cmp	r1, #9
 800508e:	7042      	strb	r2, [r0, #1]
 8005090:	dd2a      	ble.n	80050e8 <__exponent+0x70>
 8005092:	f10d 0207 	add.w	r2, sp, #7
 8005096:	4617      	mov	r7, r2
 8005098:	260a      	movs	r6, #10
 800509a:	4694      	mov	ip, r2
 800509c:	fb91 f5f6 	sdiv	r5, r1, r6
 80050a0:	fb06 1415 	mls	r4, r6, r5, r1
 80050a4:	3430      	adds	r4, #48	; 0x30
 80050a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050aa:	460c      	mov	r4, r1
 80050ac:	2c63      	cmp	r4, #99	; 0x63
 80050ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80050b2:	4629      	mov	r1, r5
 80050b4:	dcf1      	bgt.n	800509a <__exponent+0x22>
 80050b6:	3130      	adds	r1, #48	; 0x30
 80050b8:	f1ac 0402 	sub.w	r4, ip, #2
 80050bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050c0:	1c41      	adds	r1, r0, #1
 80050c2:	4622      	mov	r2, r4
 80050c4:	42ba      	cmp	r2, r7
 80050c6:	d30a      	bcc.n	80050de <__exponent+0x66>
 80050c8:	f10d 0209 	add.w	r2, sp, #9
 80050cc:	eba2 020c 	sub.w	r2, r2, ip
 80050d0:	42bc      	cmp	r4, r7
 80050d2:	bf88      	it	hi
 80050d4:	2200      	movhi	r2, #0
 80050d6:	4413      	add	r3, r2
 80050d8:	1a18      	subs	r0, r3, r0
 80050da:	b003      	add	sp, #12
 80050dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050e6:	e7ed      	b.n	80050c4 <__exponent+0x4c>
 80050e8:	2330      	movs	r3, #48	; 0x30
 80050ea:	3130      	adds	r1, #48	; 0x30
 80050ec:	7083      	strb	r3, [r0, #2]
 80050ee:	70c1      	strb	r1, [r0, #3]
 80050f0:	1d03      	adds	r3, r0, #4
 80050f2:	e7f1      	b.n	80050d8 <__exponent+0x60>

080050f4 <_printf_float>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	ed2d 8b02 	vpush	{d8}
 80050fc:	b08d      	sub	sp, #52	; 0x34
 80050fe:	460c      	mov	r4, r1
 8005100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005104:	4616      	mov	r6, r2
 8005106:	461f      	mov	r7, r3
 8005108:	4605      	mov	r5, r0
 800510a:	f000 fe59 	bl	8005dc0 <_localeconv_r>
 800510e:	f8d0 a000 	ldr.w	sl, [r0]
 8005112:	4650      	mov	r0, sl
 8005114:	f7fb f8dc 	bl	80002d0 <strlen>
 8005118:	2300      	movs	r3, #0
 800511a:	930a      	str	r3, [sp, #40]	; 0x28
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	9305      	str	r3, [sp, #20]
 8005120:	f8d8 3000 	ldr.w	r3, [r8]
 8005124:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005128:	3307      	adds	r3, #7
 800512a:	f023 0307 	bic.w	r3, r3, #7
 800512e:	f103 0208 	add.w	r2, r3, #8
 8005132:	f8c8 2000 	str.w	r2, [r8]
 8005136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800513a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800513e:	9307      	str	r3, [sp, #28]
 8005140:	f8cd 8018 	str.w	r8, [sp, #24]
 8005144:	ee08 0a10 	vmov	s16, r0
 8005148:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800514c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005150:	4b9e      	ldr	r3, [pc, #632]	; (80053cc <_printf_float+0x2d8>)
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	f7fb fd19 	bl	8000b8c <__aeabi_dcmpun>
 800515a:	bb88      	cbnz	r0, 80051c0 <_printf_float+0xcc>
 800515c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005160:	4b9a      	ldr	r3, [pc, #616]	; (80053cc <_printf_float+0x2d8>)
 8005162:	f04f 32ff 	mov.w	r2, #4294967295
 8005166:	f7fb fcf3 	bl	8000b50 <__aeabi_dcmple>
 800516a:	bb48      	cbnz	r0, 80051c0 <_printf_float+0xcc>
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fb fce2 	bl	8000b3c <__aeabi_dcmplt>
 8005178:	b110      	cbz	r0, 8005180 <_printf_float+0x8c>
 800517a:	232d      	movs	r3, #45	; 0x2d
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005180:	4a93      	ldr	r2, [pc, #588]	; (80053d0 <_printf_float+0x2dc>)
 8005182:	4b94      	ldr	r3, [pc, #592]	; (80053d4 <_printf_float+0x2e0>)
 8005184:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005188:	bf94      	ite	ls
 800518a:	4690      	movls	r8, r2
 800518c:	4698      	movhi	r8, r3
 800518e:	2303      	movs	r3, #3
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	9b05      	ldr	r3, [sp, #20]
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	f04f 0900 	mov.w	r9, #0
 800519e:	9700      	str	r7, [sp, #0]
 80051a0:	4633      	mov	r3, r6
 80051a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80051a4:	4621      	mov	r1, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f9da 	bl	8005560 <_printf_common>
 80051ac:	3001      	adds	r0, #1
 80051ae:	f040 8090 	bne.w	80052d2 <_printf_float+0x1de>
 80051b2:	f04f 30ff 	mov.w	r0, #4294967295
 80051b6:	b00d      	add	sp, #52	; 0x34
 80051b8:	ecbd 8b02 	vpop	{d8}
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c0:	4642      	mov	r2, r8
 80051c2:	464b      	mov	r3, r9
 80051c4:	4640      	mov	r0, r8
 80051c6:	4649      	mov	r1, r9
 80051c8:	f7fb fce0 	bl	8000b8c <__aeabi_dcmpun>
 80051cc:	b140      	cbz	r0, 80051e0 <_printf_float+0xec>
 80051ce:	464b      	mov	r3, r9
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bfbc      	itt	lt
 80051d4:	232d      	movlt	r3, #45	; 0x2d
 80051d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051da:	4a7f      	ldr	r2, [pc, #508]	; (80053d8 <_printf_float+0x2e4>)
 80051dc:	4b7f      	ldr	r3, [pc, #508]	; (80053dc <_printf_float+0x2e8>)
 80051de:	e7d1      	b.n	8005184 <_printf_float+0x90>
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051e6:	9206      	str	r2, [sp, #24]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	d13f      	bne.n	800526c <_printf_float+0x178>
 80051ec:	2306      	movs	r3, #6
 80051ee:	6063      	str	r3, [r4, #4]
 80051f0:	9b05      	ldr	r3, [sp, #20]
 80051f2:	6861      	ldr	r1, [r4, #4]
 80051f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051f8:	2300      	movs	r3, #0
 80051fa:	9303      	str	r3, [sp, #12]
 80051fc:	ab0a      	add	r3, sp, #40	; 0x28
 80051fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005202:	ab09      	add	r3, sp, #36	; 0x24
 8005204:	ec49 8b10 	vmov	d0, r8, r9
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	6022      	str	r2, [r4, #0]
 800520c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005210:	4628      	mov	r0, r5
 8005212:	f7ff fecf 	bl	8004fb4 <__cvt>
 8005216:	9b06      	ldr	r3, [sp, #24]
 8005218:	9909      	ldr	r1, [sp, #36]	; 0x24
 800521a:	2b47      	cmp	r3, #71	; 0x47
 800521c:	4680      	mov	r8, r0
 800521e:	d108      	bne.n	8005232 <_printf_float+0x13e>
 8005220:	1cc8      	adds	r0, r1, #3
 8005222:	db02      	blt.n	800522a <_printf_float+0x136>
 8005224:	6863      	ldr	r3, [r4, #4]
 8005226:	4299      	cmp	r1, r3
 8005228:	dd41      	ble.n	80052ae <_printf_float+0x1ba>
 800522a:	f1ab 0302 	sub.w	r3, fp, #2
 800522e:	fa5f fb83 	uxtb.w	fp, r3
 8005232:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005236:	d820      	bhi.n	800527a <_printf_float+0x186>
 8005238:	3901      	subs	r1, #1
 800523a:	465a      	mov	r2, fp
 800523c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005240:	9109      	str	r1, [sp, #36]	; 0x24
 8005242:	f7ff ff19 	bl	8005078 <__exponent>
 8005246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005248:	1813      	adds	r3, r2, r0
 800524a:	2a01      	cmp	r2, #1
 800524c:	4681      	mov	r9, r0
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	dc02      	bgt.n	8005258 <_printf_float+0x164>
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	07d2      	lsls	r2, r2, #31
 8005256:	d501      	bpl.n	800525c <_printf_float+0x168>
 8005258:	3301      	adds	r3, #1
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005260:	2b00      	cmp	r3, #0
 8005262:	d09c      	beq.n	800519e <_printf_float+0xaa>
 8005264:	232d      	movs	r3, #45	; 0x2d
 8005266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800526a:	e798      	b.n	800519e <_printf_float+0xaa>
 800526c:	9a06      	ldr	r2, [sp, #24]
 800526e:	2a47      	cmp	r2, #71	; 0x47
 8005270:	d1be      	bne.n	80051f0 <_printf_float+0xfc>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1bc      	bne.n	80051f0 <_printf_float+0xfc>
 8005276:	2301      	movs	r3, #1
 8005278:	e7b9      	b.n	80051ee <_printf_float+0xfa>
 800527a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800527e:	d118      	bne.n	80052b2 <_printf_float+0x1be>
 8005280:	2900      	cmp	r1, #0
 8005282:	6863      	ldr	r3, [r4, #4]
 8005284:	dd0b      	ble.n	800529e <_printf_float+0x1aa>
 8005286:	6121      	str	r1, [r4, #16]
 8005288:	b913      	cbnz	r3, 8005290 <_printf_float+0x19c>
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	07d0      	lsls	r0, r2, #31
 800528e:	d502      	bpl.n	8005296 <_printf_float+0x1a2>
 8005290:	3301      	adds	r3, #1
 8005292:	440b      	add	r3, r1
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	65a1      	str	r1, [r4, #88]	; 0x58
 8005298:	f04f 0900 	mov.w	r9, #0
 800529c:	e7de      	b.n	800525c <_printf_float+0x168>
 800529e:	b913      	cbnz	r3, 80052a6 <_printf_float+0x1b2>
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	07d2      	lsls	r2, r2, #31
 80052a4:	d501      	bpl.n	80052aa <_printf_float+0x1b6>
 80052a6:	3302      	adds	r3, #2
 80052a8:	e7f4      	b.n	8005294 <_printf_float+0x1a0>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e7f2      	b.n	8005294 <_printf_float+0x1a0>
 80052ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052b4:	4299      	cmp	r1, r3
 80052b6:	db05      	blt.n	80052c4 <_printf_float+0x1d0>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	6121      	str	r1, [r4, #16]
 80052bc:	07d8      	lsls	r0, r3, #31
 80052be:	d5ea      	bpl.n	8005296 <_printf_float+0x1a2>
 80052c0:	1c4b      	adds	r3, r1, #1
 80052c2:	e7e7      	b.n	8005294 <_printf_float+0x1a0>
 80052c4:	2900      	cmp	r1, #0
 80052c6:	bfd4      	ite	le
 80052c8:	f1c1 0202 	rsble	r2, r1, #2
 80052cc:	2201      	movgt	r2, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	e7e0      	b.n	8005294 <_printf_float+0x1a0>
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	055a      	lsls	r2, r3, #21
 80052d6:	d407      	bmi.n	80052e8 <_printf_float+0x1f4>
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	4642      	mov	r2, r8
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	d12c      	bne.n	8005340 <_printf_float+0x24c>
 80052e6:	e764      	b.n	80051b2 <_printf_float+0xbe>
 80052e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052ec:	f240 80e0 	bls.w	80054b0 <_printf_float+0x3bc>
 80052f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052f4:	2200      	movs	r2, #0
 80052f6:	2300      	movs	r3, #0
 80052f8:	f7fb fc16 	bl	8000b28 <__aeabi_dcmpeq>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d034      	beq.n	800536a <_printf_float+0x276>
 8005300:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <_printf_float+0x2ec>)
 8005302:	2301      	movs	r3, #1
 8005304:	4631      	mov	r1, r6
 8005306:	4628      	mov	r0, r5
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f af51 	beq.w	80051b2 <_printf_float+0xbe>
 8005310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005314:	429a      	cmp	r2, r3
 8005316:	db02      	blt.n	800531e <_printf_float+0x22a>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	07d8      	lsls	r0, r3, #31
 800531c:	d510      	bpl.n	8005340 <_printf_float+0x24c>
 800531e:	ee18 3a10 	vmov	r3, s16
 8005322:	4652      	mov	r2, sl
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	f43f af41 	beq.w	80051b2 <_printf_float+0xbe>
 8005330:	f04f 0800 	mov.w	r8, #0
 8005334:	f104 091a 	add.w	r9, r4, #26
 8005338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	4543      	cmp	r3, r8
 800533e:	dc09      	bgt.n	8005354 <_printf_float+0x260>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	079b      	lsls	r3, r3, #30
 8005344:	f100 8107 	bmi.w	8005556 <_printf_float+0x462>
 8005348:	68e0      	ldr	r0, [r4, #12]
 800534a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800534c:	4298      	cmp	r0, r3
 800534e:	bfb8      	it	lt
 8005350:	4618      	movlt	r0, r3
 8005352:	e730      	b.n	80051b6 <_printf_float+0xc2>
 8005354:	2301      	movs	r3, #1
 8005356:	464a      	mov	r2, r9
 8005358:	4631      	mov	r1, r6
 800535a:	4628      	mov	r0, r5
 800535c:	47b8      	blx	r7
 800535e:	3001      	adds	r0, #1
 8005360:	f43f af27 	beq.w	80051b2 <_printf_float+0xbe>
 8005364:	f108 0801 	add.w	r8, r8, #1
 8005368:	e7e6      	b.n	8005338 <_printf_float+0x244>
 800536a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	dc39      	bgt.n	80053e4 <_printf_float+0x2f0>
 8005370:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <_printf_float+0x2ec>)
 8005372:	2301      	movs	r3, #1
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f af19 	beq.w	80051b2 <_printf_float+0xbe>
 8005380:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005384:	4313      	orrs	r3, r2
 8005386:	d102      	bne.n	800538e <_printf_float+0x29a>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	07d9      	lsls	r1, r3, #31
 800538c:	d5d8      	bpl.n	8005340 <_printf_float+0x24c>
 800538e:	ee18 3a10 	vmov	r3, s16
 8005392:	4652      	mov	r2, sl
 8005394:	4631      	mov	r1, r6
 8005396:	4628      	mov	r0, r5
 8005398:	47b8      	blx	r7
 800539a:	3001      	adds	r0, #1
 800539c:	f43f af09 	beq.w	80051b2 <_printf_float+0xbe>
 80053a0:	f04f 0900 	mov.w	r9, #0
 80053a4:	f104 0a1a 	add.w	sl, r4, #26
 80053a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053aa:	425b      	negs	r3, r3
 80053ac:	454b      	cmp	r3, r9
 80053ae:	dc01      	bgt.n	80053b4 <_printf_float+0x2c0>
 80053b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b2:	e792      	b.n	80052da <_printf_float+0x1e6>
 80053b4:	2301      	movs	r3, #1
 80053b6:	4652      	mov	r2, sl
 80053b8:	4631      	mov	r1, r6
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b8      	blx	r7
 80053be:	3001      	adds	r0, #1
 80053c0:	f43f aef7 	beq.w	80051b2 <_printf_float+0xbe>
 80053c4:	f109 0901 	add.w	r9, r9, #1
 80053c8:	e7ee      	b.n	80053a8 <_printf_float+0x2b4>
 80053ca:	bf00      	nop
 80053cc:	7fefffff 	.word	0x7fefffff
 80053d0:	08007fe8 	.word	0x08007fe8
 80053d4:	08007fec 	.word	0x08007fec
 80053d8:	08007ff0 	.word	0x08007ff0
 80053dc:	08007ff4 	.word	0x08007ff4
 80053e0:	08007ff8 	.word	0x08007ff8
 80053e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053e8:	429a      	cmp	r2, r3
 80053ea:	bfa8      	it	ge
 80053ec:	461a      	movge	r2, r3
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	4691      	mov	r9, r2
 80053f2:	dc37      	bgt.n	8005464 <_printf_float+0x370>
 80053f4:	f04f 0b00 	mov.w	fp, #0
 80053f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053fc:	f104 021a 	add.w	r2, r4, #26
 8005400:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	eba3 0309 	sub.w	r3, r3, r9
 8005408:	455b      	cmp	r3, fp
 800540a:	dc33      	bgt.n	8005474 <_printf_float+0x380>
 800540c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005410:	429a      	cmp	r2, r3
 8005412:	db3b      	blt.n	800548c <_printf_float+0x398>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	07da      	lsls	r2, r3, #31
 8005418:	d438      	bmi.n	800548c <_printf_float+0x398>
 800541a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800541e:	eba2 0903 	sub.w	r9, r2, r3
 8005422:	9b05      	ldr	r3, [sp, #20]
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	4591      	cmp	r9, r2
 8005428:	bfa8      	it	ge
 800542a:	4691      	movge	r9, r2
 800542c:	f1b9 0f00 	cmp.w	r9, #0
 8005430:	dc35      	bgt.n	800549e <_printf_float+0x3aa>
 8005432:	f04f 0800 	mov.w	r8, #0
 8005436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800543a:	f104 0a1a 	add.w	sl, r4, #26
 800543e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	eba3 0309 	sub.w	r3, r3, r9
 8005448:	4543      	cmp	r3, r8
 800544a:	f77f af79 	ble.w	8005340 <_printf_float+0x24c>
 800544e:	2301      	movs	r3, #1
 8005450:	4652      	mov	r2, sl
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f aeaa 	beq.w	80051b2 <_printf_float+0xbe>
 800545e:	f108 0801 	add.w	r8, r8, #1
 8005462:	e7ec      	b.n	800543e <_printf_float+0x34a>
 8005464:	4613      	mov	r3, r2
 8005466:	4631      	mov	r1, r6
 8005468:	4642      	mov	r2, r8
 800546a:	4628      	mov	r0, r5
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	d1c0      	bne.n	80053f4 <_printf_float+0x300>
 8005472:	e69e      	b.n	80051b2 <_printf_float+0xbe>
 8005474:	2301      	movs	r3, #1
 8005476:	4631      	mov	r1, r6
 8005478:	4628      	mov	r0, r5
 800547a:	9205      	str	r2, [sp, #20]
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f ae97 	beq.w	80051b2 <_printf_float+0xbe>
 8005484:	9a05      	ldr	r2, [sp, #20]
 8005486:	f10b 0b01 	add.w	fp, fp, #1
 800548a:	e7b9      	b.n	8005400 <_printf_float+0x30c>
 800548c:	ee18 3a10 	vmov	r3, s16
 8005490:	4652      	mov	r2, sl
 8005492:	4631      	mov	r1, r6
 8005494:	4628      	mov	r0, r5
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	d1be      	bne.n	800541a <_printf_float+0x326>
 800549c:	e689      	b.n	80051b2 <_printf_float+0xbe>
 800549e:	9a05      	ldr	r2, [sp, #20]
 80054a0:	464b      	mov	r3, r9
 80054a2:	4442      	add	r2, r8
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	d1c1      	bne.n	8005432 <_printf_float+0x33e>
 80054ae:	e680      	b.n	80051b2 <_printf_float+0xbe>
 80054b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b2:	2a01      	cmp	r2, #1
 80054b4:	dc01      	bgt.n	80054ba <_printf_float+0x3c6>
 80054b6:	07db      	lsls	r3, r3, #31
 80054b8:	d53a      	bpl.n	8005530 <_printf_float+0x43c>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4642      	mov	r2, r8
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae74 	beq.w	80051b2 <_printf_float+0xbe>
 80054ca:	ee18 3a10 	vmov	r3, s16
 80054ce:	4652      	mov	r2, sl
 80054d0:	4631      	mov	r1, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b8      	blx	r7
 80054d6:	3001      	adds	r0, #1
 80054d8:	f43f ae6b 	beq.w	80051b2 <_printf_float+0xbe>
 80054dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054e0:	2200      	movs	r2, #0
 80054e2:	2300      	movs	r3, #0
 80054e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80054e8:	f7fb fb1e 	bl	8000b28 <__aeabi_dcmpeq>
 80054ec:	b9d8      	cbnz	r0, 8005526 <_printf_float+0x432>
 80054ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054f2:	f108 0201 	add.w	r2, r8, #1
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	d10e      	bne.n	800551e <_printf_float+0x42a>
 8005500:	e657      	b.n	80051b2 <_printf_float+0xbe>
 8005502:	2301      	movs	r3, #1
 8005504:	4652      	mov	r2, sl
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae50 	beq.w	80051b2 <_printf_float+0xbe>
 8005512:	f108 0801 	add.w	r8, r8, #1
 8005516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005518:	3b01      	subs	r3, #1
 800551a:	4543      	cmp	r3, r8
 800551c:	dcf1      	bgt.n	8005502 <_printf_float+0x40e>
 800551e:	464b      	mov	r3, r9
 8005520:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005524:	e6da      	b.n	80052dc <_printf_float+0x1e8>
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	f104 0a1a 	add.w	sl, r4, #26
 800552e:	e7f2      	b.n	8005516 <_printf_float+0x422>
 8005530:	2301      	movs	r3, #1
 8005532:	4642      	mov	r2, r8
 8005534:	e7df      	b.n	80054f6 <_printf_float+0x402>
 8005536:	2301      	movs	r3, #1
 8005538:	464a      	mov	r2, r9
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f ae36 	beq.w	80051b2 <_printf_float+0xbe>
 8005546:	f108 0801 	add.w	r8, r8, #1
 800554a:	68e3      	ldr	r3, [r4, #12]
 800554c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800554e:	1a5b      	subs	r3, r3, r1
 8005550:	4543      	cmp	r3, r8
 8005552:	dcf0      	bgt.n	8005536 <_printf_float+0x442>
 8005554:	e6f8      	b.n	8005348 <_printf_float+0x254>
 8005556:	f04f 0800 	mov.w	r8, #0
 800555a:	f104 0919 	add.w	r9, r4, #25
 800555e:	e7f4      	b.n	800554a <_printf_float+0x456>

08005560 <_printf_common>:
 8005560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	4616      	mov	r6, r2
 8005566:	4699      	mov	r9, r3
 8005568:	688a      	ldr	r2, [r1, #8]
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005570:	4293      	cmp	r3, r2
 8005572:	bfb8      	it	lt
 8005574:	4613      	movlt	r3, r2
 8005576:	6033      	str	r3, [r6, #0]
 8005578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800557c:	4607      	mov	r7, r0
 800557e:	460c      	mov	r4, r1
 8005580:	b10a      	cbz	r2, 8005586 <_printf_common+0x26>
 8005582:	3301      	adds	r3, #1
 8005584:	6033      	str	r3, [r6, #0]
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	0699      	lsls	r1, r3, #26
 800558a:	bf42      	ittt	mi
 800558c:	6833      	ldrmi	r3, [r6, #0]
 800558e:	3302      	addmi	r3, #2
 8005590:	6033      	strmi	r3, [r6, #0]
 8005592:	6825      	ldr	r5, [r4, #0]
 8005594:	f015 0506 	ands.w	r5, r5, #6
 8005598:	d106      	bne.n	80055a8 <_printf_common+0x48>
 800559a:	f104 0a19 	add.w	sl, r4, #25
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	6832      	ldr	r2, [r6, #0]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dc26      	bgt.n	80055f6 <_printf_common+0x96>
 80055a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ac:	1e13      	subs	r3, r2, #0
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	bf18      	it	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	0692      	lsls	r2, r2, #26
 80055b6:	d42b      	bmi.n	8005610 <_printf_common+0xb0>
 80055b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055bc:	4649      	mov	r1, r9
 80055be:	4638      	mov	r0, r7
 80055c0:	47c0      	blx	r8
 80055c2:	3001      	adds	r0, #1
 80055c4:	d01e      	beq.n	8005604 <_printf_common+0xa4>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	6922      	ldr	r2, [r4, #16]
 80055ca:	f003 0306 	and.w	r3, r3, #6
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	bf02      	ittt	eq
 80055d2:	68e5      	ldreq	r5, [r4, #12]
 80055d4:	6833      	ldreq	r3, [r6, #0]
 80055d6:	1aed      	subeq	r5, r5, r3
 80055d8:	68a3      	ldr	r3, [r4, #8]
 80055da:	bf0c      	ite	eq
 80055dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e0:	2500      	movne	r5, #0
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bfc4      	itt	gt
 80055e6:	1a9b      	subgt	r3, r3, r2
 80055e8:	18ed      	addgt	r5, r5, r3
 80055ea:	2600      	movs	r6, #0
 80055ec:	341a      	adds	r4, #26
 80055ee:	42b5      	cmp	r5, r6
 80055f0:	d11a      	bne.n	8005628 <_printf_common+0xc8>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e008      	b.n	8005608 <_printf_common+0xa8>
 80055f6:	2301      	movs	r3, #1
 80055f8:	4652      	mov	r2, sl
 80055fa:	4649      	mov	r1, r9
 80055fc:	4638      	mov	r0, r7
 80055fe:	47c0      	blx	r8
 8005600:	3001      	adds	r0, #1
 8005602:	d103      	bne.n	800560c <_printf_common+0xac>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560c:	3501      	adds	r5, #1
 800560e:	e7c6      	b.n	800559e <_printf_common+0x3e>
 8005610:	18e1      	adds	r1, r4, r3
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	2030      	movs	r0, #48	; 0x30
 8005616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800561a:	4422      	add	r2, r4
 800561c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005624:	3302      	adds	r3, #2
 8005626:	e7c7      	b.n	80055b8 <_printf_common+0x58>
 8005628:	2301      	movs	r3, #1
 800562a:	4622      	mov	r2, r4
 800562c:	4649      	mov	r1, r9
 800562e:	4638      	mov	r0, r7
 8005630:	47c0      	blx	r8
 8005632:	3001      	adds	r0, #1
 8005634:	d0e6      	beq.n	8005604 <_printf_common+0xa4>
 8005636:	3601      	adds	r6, #1
 8005638:	e7d9      	b.n	80055ee <_printf_common+0x8e>
	...

0800563c <_printf_i>:
 800563c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	7e0f      	ldrb	r7, [r1, #24]
 8005642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005644:	2f78      	cmp	r7, #120	; 0x78
 8005646:	4691      	mov	r9, r2
 8005648:	4680      	mov	r8, r0
 800564a:	460c      	mov	r4, r1
 800564c:	469a      	mov	sl, r3
 800564e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005652:	d807      	bhi.n	8005664 <_printf_i+0x28>
 8005654:	2f62      	cmp	r7, #98	; 0x62
 8005656:	d80a      	bhi.n	800566e <_printf_i+0x32>
 8005658:	2f00      	cmp	r7, #0
 800565a:	f000 80d4 	beq.w	8005806 <_printf_i+0x1ca>
 800565e:	2f58      	cmp	r7, #88	; 0x58
 8005660:	f000 80c0 	beq.w	80057e4 <_printf_i+0x1a8>
 8005664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800566c:	e03a      	b.n	80056e4 <_printf_i+0xa8>
 800566e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005672:	2b15      	cmp	r3, #21
 8005674:	d8f6      	bhi.n	8005664 <_printf_i+0x28>
 8005676:	a101      	add	r1, pc, #4	; (adr r1, 800567c <_printf_i+0x40>)
 8005678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800567c:	080056d5 	.word	0x080056d5
 8005680:	080056e9 	.word	0x080056e9
 8005684:	08005665 	.word	0x08005665
 8005688:	08005665 	.word	0x08005665
 800568c:	08005665 	.word	0x08005665
 8005690:	08005665 	.word	0x08005665
 8005694:	080056e9 	.word	0x080056e9
 8005698:	08005665 	.word	0x08005665
 800569c:	08005665 	.word	0x08005665
 80056a0:	08005665 	.word	0x08005665
 80056a4:	08005665 	.word	0x08005665
 80056a8:	080057ed 	.word	0x080057ed
 80056ac:	08005715 	.word	0x08005715
 80056b0:	080057a7 	.word	0x080057a7
 80056b4:	08005665 	.word	0x08005665
 80056b8:	08005665 	.word	0x08005665
 80056bc:	0800580f 	.word	0x0800580f
 80056c0:	08005665 	.word	0x08005665
 80056c4:	08005715 	.word	0x08005715
 80056c8:	08005665 	.word	0x08005665
 80056cc:	08005665 	.word	0x08005665
 80056d0:	080057af 	.word	0x080057af
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	602a      	str	r2, [r5, #0]
 80056dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e4:	2301      	movs	r3, #1
 80056e6:	e09f      	b.n	8005828 <_printf_i+0x1ec>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	0607      	lsls	r7, r0, #24
 80056ee:	f103 0104 	add.w	r1, r3, #4
 80056f2:	6029      	str	r1, [r5, #0]
 80056f4:	d501      	bpl.n	80056fa <_printf_i+0xbe>
 80056f6:	681e      	ldr	r6, [r3, #0]
 80056f8:	e003      	b.n	8005702 <_printf_i+0xc6>
 80056fa:	0646      	lsls	r6, r0, #25
 80056fc:	d5fb      	bpl.n	80056f6 <_printf_i+0xba>
 80056fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005702:	2e00      	cmp	r6, #0
 8005704:	da03      	bge.n	800570e <_printf_i+0xd2>
 8005706:	232d      	movs	r3, #45	; 0x2d
 8005708:	4276      	negs	r6, r6
 800570a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570e:	485a      	ldr	r0, [pc, #360]	; (8005878 <_printf_i+0x23c>)
 8005710:	230a      	movs	r3, #10
 8005712:	e012      	b.n	800573a <_printf_i+0xfe>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	6820      	ldr	r0, [r4, #0]
 8005718:	1d19      	adds	r1, r3, #4
 800571a:	6029      	str	r1, [r5, #0]
 800571c:	0605      	lsls	r5, r0, #24
 800571e:	d501      	bpl.n	8005724 <_printf_i+0xe8>
 8005720:	681e      	ldr	r6, [r3, #0]
 8005722:	e002      	b.n	800572a <_printf_i+0xee>
 8005724:	0641      	lsls	r1, r0, #25
 8005726:	d5fb      	bpl.n	8005720 <_printf_i+0xe4>
 8005728:	881e      	ldrh	r6, [r3, #0]
 800572a:	4853      	ldr	r0, [pc, #332]	; (8005878 <_printf_i+0x23c>)
 800572c:	2f6f      	cmp	r7, #111	; 0x6f
 800572e:	bf0c      	ite	eq
 8005730:	2308      	moveq	r3, #8
 8005732:	230a      	movne	r3, #10
 8005734:	2100      	movs	r1, #0
 8005736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800573a:	6865      	ldr	r5, [r4, #4]
 800573c:	60a5      	str	r5, [r4, #8]
 800573e:	2d00      	cmp	r5, #0
 8005740:	bfa2      	ittt	ge
 8005742:	6821      	ldrge	r1, [r4, #0]
 8005744:	f021 0104 	bicge.w	r1, r1, #4
 8005748:	6021      	strge	r1, [r4, #0]
 800574a:	b90e      	cbnz	r6, 8005750 <_printf_i+0x114>
 800574c:	2d00      	cmp	r5, #0
 800574e:	d04b      	beq.n	80057e8 <_printf_i+0x1ac>
 8005750:	4615      	mov	r5, r2
 8005752:	fbb6 f1f3 	udiv	r1, r6, r3
 8005756:	fb03 6711 	mls	r7, r3, r1, r6
 800575a:	5dc7      	ldrb	r7, [r0, r7]
 800575c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005760:	4637      	mov	r7, r6
 8005762:	42bb      	cmp	r3, r7
 8005764:	460e      	mov	r6, r1
 8005766:	d9f4      	bls.n	8005752 <_printf_i+0x116>
 8005768:	2b08      	cmp	r3, #8
 800576a:	d10b      	bne.n	8005784 <_printf_i+0x148>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	07de      	lsls	r6, r3, #31
 8005770:	d508      	bpl.n	8005784 <_printf_i+0x148>
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	6861      	ldr	r1, [r4, #4]
 8005776:	4299      	cmp	r1, r3
 8005778:	bfde      	ittt	le
 800577a:	2330      	movle	r3, #48	; 0x30
 800577c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005780:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005784:	1b52      	subs	r2, r2, r5
 8005786:	6122      	str	r2, [r4, #16]
 8005788:	f8cd a000 	str.w	sl, [sp]
 800578c:	464b      	mov	r3, r9
 800578e:	aa03      	add	r2, sp, #12
 8005790:	4621      	mov	r1, r4
 8005792:	4640      	mov	r0, r8
 8005794:	f7ff fee4 	bl	8005560 <_printf_common>
 8005798:	3001      	adds	r0, #1
 800579a:	d14a      	bne.n	8005832 <_printf_i+0x1f6>
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	b004      	add	sp, #16
 80057a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	f043 0320 	orr.w	r3, r3, #32
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	4833      	ldr	r0, [pc, #204]	; (800587c <_printf_i+0x240>)
 80057b0:	2778      	movs	r7, #120	; 0x78
 80057b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	6829      	ldr	r1, [r5, #0]
 80057ba:	061f      	lsls	r7, r3, #24
 80057bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80057c0:	d402      	bmi.n	80057c8 <_printf_i+0x18c>
 80057c2:	065f      	lsls	r7, r3, #25
 80057c4:	bf48      	it	mi
 80057c6:	b2b6      	uxthmi	r6, r6
 80057c8:	07df      	lsls	r7, r3, #31
 80057ca:	bf48      	it	mi
 80057cc:	f043 0320 	orrmi.w	r3, r3, #32
 80057d0:	6029      	str	r1, [r5, #0]
 80057d2:	bf48      	it	mi
 80057d4:	6023      	strmi	r3, [r4, #0]
 80057d6:	b91e      	cbnz	r6, 80057e0 <_printf_i+0x1a4>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	f023 0320 	bic.w	r3, r3, #32
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	2310      	movs	r3, #16
 80057e2:	e7a7      	b.n	8005734 <_printf_i+0xf8>
 80057e4:	4824      	ldr	r0, [pc, #144]	; (8005878 <_printf_i+0x23c>)
 80057e6:	e7e4      	b.n	80057b2 <_printf_i+0x176>
 80057e8:	4615      	mov	r5, r2
 80057ea:	e7bd      	b.n	8005768 <_printf_i+0x12c>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	6826      	ldr	r6, [r4, #0]
 80057f0:	6961      	ldr	r1, [r4, #20]
 80057f2:	1d18      	adds	r0, r3, #4
 80057f4:	6028      	str	r0, [r5, #0]
 80057f6:	0635      	lsls	r5, r6, #24
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	d501      	bpl.n	8005800 <_printf_i+0x1c4>
 80057fc:	6019      	str	r1, [r3, #0]
 80057fe:	e002      	b.n	8005806 <_printf_i+0x1ca>
 8005800:	0670      	lsls	r0, r6, #25
 8005802:	d5fb      	bpl.n	80057fc <_printf_i+0x1c0>
 8005804:	8019      	strh	r1, [r3, #0]
 8005806:	2300      	movs	r3, #0
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	4615      	mov	r5, r2
 800580c:	e7bc      	b.n	8005788 <_printf_i+0x14c>
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	1d1a      	adds	r2, r3, #4
 8005812:	602a      	str	r2, [r5, #0]
 8005814:	681d      	ldr	r5, [r3, #0]
 8005816:	6862      	ldr	r2, [r4, #4]
 8005818:	2100      	movs	r1, #0
 800581a:	4628      	mov	r0, r5
 800581c:	f7fa fd08 	bl	8000230 <memchr>
 8005820:	b108      	cbz	r0, 8005826 <_printf_i+0x1ea>
 8005822:	1b40      	subs	r0, r0, r5
 8005824:	6060      	str	r0, [r4, #4]
 8005826:	6863      	ldr	r3, [r4, #4]
 8005828:	6123      	str	r3, [r4, #16]
 800582a:	2300      	movs	r3, #0
 800582c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005830:	e7aa      	b.n	8005788 <_printf_i+0x14c>
 8005832:	6923      	ldr	r3, [r4, #16]
 8005834:	462a      	mov	r2, r5
 8005836:	4649      	mov	r1, r9
 8005838:	4640      	mov	r0, r8
 800583a:	47d0      	blx	sl
 800583c:	3001      	adds	r0, #1
 800583e:	d0ad      	beq.n	800579c <_printf_i+0x160>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	079b      	lsls	r3, r3, #30
 8005844:	d413      	bmi.n	800586e <_printf_i+0x232>
 8005846:	68e0      	ldr	r0, [r4, #12]
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	4298      	cmp	r0, r3
 800584c:	bfb8      	it	lt
 800584e:	4618      	movlt	r0, r3
 8005850:	e7a6      	b.n	80057a0 <_printf_i+0x164>
 8005852:	2301      	movs	r3, #1
 8005854:	4632      	mov	r2, r6
 8005856:	4649      	mov	r1, r9
 8005858:	4640      	mov	r0, r8
 800585a:	47d0      	blx	sl
 800585c:	3001      	adds	r0, #1
 800585e:	d09d      	beq.n	800579c <_printf_i+0x160>
 8005860:	3501      	adds	r5, #1
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	9903      	ldr	r1, [sp, #12]
 8005866:	1a5b      	subs	r3, r3, r1
 8005868:	42ab      	cmp	r3, r5
 800586a:	dcf2      	bgt.n	8005852 <_printf_i+0x216>
 800586c:	e7eb      	b.n	8005846 <_printf_i+0x20a>
 800586e:	2500      	movs	r5, #0
 8005870:	f104 0619 	add.w	r6, r4, #25
 8005874:	e7f5      	b.n	8005862 <_printf_i+0x226>
 8005876:	bf00      	nop
 8005878:	08007ffa 	.word	0x08007ffa
 800587c:	0800800b 	.word	0x0800800b

08005880 <std>:
 8005880:	2300      	movs	r3, #0
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	e9c0 3300 	strd	r3, r3, [r0]
 800588a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800588e:	6083      	str	r3, [r0, #8]
 8005890:	8181      	strh	r1, [r0, #12]
 8005892:	6643      	str	r3, [r0, #100]	; 0x64
 8005894:	81c2      	strh	r2, [r0, #14]
 8005896:	6183      	str	r3, [r0, #24]
 8005898:	4619      	mov	r1, r3
 800589a:	2208      	movs	r2, #8
 800589c:	305c      	adds	r0, #92	; 0x5c
 800589e:	f000 fa2b 	bl	8005cf8 <memset>
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <std+0x58>)
 80058a4:	6263      	str	r3, [r4, #36]	; 0x24
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <std+0x5c>)
 80058a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <std+0x60>)
 80058ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <std+0x64>)
 80058b0:	6323      	str	r3, [r4, #48]	; 0x30
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <std+0x68>)
 80058b4:	6224      	str	r4, [r4, #32]
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d006      	beq.n	80058c8 <std+0x48>
 80058ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058be:	4294      	cmp	r4, r2
 80058c0:	d002      	beq.n	80058c8 <std+0x48>
 80058c2:	33d0      	adds	r3, #208	; 0xd0
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d105      	bne.n	80058d4 <std+0x54>
 80058c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f000 baea 	b.w	8005ea8 <__retarget_lock_init_recursive>
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	bf00      	nop
 80058d8:	08005b49 	.word	0x08005b49
 80058dc:	08005b6b 	.word	0x08005b6b
 80058e0:	08005ba3 	.word	0x08005ba3
 80058e4:	08005bc7 	.word	0x08005bc7
 80058e8:	200004f0 	.word	0x200004f0

080058ec <stdio_exit_handler>:
 80058ec:	4a02      	ldr	r2, [pc, #8]	; (80058f8 <stdio_exit_handler+0xc>)
 80058ee:	4903      	ldr	r1, [pc, #12]	; (80058fc <stdio_exit_handler+0x10>)
 80058f0:	4803      	ldr	r0, [pc, #12]	; (8005900 <stdio_exit_handler+0x14>)
 80058f2:	f000 b869 	b.w	80059c8 <_fwalk_sglue>
 80058f6:	bf00      	nop
 80058f8:	200000c8 	.word	0x200000c8
 80058fc:	08007b21 	.word	0x08007b21
 8005900:	200000d4 	.word	0x200000d4

08005904 <cleanup_stdio>:
 8005904:	6841      	ldr	r1, [r0, #4]
 8005906:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <cleanup_stdio+0x34>)
 8005908:	4299      	cmp	r1, r3
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
 800590e:	d001      	beq.n	8005914 <cleanup_stdio+0x10>
 8005910:	f002 f906 	bl	8007b20 <_fflush_r>
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <cleanup_stdio+0x38>)
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <cleanup_stdio+0x1e>
 800591c:	4620      	mov	r0, r4
 800591e:	f002 f8ff 	bl	8007b20 <_fflush_r>
 8005922:	68e1      	ldr	r1, [r4, #12]
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <cleanup_stdio+0x3c>)
 8005926:	4299      	cmp	r1, r3
 8005928:	d004      	beq.n	8005934 <cleanup_stdio+0x30>
 800592a:	4620      	mov	r0, r4
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	f002 b8f6 	b.w	8007b20 <_fflush_r>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	bf00      	nop
 8005938:	200004f0 	.word	0x200004f0
 800593c:	20000558 	.word	0x20000558
 8005940:	200005c0 	.word	0x200005c0

08005944 <global_stdio_init.part.0>:
 8005944:	b510      	push	{r4, lr}
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <global_stdio_init.part.0+0x30>)
 8005948:	4c0b      	ldr	r4, [pc, #44]	; (8005978 <global_stdio_init.part.0+0x34>)
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <global_stdio_init.part.0+0x38>)
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	4620      	mov	r0, r4
 8005950:	2200      	movs	r2, #0
 8005952:	2104      	movs	r1, #4
 8005954:	f7ff ff94 	bl	8005880 <std>
 8005958:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800595c:	2201      	movs	r2, #1
 800595e:	2109      	movs	r1, #9
 8005960:	f7ff ff8e 	bl	8005880 <std>
 8005964:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005968:	2202      	movs	r2, #2
 800596a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800596e:	2112      	movs	r1, #18
 8005970:	f7ff bf86 	b.w	8005880 <std>
 8005974:	20000628 	.word	0x20000628
 8005978:	200004f0 	.word	0x200004f0
 800597c:	080058ed 	.word	0x080058ed

08005980 <__sfp_lock_acquire>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__sfp_lock_acquire+0x8>)
 8005982:	f000 ba92 	b.w	8005eaa <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	20000631 	.word	0x20000631

0800598c <__sfp_lock_release>:
 800598c:	4801      	ldr	r0, [pc, #4]	; (8005994 <__sfp_lock_release+0x8>)
 800598e:	f000 ba8d 	b.w	8005eac <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	20000631 	.word	0x20000631

08005998 <__sinit>:
 8005998:	b510      	push	{r4, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	f7ff fff0 	bl	8005980 <__sfp_lock_acquire>
 80059a0:	6a23      	ldr	r3, [r4, #32]
 80059a2:	b11b      	cbz	r3, 80059ac <__sinit+0x14>
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a8:	f7ff bff0 	b.w	800598c <__sfp_lock_release>
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <__sinit+0x28>)
 80059ae:	6223      	str	r3, [r4, #32]
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <__sinit+0x2c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f5      	bne.n	80059a4 <__sinit+0xc>
 80059b8:	f7ff ffc4 	bl	8005944 <global_stdio_init.part.0>
 80059bc:	e7f2      	b.n	80059a4 <__sinit+0xc>
 80059be:	bf00      	nop
 80059c0:	08005905 	.word	0x08005905
 80059c4:	20000628 	.word	0x20000628

080059c8 <_fwalk_sglue>:
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4607      	mov	r7, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	4614      	mov	r4, r2
 80059d2:	2600      	movs	r6, #0
 80059d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059d8:	f1b9 0901 	subs.w	r9, r9, #1
 80059dc:	d505      	bpl.n	80059ea <_fwalk_sglue+0x22>
 80059de:	6824      	ldr	r4, [r4, #0]
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d1f7      	bne.n	80059d4 <_fwalk_sglue+0xc>
 80059e4:	4630      	mov	r0, r6
 80059e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d907      	bls.n	8005a00 <_fwalk_sglue+0x38>
 80059f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f4:	3301      	adds	r3, #1
 80059f6:	d003      	beq.n	8005a00 <_fwalk_sglue+0x38>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	4306      	orrs	r6, r0
 8005a00:	3568      	adds	r5, #104	; 0x68
 8005a02:	e7e9      	b.n	80059d8 <_fwalk_sglue+0x10>

08005a04 <iprintf>:
 8005a04:	b40f      	push	{r0, r1, r2, r3}
 8005a06:	b507      	push	{r0, r1, r2, lr}
 8005a08:	4906      	ldr	r1, [pc, #24]	; (8005a24 <iprintf+0x20>)
 8005a0a:	ab04      	add	r3, sp, #16
 8005a0c:	6808      	ldr	r0, [r1, #0]
 8005a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a12:	6881      	ldr	r1, [r0, #8]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	f001 fee3 	bl	80077e0 <_vfiprintf_r>
 8005a1a:	b003      	add	sp, #12
 8005a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a20:	b004      	add	sp, #16
 8005a22:	4770      	bx	lr
 8005a24:	20000120 	.word	0x20000120

08005a28 <_puts_r>:
 8005a28:	6a03      	ldr	r3, [r0, #32]
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	6884      	ldr	r4, [r0, #8]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	460e      	mov	r6, r1
 8005a32:	b90b      	cbnz	r3, 8005a38 <_puts_r+0x10>
 8005a34:	f7ff ffb0 	bl	8005998 <__sinit>
 8005a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a3a:	07db      	lsls	r3, r3, #31
 8005a3c:	d405      	bmi.n	8005a4a <_puts_r+0x22>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	0598      	lsls	r0, r3, #22
 8005a42:	d402      	bmi.n	8005a4a <_puts_r+0x22>
 8005a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a46:	f000 fa30 	bl	8005eaa <__retarget_lock_acquire_recursive>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	0719      	lsls	r1, r3, #28
 8005a4e:	d513      	bpl.n	8005a78 <_puts_r+0x50>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	b18b      	cbz	r3, 8005a78 <_puts_r+0x50>
 8005a54:	3e01      	subs	r6, #1
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	60a3      	str	r3, [r4, #8]
 8005a60:	b9e9      	cbnz	r1, 8005a9e <_puts_r+0x76>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	da2e      	bge.n	8005ac4 <_puts_r+0x9c>
 8005a66:	4622      	mov	r2, r4
 8005a68:	210a      	movs	r1, #10
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 f8af 	bl	8005bce <__swbuf_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d007      	beq.n	8005a84 <_puts_r+0x5c>
 8005a74:	250a      	movs	r5, #10
 8005a76:	e007      	b.n	8005a88 <_puts_r+0x60>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f8e4 	bl	8005c48 <__swsetup_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d0e7      	beq.n	8005a54 <_puts_r+0x2c>
 8005a84:	f04f 35ff 	mov.w	r5, #4294967295
 8005a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a8a:	07da      	lsls	r2, r3, #31
 8005a8c:	d405      	bmi.n	8005a9a <_puts_r+0x72>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	059b      	lsls	r3, r3, #22
 8005a92:	d402      	bmi.n	8005a9a <_puts_r+0x72>
 8005a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a96:	f000 fa09 	bl	8005eac <__retarget_lock_release_recursive>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da04      	bge.n	8005aac <_puts_r+0x84>
 8005aa2:	69a2      	ldr	r2, [r4, #24]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	dc06      	bgt.n	8005ab6 <_puts_r+0x8e>
 8005aa8:	290a      	cmp	r1, #10
 8005aaa:	d004      	beq.n	8005ab6 <_puts_r+0x8e>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	6022      	str	r2, [r4, #0]
 8005ab2:	7019      	strb	r1, [r3, #0]
 8005ab4:	e7cf      	b.n	8005a56 <_puts_r+0x2e>
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f000 f888 	bl	8005bce <__swbuf_r>
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d1c9      	bne.n	8005a56 <_puts_r+0x2e>
 8005ac2:	e7df      	b.n	8005a84 <_puts_r+0x5c>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	250a      	movs	r5, #10
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	701d      	strb	r5, [r3, #0]
 8005ace:	e7db      	b.n	8005a88 <_puts_r+0x60>

08005ad0 <puts>:
 8005ad0:	4b02      	ldr	r3, [pc, #8]	; (8005adc <puts+0xc>)
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	f7ff bfa7 	b.w	8005a28 <_puts_r>
 8005ada:	bf00      	nop
 8005adc:	20000120 	.word	0x20000120

08005ae0 <sniprintf>:
 8005ae0:	b40c      	push	{r2, r3}
 8005ae2:	b530      	push	{r4, r5, lr}
 8005ae4:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <sniprintf+0x64>)
 8005ae6:	1e0c      	subs	r4, r1, #0
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	b09d      	sub	sp, #116	; 0x74
 8005aec:	da08      	bge.n	8005b00 <sniprintf+0x20>
 8005aee:	238b      	movs	r3, #139	; 0x8b
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	b01d      	add	sp, #116	; 0x74
 8005af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005afc:	b002      	add	sp, #8
 8005afe:	4770      	bx	lr
 8005b00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b08:	bf14      	ite	ne
 8005b0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b0e:	4623      	moveq	r3, r4
 8005b10:	9304      	str	r3, [sp, #16]
 8005b12:	9307      	str	r3, [sp, #28]
 8005b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b18:	9002      	str	r0, [sp, #8]
 8005b1a:	9006      	str	r0, [sp, #24]
 8005b1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b22:	ab21      	add	r3, sp, #132	; 0x84
 8005b24:	a902      	add	r1, sp, #8
 8005b26:	4628      	mov	r0, r5
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f001 fd31 	bl	8007590 <_svfiprintf_r>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	bfbc      	itt	lt
 8005b32:	238b      	movlt	r3, #139	; 0x8b
 8005b34:	602b      	strlt	r3, [r5, #0]
 8005b36:	2c00      	cmp	r4, #0
 8005b38:	d0dd      	beq.n	8005af6 <sniprintf+0x16>
 8005b3a:	9b02      	ldr	r3, [sp, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e7d9      	b.n	8005af6 <sniprintf+0x16>
 8005b42:	bf00      	nop
 8005b44:	20000120 	.word	0x20000120

08005b48 <__sread>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b50:	f000 f95c 	bl	8005e0c <_read_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	bfab      	itete	ge
 8005b58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b5c:	181b      	addge	r3, r3, r0
 8005b5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b62:	bfac      	ite	ge
 8005b64:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b66:	81a3      	strhlt	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__swrite>:
 8005b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6e:	461f      	mov	r7, r3
 8005b70:	898b      	ldrh	r3, [r1, #12]
 8005b72:	05db      	lsls	r3, r3, #23
 8005b74:	4605      	mov	r5, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	4616      	mov	r6, r2
 8005b7a:	d505      	bpl.n	8005b88 <__swrite+0x1e>
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	2302      	movs	r3, #2
 8005b82:	2200      	movs	r2, #0
 8005b84:	f000 f930 	bl	8005de8 <_lseek_r>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	4628      	mov	r0, r5
 8005b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	f000 b947 	b.w	8005e30 <_write_r>

08005ba2 <__sseek>:
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005baa:	f000 f91d 	bl	8005de8 <_lseek_r>
 8005bae:	1c43      	adds	r3, r0, #1
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	bf15      	itete	ne
 8005bb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bbe:	81a3      	strheq	r3, [r4, #12]
 8005bc0:	bf18      	it	ne
 8005bc2:	81a3      	strhne	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__sclose>:
 8005bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bca:	f000 b8fd 	b.w	8005dc8 <_close_r>

08005bce <__swbuf_r>:
 8005bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd0:	460e      	mov	r6, r1
 8005bd2:	4614      	mov	r4, r2
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	b118      	cbz	r0, 8005be0 <__swbuf_r+0x12>
 8005bd8:	6a03      	ldr	r3, [r0, #32]
 8005bda:	b90b      	cbnz	r3, 8005be0 <__swbuf_r+0x12>
 8005bdc:	f7ff fedc 	bl	8005998 <__sinit>
 8005be0:	69a3      	ldr	r3, [r4, #24]
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	071a      	lsls	r2, r3, #28
 8005be8:	d525      	bpl.n	8005c36 <__swbuf_r+0x68>
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	b31b      	cbz	r3, 8005c36 <__swbuf_r+0x68>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6922      	ldr	r2, [r4, #16]
 8005bf2:	1a98      	subs	r0, r3, r2
 8005bf4:	6963      	ldr	r3, [r4, #20]
 8005bf6:	b2f6      	uxtb	r6, r6
 8005bf8:	4283      	cmp	r3, r0
 8005bfa:	4637      	mov	r7, r6
 8005bfc:	dc04      	bgt.n	8005c08 <__swbuf_r+0x3a>
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f001 ff8d 	bl	8007b20 <_fflush_r>
 8005c06:	b9e0      	cbnz	r0, 8005c42 <__swbuf_r+0x74>
 8005c08:	68a3      	ldr	r3, [r4, #8]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	60a3      	str	r3, [r4, #8]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	701e      	strb	r6, [r3, #0]
 8005c16:	6962      	ldr	r2, [r4, #20]
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d004      	beq.n	8005c28 <__swbuf_r+0x5a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	07db      	lsls	r3, r3, #31
 8005c22:	d506      	bpl.n	8005c32 <__swbuf_r+0x64>
 8005c24:	2e0a      	cmp	r6, #10
 8005c26:	d104      	bne.n	8005c32 <__swbuf_r+0x64>
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f001 ff78 	bl	8007b20 <_fflush_r>
 8005c30:	b938      	cbnz	r0, 8005c42 <__swbuf_r+0x74>
 8005c32:	4638      	mov	r0, r7
 8005c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c36:	4621      	mov	r1, r4
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 f805 	bl	8005c48 <__swsetup_r>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d0d5      	beq.n	8005bee <__swbuf_r+0x20>
 8005c42:	f04f 37ff 	mov.w	r7, #4294967295
 8005c46:	e7f4      	b.n	8005c32 <__swbuf_r+0x64>

08005c48 <__swsetup_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <__swsetup_r+0xac>)
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	460c      	mov	r4, r1
 8005c52:	b118      	cbz	r0, 8005c5c <__swsetup_r+0x14>
 8005c54:	6a03      	ldr	r3, [r0, #32]
 8005c56:	b90b      	cbnz	r3, 8005c5c <__swsetup_r+0x14>
 8005c58:	f7ff fe9e 	bl	8005998 <__sinit>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c62:	0718      	lsls	r0, r3, #28
 8005c64:	d422      	bmi.n	8005cac <__swsetup_r+0x64>
 8005c66:	06d9      	lsls	r1, r3, #27
 8005c68:	d407      	bmi.n	8005c7a <__swsetup_r+0x32>
 8005c6a:	2309      	movs	r3, #9
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	e034      	b.n	8005ce4 <__swsetup_r+0x9c>
 8005c7a:	0758      	lsls	r0, r3, #29
 8005c7c:	d512      	bpl.n	8005ca4 <__swsetup_r+0x5c>
 8005c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c80:	b141      	cbz	r1, 8005c94 <__swsetup_r+0x4c>
 8005c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c86:	4299      	cmp	r1, r3
 8005c88:	d002      	beq.n	8005c90 <__swsetup_r+0x48>
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f000 ffaa 	bl	8006be4 <_free_r>
 8005c90:	2300      	movs	r3, #0
 8005c92:	6363      	str	r3, [r4, #52]	; 0x34
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6063      	str	r3, [r4, #4]
 8005ca0:	6923      	ldr	r3, [r4, #16]
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f043 0308 	orr.w	r3, r3, #8
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	b94b      	cbnz	r3, 8005cc4 <__swsetup_r+0x7c>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cba:	d003      	beq.n	8005cc4 <__swsetup_r+0x7c>
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f001 ff8e 	bl	8007be0 <__smakebuf_r>
 8005cc4:	89a0      	ldrh	r0, [r4, #12]
 8005cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cca:	f010 0301 	ands.w	r3, r0, #1
 8005cce:	d00a      	beq.n	8005ce6 <__swsetup_r+0x9e>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60a3      	str	r3, [r4, #8]
 8005cd4:	6963      	ldr	r3, [r4, #20]
 8005cd6:	425b      	negs	r3, r3
 8005cd8:	61a3      	str	r3, [r4, #24]
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	b943      	cbnz	r3, 8005cf0 <__swsetup_r+0xa8>
 8005cde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ce2:	d1c4      	bne.n	8005c6e <__swsetup_r+0x26>
 8005ce4:	bd38      	pop	{r3, r4, r5, pc}
 8005ce6:	0781      	lsls	r1, r0, #30
 8005ce8:	bf58      	it	pl
 8005cea:	6963      	ldrpl	r3, [r4, #20]
 8005cec:	60a3      	str	r3, [r4, #8]
 8005cee:	e7f4      	b.n	8005cda <__swsetup_r+0x92>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e7f7      	b.n	8005ce4 <__swsetup_r+0x9c>
 8005cf4:	20000120 	.word	0x20000120

08005cf8 <memset>:
 8005cf8:	4402      	add	r2, r0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <strtok>:
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <strtok+0x5c>)
 8005d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d0c:	681e      	ldr	r6, [r3, #0]
 8005d0e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005d10:	4605      	mov	r5, r0
 8005d12:	b9fc      	cbnz	r4, 8005d54 <strtok+0x4c>
 8005d14:	2050      	movs	r0, #80	; 0x50
 8005d16:	9101      	str	r1, [sp, #4]
 8005d18:	f000 ffb0 	bl	8006c7c <malloc>
 8005d1c:	9901      	ldr	r1, [sp, #4]
 8005d1e:	6470      	str	r0, [r6, #68]	; 0x44
 8005d20:	4602      	mov	r2, r0
 8005d22:	b920      	cbnz	r0, 8005d2e <strtok+0x26>
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <strtok+0x60>)
 8005d26:	4811      	ldr	r0, [pc, #68]	; (8005d6c <strtok+0x64>)
 8005d28:	215b      	movs	r1, #91	; 0x5b
 8005d2a:	f000 f8c1 	bl	8005eb0 <__assert_func>
 8005d2e:	e9c0 4400 	strd	r4, r4, [r0]
 8005d32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005d36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005d3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005d3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005d42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005d46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005d4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005d4e:	6184      	str	r4, [r0, #24]
 8005d50:	7704      	strb	r4, [r0, #28]
 8005d52:	6244      	str	r4, [r0, #36]	; 0x24
 8005d54:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005d56:	2301      	movs	r3, #1
 8005d58:	4628      	mov	r0, r5
 8005d5a:	b002      	add	sp, #8
 8005d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d60:	f000 b806 	b.w	8005d70 <__strtok_r>
 8005d64:	20000120 	.word	0x20000120
 8005d68:	0800801c 	.word	0x0800801c
 8005d6c:	08008033 	.word	0x08008033

08005d70 <__strtok_r>:
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	b908      	cbnz	r0, 8005d78 <__strtok_r+0x8>
 8005d74:	6810      	ldr	r0, [r2, #0]
 8005d76:	b188      	cbz	r0, 8005d9c <__strtok_r+0x2c>
 8005d78:	4604      	mov	r4, r0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005d80:	460f      	mov	r7, r1
 8005d82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005d86:	b91e      	cbnz	r6, 8005d90 <__strtok_r+0x20>
 8005d88:	b965      	cbnz	r5, 8005da4 <__strtok_r+0x34>
 8005d8a:	6015      	str	r5, [r2, #0]
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	e005      	b.n	8005d9c <__strtok_r+0x2c>
 8005d90:	42b5      	cmp	r5, r6
 8005d92:	d1f6      	bne.n	8005d82 <__strtok_r+0x12>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f0      	bne.n	8005d7a <__strtok_r+0xa>
 8005d98:	6014      	str	r4, [r2, #0]
 8005d9a:	7003      	strb	r3, [r0, #0]
 8005d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d9e:	461c      	mov	r4, r3
 8005da0:	e00c      	b.n	8005dbc <__strtok_r+0x4c>
 8005da2:	b915      	cbnz	r5, 8005daa <__strtok_r+0x3a>
 8005da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005da8:	460e      	mov	r6, r1
 8005daa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005dae:	42ab      	cmp	r3, r5
 8005db0:	d1f7      	bne.n	8005da2 <__strtok_r+0x32>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f3      	beq.n	8005d9e <__strtok_r+0x2e>
 8005db6:	2300      	movs	r3, #0
 8005db8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005dbc:	6014      	str	r4, [r2, #0]
 8005dbe:	e7ed      	b.n	8005d9c <__strtok_r+0x2c>

08005dc0 <_localeconv_r>:
 8005dc0:	4800      	ldr	r0, [pc, #0]	; (8005dc4 <_localeconv_r+0x4>)
 8005dc2:	4770      	bx	lr
 8005dc4:	20000214 	.word	0x20000214

08005dc8 <_close_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d06      	ldr	r5, [pc, #24]	; (8005de4 <_close_r+0x1c>)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	602b      	str	r3, [r5, #0]
 8005dd4:	f7fc fa97 	bl	8002306 <_close>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_close_r+0x1a>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_close_r+0x1a>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	2000062c 	.word	0x2000062c

08005de8 <_lseek_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d07      	ldr	r5, [pc, #28]	; (8005e08 <_lseek_r+0x20>)
 8005dec:	4604      	mov	r4, r0
 8005dee:	4608      	mov	r0, r1
 8005df0:	4611      	mov	r1, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fc faac 	bl	8002354 <_lseek>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_lseek_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_lseek_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	2000062c 	.word	0x2000062c

08005e0c <_read_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_read_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fc fa3a 	bl	8002294 <_read>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_read_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_read_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	2000062c 	.word	0x2000062c

08005e30 <_write_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	; (8005e50 <_write_r+0x20>)
 8005e34:	4604      	mov	r4, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fc fa45 	bl	80022ce <_write>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_write_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_write_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	2000062c 	.word	0x2000062c

08005e54 <__errno>:
 8005e54:	4b01      	ldr	r3, [pc, #4]	; (8005e5c <__errno+0x8>)
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	20000120 	.word	0x20000120

08005e60 <__libc_init_array>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4d0d      	ldr	r5, [pc, #52]	; (8005e98 <__libc_init_array+0x38>)
 8005e64:	4c0d      	ldr	r4, [pc, #52]	; (8005e9c <__libc_init_array+0x3c>)
 8005e66:	1b64      	subs	r4, r4, r5
 8005e68:	10a4      	asrs	r4, r4, #2
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	42a6      	cmp	r6, r4
 8005e6e:	d109      	bne.n	8005e84 <__libc_init_array+0x24>
 8005e70:	4d0b      	ldr	r5, [pc, #44]	; (8005ea0 <__libc_init_array+0x40>)
 8005e72:	4c0c      	ldr	r4, [pc, #48]	; (8005ea4 <__libc_init_array+0x44>)
 8005e74:	f002 f802 	bl	8007e7c <_init>
 8005e78:	1b64      	subs	r4, r4, r5
 8005e7a:	10a4      	asrs	r4, r4, #2
 8005e7c:	2600      	movs	r6, #0
 8005e7e:	42a6      	cmp	r6, r4
 8005e80:	d105      	bne.n	8005e8e <__libc_init_array+0x2e>
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e88:	4798      	blx	r3
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	e7ee      	b.n	8005e6c <__libc_init_array+0xc>
 8005e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e92:	4798      	blx	r3
 8005e94:	3601      	adds	r6, #1
 8005e96:	e7f2      	b.n	8005e7e <__libc_init_array+0x1e>
 8005e98:	080083b8 	.word	0x080083b8
 8005e9c:	080083b8 	.word	0x080083b8
 8005ea0:	080083b8 	.word	0x080083b8
 8005ea4:	080083bc 	.word	0x080083bc

08005ea8 <__retarget_lock_init_recursive>:
 8005ea8:	4770      	bx	lr

08005eaa <__retarget_lock_acquire_recursive>:
 8005eaa:	4770      	bx	lr

08005eac <__retarget_lock_release_recursive>:
 8005eac:	4770      	bx	lr
	...

08005eb0 <__assert_func>:
 8005eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <__assert_func+0x2c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4605      	mov	r5, r0
 8005ebc:	68d8      	ldr	r0, [r3, #12]
 8005ebe:	b14c      	cbz	r4, 8005ed4 <__assert_func+0x24>
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <__assert_func+0x30>)
 8005ec2:	9100      	str	r1, [sp, #0]
 8005ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ec8:	4906      	ldr	r1, [pc, #24]	; (8005ee4 <__assert_func+0x34>)
 8005eca:	462b      	mov	r3, r5
 8005ecc:	f001 fe50 	bl	8007b70 <fiprintf>
 8005ed0:	f001 ff1c 	bl	8007d0c <abort>
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <__assert_func+0x38>)
 8005ed6:	461c      	mov	r4, r3
 8005ed8:	e7f3      	b.n	8005ec2 <__assert_func+0x12>
 8005eda:	bf00      	nop
 8005edc:	20000120 	.word	0x20000120
 8005ee0:	0800808d 	.word	0x0800808d
 8005ee4:	0800809a 	.word	0x0800809a
 8005ee8:	080080c8 	.word	0x080080c8

08005eec <quorem>:
 8005eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	6903      	ldr	r3, [r0, #16]
 8005ef2:	690c      	ldr	r4, [r1, #16]
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	db7e      	blt.n	8005ff8 <quorem+0x10c>
 8005efa:	3c01      	subs	r4, #1
 8005efc:	f101 0814 	add.w	r8, r1, #20
 8005f00:	f100 0514 	add.w	r5, r0, #20
 8005f04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f12:	3301      	adds	r3, #1
 8005f14:	429a      	cmp	r2, r3
 8005f16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f22:	d331      	bcc.n	8005f88 <quorem+0x9c>
 8005f24:	f04f 0e00 	mov.w	lr, #0
 8005f28:	4640      	mov	r0, r8
 8005f2a:	46ac      	mov	ip, r5
 8005f2c:	46f2      	mov	sl, lr
 8005f2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f32:	b293      	uxth	r3, r2
 8005f34:	fb06 e303 	mla	r3, r6, r3, lr
 8005f38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f3c:	0c1a      	lsrs	r2, r3, #16
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	ebaa 0303 	sub.w	r3, sl, r3
 8005f44:	f8dc a000 	ldr.w	sl, [ip]
 8005f48:	fa13 f38a 	uxtah	r3, r3, sl
 8005f4c:	fb06 220e 	mla	r2, r6, lr, r2
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	9b00      	ldr	r3, [sp, #0]
 8005f54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f62:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f66:	4581      	cmp	r9, r0
 8005f68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f6c:	f84c 3b04 	str.w	r3, [ip], #4
 8005f70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f74:	d2db      	bcs.n	8005f2e <quorem+0x42>
 8005f76:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f7a:	b92b      	cbnz	r3, 8005f88 <quorem+0x9c>
 8005f7c:	9b01      	ldr	r3, [sp, #4]
 8005f7e:	3b04      	subs	r3, #4
 8005f80:	429d      	cmp	r5, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	d32c      	bcc.n	8005fe0 <quorem+0xf4>
 8005f86:	613c      	str	r4, [r7, #16]
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f001 f9a7 	bl	80072dc <__mcmp>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	db22      	blt.n	8005fd8 <quorem+0xec>
 8005f92:	3601      	adds	r6, #1
 8005f94:	4629      	mov	r1, r5
 8005f96:	2000      	movs	r0, #0
 8005f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f9c:	f8d1 c000 	ldr.w	ip, [r1]
 8005fa0:	b293      	uxth	r3, r2
 8005fa2:	1ac3      	subs	r3, r0, r3
 8005fa4:	0c12      	lsrs	r2, r2, #16
 8005fa6:	fa13 f38c 	uxtah	r3, r3, ip
 8005faa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005fae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fb8:	45c1      	cmp	r9, r8
 8005fba:	f841 3b04 	str.w	r3, [r1], #4
 8005fbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005fc2:	d2e9      	bcs.n	8005f98 <quorem+0xac>
 8005fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fcc:	b922      	cbnz	r2, 8005fd8 <quorem+0xec>
 8005fce:	3b04      	subs	r3, #4
 8005fd0:	429d      	cmp	r5, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	d30a      	bcc.n	8005fec <quorem+0x100>
 8005fd6:	613c      	str	r4, [r7, #16]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	b003      	add	sp, #12
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	3b04      	subs	r3, #4
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	d1ce      	bne.n	8005f86 <quorem+0x9a>
 8005fe8:	3c01      	subs	r4, #1
 8005fea:	e7c9      	b.n	8005f80 <quorem+0x94>
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	3b04      	subs	r3, #4
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <quorem+0xea>
 8005ff4:	3c01      	subs	r4, #1
 8005ff6:	e7eb      	b.n	8005fd0 <quorem+0xe4>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7ee      	b.n	8005fda <quorem+0xee>
 8005ffc:	0000      	movs	r0, r0
	...

08006000 <_dtoa_r>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	ed2d 8b04 	vpush	{d8-d9}
 8006008:	69c5      	ldr	r5, [r0, #28]
 800600a:	b093      	sub	sp, #76	; 0x4c
 800600c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006010:	ec57 6b10 	vmov	r6, r7, d0
 8006014:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006018:	9107      	str	r1, [sp, #28]
 800601a:	4604      	mov	r4, r0
 800601c:	920a      	str	r2, [sp, #40]	; 0x28
 800601e:	930d      	str	r3, [sp, #52]	; 0x34
 8006020:	b975      	cbnz	r5, 8006040 <_dtoa_r+0x40>
 8006022:	2010      	movs	r0, #16
 8006024:	f000 fe2a 	bl	8006c7c <malloc>
 8006028:	4602      	mov	r2, r0
 800602a:	61e0      	str	r0, [r4, #28]
 800602c:	b920      	cbnz	r0, 8006038 <_dtoa_r+0x38>
 800602e:	4bae      	ldr	r3, [pc, #696]	; (80062e8 <_dtoa_r+0x2e8>)
 8006030:	21ef      	movs	r1, #239	; 0xef
 8006032:	48ae      	ldr	r0, [pc, #696]	; (80062ec <_dtoa_r+0x2ec>)
 8006034:	f7ff ff3c 	bl	8005eb0 <__assert_func>
 8006038:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800603c:	6005      	str	r5, [r0, #0]
 800603e:	60c5      	str	r5, [r0, #12]
 8006040:	69e3      	ldr	r3, [r4, #28]
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	b151      	cbz	r1, 800605c <_dtoa_r+0x5c>
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	604a      	str	r2, [r1, #4]
 800604a:	2301      	movs	r3, #1
 800604c:	4093      	lsls	r3, r2
 800604e:	608b      	str	r3, [r1, #8]
 8006050:	4620      	mov	r0, r4
 8006052:	f000 ff07 	bl	8006e64 <_Bfree>
 8006056:	69e3      	ldr	r3, [r4, #28]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	1e3b      	subs	r3, r7, #0
 800605e:	bfbb      	ittet	lt
 8006060:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006064:	9303      	strlt	r3, [sp, #12]
 8006066:	2300      	movge	r3, #0
 8006068:	2201      	movlt	r2, #1
 800606a:	bfac      	ite	ge
 800606c:	f8c8 3000 	strge.w	r3, [r8]
 8006070:	f8c8 2000 	strlt.w	r2, [r8]
 8006074:	4b9e      	ldr	r3, [pc, #632]	; (80062f0 <_dtoa_r+0x2f0>)
 8006076:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800607a:	ea33 0308 	bics.w	r3, r3, r8
 800607e:	d11b      	bne.n	80060b8 <_dtoa_r+0xb8>
 8006080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006082:	f242 730f 	movw	r3, #9999	; 0x270f
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800608c:	4333      	orrs	r3, r6
 800608e:	f000 8593 	beq.w	8006bb8 <_dtoa_r+0xbb8>
 8006092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006094:	b963      	cbnz	r3, 80060b0 <_dtoa_r+0xb0>
 8006096:	4b97      	ldr	r3, [pc, #604]	; (80062f4 <_dtoa_r+0x2f4>)
 8006098:	e027      	b.n	80060ea <_dtoa_r+0xea>
 800609a:	4b97      	ldr	r3, [pc, #604]	; (80062f8 <_dtoa_r+0x2f8>)
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	9800      	ldr	r0, [sp, #0]
 80060a6:	b013      	add	sp, #76	; 0x4c
 80060a8:	ecbd 8b04 	vpop	{d8-d9}
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b0:	4b90      	ldr	r3, [pc, #576]	; (80062f4 <_dtoa_r+0x2f4>)
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	3303      	adds	r3, #3
 80060b6:	e7f3      	b.n	80060a0 <_dtoa_r+0xa0>
 80060b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060bc:	2200      	movs	r2, #0
 80060be:	ec51 0b17 	vmov	r0, r1, d7
 80060c2:	eeb0 8a47 	vmov.f32	s16, s14
 80060c6:	eef0 8a67 	vmov.f32	s17, s15
 80060ca:	2300      	movs	r3, #0
 80060cc:	f7fa fd2c 	bl	8000b28 <__aeabi_dcmpeq>
 80060d0:	4681      	mov	r9, r0
 80060d2:	b160      	cbz	r0, 80060ee <_dtoa_r+0xee>
 80060d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060d6:	2301      	movs	r3, #1
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8568 	beq.w	8006bb2 <_dtoa_r+0xbb2>
 80060e2:	4b86      	ldr	r3, [pc, #536]	; (80062fc <_dtoa_r+0x2fc>)
 80060e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	e7da      	b.n	80060a4 <_dtoa_r+0xa4>
 80060ee:	aa10      	add	r2, sp, #64	; 0x40
 80060f0:	a911      	add	r1, sp, #68	; 0x44
 80060f2:	4620      	mov	r0, r4
 80060f4:	eeb0 0a48 	vmov.f32	s0, s16
 80060f8:	eef0 0a68 	vmov.f32	s1, s17
 80060fc:	f001 f994 	bl	8007428 <__d2b>
 8006100:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006104:	4682      	mov	sl, r0
 8006106:	2d00      	cmp	r5, #0
 8006108:	d07f      	beq.n	800620a <_dtoa_r+0x20a>
 800610a:	ee18 3a90 	vmov	r3, s17
 800610e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006112:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006116:	ec51 0b18 	vmov	r0, r1, d8
 800611a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800611e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006122:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006126:	4619      	mov	r1, r3
 8006128:	2200      	movs	r2, #0
 800612a:	4b75      	ldr	r3, [pc, #468]	; (8006300 <_dtoa_r+0x300>)
 800612c:	f7fa f8dc 	bl	80002e8 <__aeabi_dsub>
 8006130:	a367      	add	r3, pc, #412	; (adr r3, 80062d0 <_dtoa_r+0x2d0>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa fa8f 	bl	8000658 <__aeabi_dmul>
 800613a:	a367      	add	r3, pc, #412	; (adr r3, 80062d8 <_dtoa_r+0x2d8>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f7fa f8d4 	bl	80002ec <__adddf3>
 8006144:	4606      	mov	r6, r0
 8006146:	4628      	mov	r0, r5
 8006148:	460f      	mov	r7, r1
 800614a:	f7fa fa1b 	bl	8000584 <__aeabi_i2d>
 800614e:	a364      	add	r3, pc, #400	; (adr r3, 80062e0 <_dtoa_r+0x2e0>)
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa fa80 	bl	8000658 <__aeabi_dmul>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4630      	mov	r0, r6
 800615e:	4639      	mov	r1, r7
 8006160:	f7fa f8c4 	bl	80002ec <__adddf3>
 8006164:	4606      	mov	r6, r0
 8006166:	460f      	mov	r7, r1
 8006168:	f7fa fd26 	bl	8000bb8 <__aeabi_d2iz>
 800616c:	2200      	movs	r2, #0
 800616e:	4683      	mov	fp, r0
 8006170:	2300      	movs	r3, #0
 8006172:	4630      	mov	r0, r6
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa fce1 	bl	8000b3c <__aeabi_dcmplt>
 800617a:	b148      	cbz	r0, 8006190 <_dtoa_r+0x190>
 800617c:	4658      	mov	r0, fp
 800617e:	f7fa fa01 	bl	8000584 <__aeabi_i2d>
 8006182:	4632      	mov	r2, r6
 8006184:	463b      	mov	r3, r7
 8006186:	f7fa fccf 	bl	8000b28 <__aeabi_dcmpeq>
 800618a:	b908      	cbnz	r0, 8006190 <_dtoa_r+0x190>
 800618c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006190:	f1bb 0f16 	cmp.w	fp, #22
 8006194:	d857      	bhi.n	8006246 <_dtoa_r+0x246>
 8006196:	4b5b      	ldr	r3, [pc, #364]	; (8006304 <_dtoa_r+0x304>)
 8006198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	ec51 0b18 	vmov	r0, r1, d8
 80061a4:	f7fa fcca 	bl	8000b3c <__aeabi_dcmplt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d04e      	beq.n	800624a <_dtoa_r+0x24a>
 80061ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061b0:	2300      	movs	r3, #0
 80061b2:	930c      	str	r3, [sp, #48]	; 0x30
 80061b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061b6:	1b5b      	subs	r3, r3, r5
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	bf45      	ittet	mi
 80061bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80061c0:	9305      	strmi	r3, [sp, #20]
 80061c2:	2300      	movpl	r3, #0
 80061c4:	2300      	movmi	r3, #0
 80061c6:	9206      	str	r2, [sp, #24]
 80061c8:	bf54      	ite	pl
 80061ca:	9305      	strpl	r3, [sp, #20]
 80061cc:	9306      	strmi	r3, [sp, #24]
 80061ce:	f1bb 0f00 	cmp.w	fp, #0
 80061d2:	db3c      	blt.n	800624e <_dtoa_r+0x24e>
 80061d4:	9b06      	ldr	r3, [sp, #24]
 80061d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80061da:	445b      	add	r3, fp
 80061dc:	9306      	str	r3, [sp, #24]
 80061de:	2300      	movs	r3, #0
 80061e0:	9308      	str	r3, [sp, #32]
 80061e2:	9b07      	ldr	r3, [sp, #28]
 80061e4:	2b09      	cmp	r3, #9
 80061e6:	d868      	bhi.n	80062ba <_dtoa_r+0x2ba>
 80061e8:	2b05      	cmp	r3, #5
 80061ea:	bfc4      	itt	gt
 80061ec:	3b04      	subgt	r3, #4
 80061ee:	9307      	strgt	r3, [sp, #28]
 80061f0:	9b07      	ldr	r3, [sp, #28]
 80061f2:	f1a3 0302 	sub.w	r3, r3, #2
 80061f6:	bfcc      	ite	gt
 80061f8:	2500      	movgt	r5, #0
 80061fa:	2501      	movle	r5, #1
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	f200 8085 	bhi.w	800630c <_dtoa_r+0x30c>
 8006202:	e8df f003 	tbb	[pc, r3]
 8006206:	3b2e      	.short	0x3b2e
 8006208:	5839      	.short	0x5839
 800620a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800620e:	441d      	add	r5, r3
 8006210:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006214:	2b20      	cmp	r3, #32
 8006216:	bfc1      	itttt	gt
 8006218:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800621c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006220:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006224:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006228:	bfd6      	itet	le
 800622a:	f1c3 0320 	rsble	r3, r3, #32
 800622e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006232:	fa06 f003 	lslle.w	r0, r6, r3
 8006236:	f7fa f995 	bl	8000564 <__aeabi_ui2d>
 800623a:	2201      	movs	r2, #1
 800623c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006240:	3d01      	subs	r5, #1
 8006242:	920e      	str	r2, [sp, #56]	; 0x38
 8006244:	e76f      	b.n	8006126 <_dtoa_r+0x126>
 8006246:	2301      	movs	r3, #1
 8006248:	e7b3      	b.n	80061b2 <_dtoa_r+0x1b2>
 800624a:	900c      	str	r0, [sp, #48]	; 0x30
 800624c:	e7b2      	b.n	80061b4 <_dtoa_r+0x1b4>
 800624e:	9b05      	ldr	r3, [sp, #20]
 8006250:	eba3 030b 	sub.w	r3, r3, fp
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	f1cb 0300 	rsb	r3, fp, #0
 800625a:	9308      	str	r3, [sp, #32]
 800625c:	2300      	movs	r3, #0
 800625e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006260:	e7bf      	b.n	80061e2 <_dtoa_r+0x1e2>
 8006262:	2300      	movs	r3, #0
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006268:	2b00      	cmp	r3, #0
 800626a:	dc52      	bgt.n	8006312 <_dtoa_r+0x312>
 800626c:	2301      	movs	r3, #1
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	461a      	mov	r2, r3
 8006274:	920a      	str	r2, [sp, #40]	; 0x28
 8006276:	e00b      	b.n	8006290 <_dtoa_r+0x290>
 8006278:	2301      	movs	r3, #1
 800627a:	e7f3      	b.n	8006264 <_dtoa_r+0x264>
 800627c:	2300      	movs	r3, #0
 800627e:	9309      	str	r3, [sp, #36]	; 0x24
 8006280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006282:	445b      	add	r3, fp
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	3301      	adds	r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	bfb8      	it	lt
 800628e:	2301      	movlt	r3, #1
 8006290:	69e0      	ldr	r0, [r4, #28]
 8006292:	2100      	movs	r1, #0
 8006294:	2204      	movs	r2, #4
 8006296:	f102 0614 	add.w	r6, r2, #20
 800629a:	429e      	cmp	r6, r3
 800629c:	d93d      	bls.n	800631a <_dtoa_r+0x31a>
 800629e:	6041      	str	r1, [r0, #4]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fd9f 	bl	8006de4 <_Balloc>
 80062a6:	9000      	str	r0, [sp, #0]
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d139      	bne.n	8006320 <_dtoa_r+0x320>
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <_dtoa_r+0x308>)
 80062ae:	4602      	mov	r2, r0
 80062b0:	f240 11af 	movw	r1, #431	; 0x1af
 80062b4:	e6bd      	b.n	8006032 <_dtoa_r+0x32>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e7e1      	b.n	800627e <_dtoa_r+0x27e>
 80062ba:	2501      	movs	r5, #1
 80062bc:	2300      	movs	r3, #0
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	9509      	str	r5, [sp, #36]	; 0x24
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	2200      	movs	r2, #0
 80062cc:	2312      	movs	r3, #18
 80062ce:	e7d1      	b.n	8006274 <_dtoa_r+0x274>
 80062d0:	636f4361 	.word	0x636f4361
 80062d4:	3fd287a7 	.word	0x3fd287a7
 80062d8:	8b60c8b3 	.word	0x8b60c8b3
 80062dc:	3fc68a28 	.word	0x3fc68a28
 80062e0:	509f79fb 	.word	0x509f79fb
 80062e4:	3fd34413 	.word	0x3fd34413
 80062e8:	0800801c 	.word	0x0800801c
 80062ec:	080080d6 	.word	0x080080d6
 80062f0:	7ff00000 	.word	0x7ff00000
 80062f4:	080080d2 	.word	0x080080d2
 80062f8:	080080c9 	.word	0x080080c9
 80062fc:	08007ff9 	.word	0x08007ff9
 8006300:	3ff80000 	.word	0x3ff80000
 8006304:	080081c0 	.word	0x080081c0
 8006308:	0800812e 	.word	0x0800812e
 800630c:	2301      	movs	r3, #1
 800630e:	9309      	str	r3, [sp, #36]	; 0x24
 8006310:	e7d7      	b.n	80062c2 <_dtoa_r+0x2c2>
 8006312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	9304      	str	r3, [sp, #16]
 8006318:	e7ba      	b.n	8006290 <_dtoa_r+0x290>
 800631a:	3101      	adds	r1, #1
 800631c:	0052      	lsls	r2, r2, #1
 800631e:	e7ba      	b.n	8006296 <_dtoa_r+0x296>
 8006320:	69e3      	ldr	r3, [r4, #28]
 8006322:	9a00      	ldr	r2, [sp, #0]
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	2b0e      	cmp	r3, #14
 800632a:	f200 80a8 	bhi.w	800647e <_dtoa_r+0x47e>
 800632e:	2d00      	cmp	r5, #0
 8006330:	f000 80a5 	beq.w	800647e <_dtoa_r+0x47e>
 8006334:	f1bb 0f00 	cmp.w	fp, #0
 8006338:	dd38      	ble.n	80063ac <_dtoa_r+0x3ac>
 800633a:	4bc0      	ldr	r3, [pc, #768]	; (800663c <_dtoa_r+0x63c>)
 800633c:	f00b 020f 	and.w	r2, fp, #15
 8006340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006344:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006348:	e9d3 6700 	ldrd	r6, r7, [r3]
 800634c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006350:	d019      	beq.n	8006386 <_dtoa_r+0x386>
 8006352:	4bbb      	ldr	r3, [pc, #748]	; (8006640 <_dtoa_r+0x640>)
 8006354:	ec51 0b18 	vmov	r0, r1, d8
 8006358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800635c:	f7fa faa6 	bl	80008ac <__aeabi_ddiv>
 8006360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006364:	f008 080f 	and.w	r8, r8, #15
 8006368:	2503      	movs	r5, #3
 800636a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006640 <_dtoa_r+0x640>
 800636e:	f1b8 0f00 	cmp.w	r8, #0
 8006372:	d10a      	bne.n	800638a <_dtoa_r+0x38a>
 8006374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006378:	4632      	mov	r2, r6
 800637a:	463b      	mov	r3, r7
 800637c:	f7fa fa96 	bl	80008ac <__aeabi_ddiv>
 8006380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006384:	e02b      	b.n	80063de <_dtoa_r+0x3de>
 8006386:	2502      	movs	r5, #2
 8006388:	e7ef      	b.n	800636a <_dtoa_r+0x36a>
 800638a:	f018 0f01 	tst.w	r8, #1
 800638e:	d008      	beq.n	80063a2 <_dtoa_r+0x3a2>
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006398:	f7fa f95e 	bl	8000658 <__aeabi_dmul>
 800639c:	3501      	adds	r5, #1
 800639e:	4606      	mov	r6, r0
 80063a0:	460f      	mov	r7, r1
 80063a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80063a6:	f109 0908 	add.w	r9, r9, #8
 80063aa:	e7e0      	b.n	800636e <_dtoa_r+0x36e>
 80063ac:	f000 809f 	beq.w	80064ee <_dtoa_r+0x4ee>
 80063b0:	f1cb 0600 	rsb	r6, fp, #0
 80063b4:	4ba1      	ldr	r3, [pc, #644]	; (800663c <_dtoa_r+0x63c>)
 80063b6:	4fa2      	ldr	r7, [pc, #648]	; (8006640 <_dtoa_r+0x640>)
 80063b8:	f006 020f 	and.w	r2, r6, #15
 80063bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	ec51 0b18 	vmov	r0, r1, d8
 80063c8:	f7fa f946 	bl	8000658 <__aeabi_dmul>
 80063cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d0:	1136      	asrs	r6, r6, #4
 80063d2:	2300      	movs	r3, #0
 80063d4:	2502      	movs	r5, #2
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	d17e      	bne.n	80064d8 <_dtoa_r+0x4d8>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1d0      	bne.n	8006380 <_dtoa_r+0x380>
 80063de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8084 	beq.w	80064f2 <_dtoa_r+0x4f2>
 80063ea:	4b96      	ldr	r3, [pc, #600]	; (8006644 <_dtoa_r+0x644>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f7fa fba3 	bl	8000b3c <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d07b      	beq.n	80064f2 <_dtoa_r+0x4f2>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d078      	beq.n	80064f2 <_dtoa_r+0x4f2>
 8006400:	9b01      	ldr	r3, [sp, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	dd39      	ble.n	800647a <_dtoa_r+0x47a>
 8006406:	4b90      	ldr	r3, [pc, #576]	; (8006648 <_dtoa_r+0x648>)
 8006408:	2200      	movs	r2, #0
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	f7fa f923 	bl	8000658 <__aeabi_dmul>
 8006412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006416:	9e01      	ldr	r6, [sp, #4]
 8006418:	f10b 37ff 	add.w	r7, fp, #4294967295
 800641c:	3501      	adds	r5, #1
 800641e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006422:	4628      	mov	r0, r5
 8006424:	f7fa f8ae 	bl	8000584 <__aeabi_i2d>
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	f7fa f914 	bl	8000658 <__aeabi_dmul>
 8006430:	4b86      	ldr	r3, [pc, #536]	; (800664c <_dtoa_r+0x64c>)
 8006432:	2200      	movs	r2, #0
 8006434:	f7f9 ff5a 	bl	80002ec <__adddf3>
 8006438:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800643c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	2e00      	cmp	r6, #0
 8006444:	d158      	bne.n	80064f8 <_dtoa_r+0x4f8>
 8006446:	4b82      	ldr	r3, [pc, #520]	; (8006650 <_dtoa_r+0x650>)
 8006448:	2200      	movs	r2, #0
 800644a:	4640      	mov	r0, r8
 800644c:	4649      	mov	r1, r9
 800644e:	f7f9 ff4b 	bl	80002e8 <__aeabi_dsub>
 8006452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006456:	4680      	mov	r8, r0
 8006458:	4689      	mov	r9, r1
 800645a:	f7fa fb8d 	bl	8000b78 <__aeabi_dcmpgt>
 800645e:	2800      	cmp	r0, #0
 8006460:	f040 8296 	bne.w	8006990 <_dtoa_r+0x990>
 8006464:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006468:	4640      	mov	r0, r8
 800646a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa fb64 	bl	8000b3c <__aeabi_dcmplt>
 8006474:	2800      	cmp	r0, #0
 8006476:	f040 8289 	bne.w	800698c <_dtoa_r+0x98c>
 800647a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800647e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006480:	2b00      	cmp	r3, #0
 8006482:	f2c0 814e 	blt.w	8006722 <_dtoa_r+0x722>
 8006486:	f1bb 0f0e 	cmp.w	fp, #14
 800648a:	f300 814a 	bgt.w	8006722 <_dtoa_r+0x722>
 800648e:	4b6b      	ldr	r3, [pc, #428]	; (800663c <_dtoa_r+0x63c>)
 8006490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	f280 80dc 	bge.w	8006658 <_dtoa_r+0x658>
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f300 80d8 	bgt.w	8006658 <_dtoa_r+0x658>
 80064a8:	f040 826f 	bne.w	800698a <_dtoa_r+0x98a>
 80064ac:	4b68      	ldr	r3, [pc, #416]	; (8006650 <_dtoa_r+0x650>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	f7fa f8d0 	bl	8000658 <__aeabi_dmul>
 80064b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064bc:	f7fa fb52 	bl	8000b64 <__aeabi_dcmpge>
 80064c0:	9e04      	ldr	r6, [sp, #16]
 80064c2:	4637      	mov	r7, r6
 80064c4:	2800      	cmp	r0, #0
 80064c6:	f040 8245 	bne.w	8006954 <_dtoa_r+0x954>
 80064ca:	9d00      	ldr	r5, [sp, #0]
 80064cc:	2331      	movs	r3, #49	; 0x31
 80064ce:	f805 3b01 	strb.w	r3, [r5], #1
 80064d2:	f10b 0b01 	add.w	fp, fp, #1
 80064d6:	e241      	b.n	800695c <_dtoa_r+0x95c>
 80064d8:	07f2      	lsls	r2, r6, #31
 80064da:	d505      	bpl.n	80064e8 <_dtoa_r+0x4e8>
 80064dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e0:	f7fa f8ba 	bl	8000658 <__aeabi_dmul>
 80064e4:	3501      	adds	r5, #1
 80064e6:	2301      	movs	r3, #1
 80064e8:	1076      	asrs	r6, r6, #1
 80064ea:	3708      	adds	r7, #8
 80064ec:	e773      	b.n	80063d6 <_dtoa_r+0x3d6>
 80064ee:	2502      	movs	r5, #2
 80064f0:	e775      	b.n	80063de <_dtoa_r+0x3de>
 80064f2:	9e04      	ldr	r6, [sp, #16]
 80064f4:	465f      	mov	r7, fp
 80064f6:	e792      	b.n	800641e <_dtoa_r+0x41e>
 80064f8:	9900      	ldr	r1, [sp, #0]
 80064fa:	4b50      	ldr	r3, [pc, #320]	; (800663c <_dtoa_r+0x63c>)
 80064fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006500:	4431      	add	r1, r6
 8006502:	9102      	str	r1, [sp, #8]
 8006504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006506:	eeb0 9a47 	vmov.f32	s18, s14
 800650a:	eef0 9a67 	vmov.f32	s19, s15
 800650e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006516:	2900      	cmp	r1, #0
 8006518:	d044      	beq.n	80065a4 <_dtoa_r+0x5a4>
 800651a:	494e      	ldr	r1, [pc, #312]	; (8006654 <_dtoa_r+0x654>)
 800651c:	2000      	movs	r0, #0
 800651e:	f7fa f9c5 	bl	80008ac <__aeabi_ddiv>
 8006522:	ec53 2b19 	vmov	r2, r3, d9
 8006526:	f7f9 fedf 	bl	80002e8 <__aeabi_dsub>
 800652a:	9d00      	ldr	r5, [sp, #0]
 800652c:	ec41 0b19 	vmov	d9, r0, r1
 8006530:	4649      	mov	r1, r9
 8006532:	4640      	mov	r0, r8
 8006534:	f7fa fb40 	bl	8000bb8 <__aeabi_d2iz>
 8006538:	4606      	mov	r6, r0
 800653a:	f7fa f823 	bl	8000584 <__aeabi_i2d>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7f9 fecf 	bl	80002e8 <__aeabi_dsub>
 800654a:	3630      	adds	r6, #48	; 0x30
 800654c:	f805 6b01 	strb.w	r6, [r5], #1
 8006550:	ec53 2b19 	vmov	r2, r3, d9
 8006554:	4680      	mov	r8, r0
 8006556:	4689      	mov	r9, r1
 8006558:	f7fa faf0 	bl	8000b3c <__aeabi_dcmplt>
 800655c:	2800      	cmp	r0, #0
 800655e:	d164      	bne.n	800662a <_dtoa_r+0x62a>
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	4937      	ldr	r1, [pc, #220]	; (8006644 <_dtoa_r+0x644>)
 8006566:	2000      	movs	r0, #0
 8006568:	f7f9 febe 	bl	80002e8 <__aeabi_dsub>
 800656c:	ec53 2b19 	vmov	r2, r3, d9
 8006570:	f7fa fae4 	bl	8000b3c <__aeabi_dcmplt>
 8006574:	2800      	cmp	r0, #0
 8006576:	f040 80b6 	bne.w	80066e6 <_dtoa_r+0x6e6>
 800657a:	9b02      	ldr	r3, [sp, #8]
 800657c:	429d      	cmp	r5, r3
 800657e:	f43f af7c 	beq.w	800647a <_dtoa_r+0x47a>
 8006582:	4b31      	ldr	r3, [pc, #196]	; (8006648 <_dtoa_r+0x648>)
 8006584:	ec51 0b19 	vmov	r0, r1, d9
 8006588:	2200      	movs	r2, #0
 800658a:	f7fa f865 	bl	8000658 <__aeabi_dmul>
 800658e:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <_dtoa_r+0x648>)
 8006590:	ec41 0b19 	vmov	d9, r0, r1
 8006594:	2200      	movs	r2, #0
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa f85d 	bl	8000658 <__aeabi_dmul>
 800659e:	4680      	mov	r8, r0
 80065a0:	4689      	mov	r9, r1
 80065a2:	e7c5      	b.n	8006530 <_dtoa_r+0x530>
 80065a4:	ec51 0b17 	vmov	r0, r1, d7
 80065a8:	f7fa f856 	bl	8000658 <__aeabi_dmul>
 80065ac:	9b02      	ldr	r3, [sp, #8]
 80065ae:	9d00      	ldr	r5, [sp, #0]
 80065b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065b2:	ec41 0b19 	vmov	d9, r0, r1
 80065b6:	4649      	mov	r1, r9
 80065b8:	4640      	mov	r0, r8
 80065ba:	f7fa fafd 	bl	8000bb8 <__aeabi_d2iz>
 80065be:	4606      	mov	r6, r0
 80065c0:	f7f9 ffe0 	bl	8000584 <__aeabi_i2d>
 80065c4:	3630      	adds	r6, #48	; 0x30
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7f9 fe8b 	bl	80002e8 <__aeabi_dsub>
 80065d2:	f805 6b01 	strb.w	r6, [r5], #1
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	429d      	cmp	r5, r3
 80065da:	4680      	mov	r8, r0
 80065dc:	4689      	mov	r9, r1
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	d124      	bne.n	800662e <_dtoa_r+0x62e>
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <_dtoa_r+0x654>)
 80065e6:	ec51 0b19 	vmov	r0, r1, d9
 80065ea:	f7f9 fe7f 	bl	80002ec <__adddf3>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	f7fa fabf 	bl	8000b78 <__aeabi_dcmpgt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d173      	bne.n	80066e6 <_dtoa_r+0x6e6>
 80065fe:	ec53 2b19 	vmov	r2, r3, d9
 8006602:	4914      	ldr	r1, [pc, #80]	; (8006654 <_dtoa_r+0x654>)
 8006604:	2000      	movs	r0, #0
 8006606:	f7f9 fe6f 	bl	80002e8 <__aeabi_dsub>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7fa fa93 	bl	8000b3c <__aeabi_dcmplt>
 8006616:	2800      	cmp	r0, #0
 8006618:	f43f af2f 	beq.w	800647a <_dtoa_r+0x47a>
 800661c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800661e:	1e6b      	subs	r3, r5, #1
 8006620:	930f      	str	r3, [sp, #60]	; 0x3c
 8006622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006626:	2b30      	cmp	r3, #48	; 0x30
 8006628:	d0f8      	beq.n	800661c <_dtoa_r+0x61c>
 800662a:	46bb      	mov	fp, r7
 800662c:	e04a      	b.n	80066c4 <_dtoa_r+0x6c4>
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <_dtoa_r+0x648>)
 8006630:	f7fa f812 	bl	8000658 <__aeabi_dmul>
 8006634:	4680      	mov	r8, r0
 8006636:	4689      	mov	r9, r1
 8006638:	e7bd      	b.n	80065b6 <_dtoa_r+0x5b6>
 800663a:	bf00      	nop
 800663c:	080081c0 	.word	0x080081c0
 8006640:	08008198 	.word	0x08008198
 8006644:	3ff00000 	.word	0x3ff00000
 8006648:	40240000 	.word	0x40240000
 800664c:	401c0000 	.word	0x401c0000
 8006650:	40140000 	.word	0x40140000
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800665c:	9d00      	ldr	r5, [sp, #0]
 800665e:	4642      	mov	r2, r8
 8006660:	464b      	mov	r3, r9
 8006662:	4630      	mov	r0, r6
 8006664:	4639      	mov	r1, r7
 8006666:	f7fa f921 	bl	80008ac <__aeabi_ddiv>
 800666a:	f7fa faa5 	bl	8000bb8 <__aeabi_d2iz>
 800666e:	9001      	str	r0, [sp, #4]
 8006670:	f7f9 ff88 	bl	8000584 <__aeabi_i2d>
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	f7f9 ffee 	bl	8000658 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f7f9 fe30 	bl	80002e8 <__aeabi_dsub>
 8006688:	9e01      	ldr	r6, [sp, #4]
 800668a:	9f04      	ldr	r7, [sp, #16]
 800668c:	3630      	adds	r6, #48	; 0x30
 800668e:	f805 6b01 	strb.w	r6, [r5], #1
 8006692:	9e00      	ldr	r6, [sp, #0]
 8006694:	1bae      	subs	r6, r5, r6
 8006696:	42b7      	cmp	r7, r6
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	d134      	bne.n	8006708 <_dtoa_r+0x708>
 800669e:	f7f9 fe25 	bl	80002ec <__adddf3>
 80066a2:	4642      	mov	r2, r8
 80066a4:	464b      	mov	r3, r9
 80066a6:	4606      	mov	r6, r0
 80066a8:	460f      	mov	r7, r1
 80066aa:	f7fa fa65 	bl	8000b78 <__aeabi_dcmpgt>
 80066ae:	b9c8      	cbnz	r0, 80066e4 <_dtoa_r+0x6e4>
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7fa fa36 	bl	8000b28 <__aeabi_dcmpeq>
 80066bc:	b110      	cbz	r0, 80066c4 <_dtoa_r+0x6c4>
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	07db      	lsls	r3, r3, #31
 80066c2:	d40f      	bmi.n	80066e4 <_dtoa_r+0x6e4>
 80066c4:	4651      	mov	r1, sl
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fbcc 	bl	8006e64 <_Bfree>
 80066cc:	2300      	movs	r3, #0
 80066ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066d0:	702b      	strb	r3, [r5, #0]
 80066d2:	f10b 0301 	add.w	r3, fp, #1
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f43f ace2 	beq.w	80060a4 <_dtoa_r+0xa4>
 80066e0:	601d      	str	r5, [r3, #0]
 80066e2:	e4df      	b.n	80060a4 <_dtoa_r+0xa4>
 80066e4:	465f      	mov	r7, fp
 80066e6:	462b      	mov	r3, r5
 80066e8:	461d      	mov	r5, r3
 80066ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ee:	2a39      	cmp	r2, #57	; 0x39
 80066f0:	d106      	bne.n	8006700 <_dtoa_r+0x700>
 80066f2:	9a00      	ldr	r2, [sp, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d1f7      	bne.n	80066e8 <_dtoa_r+0x6e8>
 80066f8:	9900      	ldr	r1, [sp, #0]
 80066fa:	2230      	movs	r2, #48	; 0x30
 80066fc:	3701      	adds	r7, #1
 80066fe:	700a      	strb	r2, [r1, #0]
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	3201      	adds	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e790      	b.n	800662a <_dtoa_r+0x62a>
 8006708:	4ba3      	ldr	r3, [pc, #652]	; (8006998 <_dtoa_r+0x998>)
 800670a:	2200      	movs	r2, #0
 800670c:	f7f9 ffa4 	bl	8000658 <__aeabi_dmul>
 8006710:	2200      	movs	r2, #0
 8006712:	2300      	movs	r3, #0
 8006714:	4606      	mov	r6, r0
 8006716:	460f      	mov	r7, r1
 8006718:	f7fa fa06 	bl	8000b28 <__aeabi_dcmpeq>
 800671c:	2800      	cmp	r0, #0
 800671e:	d09e      	beq.n	800665e <_dtoa_r+0x65e>
 8006720:	e7d0      	b.n	80066c4 <_dtoa_r+0x6c4>
 8006722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006724:	2a00      	cmp	r2, #0
 8006726:	f000 80ca 	beq.w	80068be <_dtoa_r+0x8be>
 800672a:	9a07      	ldr	r2, [sp, #28]
 800672c:	2a01      	cmp	r2, #1
 800672e:	f300 80ad 	bgt.w	800688c <_dtoa_r+0x88c>
 8006732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006734:	2a00      	cmp	r2, #0
 8006736:	f000 80a5 	beq.w	8006884 <_dtoa_r+0x884>
 800673a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800673e:	9e08      	ldr	r6, [sp, #32]
 8006740:	9d05      	ldr	r5, [sp, #20]
 8006742:	9a05      	ldr	r2, [sp, #20]
 8006744:	441a      	add	r2, r3
 8006746:	9205      	str	r2, [sp, #20]
 8006748:	9a06      	ldr	r2, [sp, #24]
 800674a:	2101      	movs	r1, #1
 800674c:	441a      	add	r2, r3
 800674e:	4620      	mov	r0, r4
 8006750:	9206      	str	r2, [sp, #24]
 8006752:	f000 fc3d 	bl	8006fd0 <__i2b>
 8006756:	4607      	mov	r7, r0
 8006758:	b165      	cbz	r5, 8006774 <_dtoa_r+0x774>
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dd09      	ble.n	8006774 <_dtoa_r+0x774>
 8006760:	42ab      	cmp	r3, r5
 8006762:	9a05      	ldr	r2, [sp, #20]
 8006764:	bfa8      	it	ge
 8006766:	462b      	movge	r3, r5
 8006768:	1ad2      	subs	r2, r2, r3
 800676a:	9205      	str	r2, [sp, #20]
 800676c:	9a06      	ldr	r2, [sp, #24]
 800676e:	1aed      	subs	r5, r5, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	9306      	str	r3, [sp, #24]
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	b1f3      	cbz	r3, 80067b6 <_dtoa_r+0x7b6>
 8006778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 80a3 	beq.w	80068c6 <_dtoa_r+0x8c6>
 8006780:	2e00      	cmp	r6, #0
 8006782:	dd10      	ble.n	80067a6 <_dtoa_r+0x7a6>
 8006784:	4639      	mov	r1, r7
 8006786:	4632      	mov	r2, r6
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fce1 	bl	8007150 <__pow5mult>
 800678e:	4652      	mov	r2, sl
 8006790:	4601      	mov	r1, r0
 8006792:	4607      	mov	r7, r0
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fc31 	bl	8006ffc <__multiply>
 800679a:	4651      	mov	r1, sl
 800679c:	4680      	mov	r8, r0
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 fb60 	bl	8006e64 <_Bfree>
 80067a4:	46c2      	mov	sl, r8
 80067a6:	9b08      	ldr	r3, [sp, #32]
 80067a8:	1b9a      	subs	r2, r3, r6
 80067aa:	d004      	beq.n	80067b6 <_dtoa_r+0x7b6>
 80067ac:	4651      	mov	r1, sl
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fcce 	bl	8007150 <__pow5mult>
 80067b4:	4682      	mov	sl, r0
 80067b6:	2101      	movs	r1, #1
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fc09 	bl	8006fd0 <__i2b>
 80067be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	4606      	mov	r6, r0
 80067c4:	f340 8081 	ble.w	80068ca <_dtoa_r+0x8ca>
 80067c8:	461a      	mov	r2, r3
 80067ca:	4601      	mov	r1, r0
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fcbf 	bl	8007150 <__pow5mult>
 80067d2:	9b07      	ldr	r3, [sp, #28]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	4606      	mov	r6, r0
 80067d8:	dd7a      	ble.n	80068d0 <_dtoa_r+0x8d0>
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	6933      	ldr	r3, [r6, #16]
 80067e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067e4:	6918      	ldr	r0, [r3, #16]
 80067e6:	f000 fba5 	bl	8006f34 <__hi0bits>
 80067ea:	f1c0 0020 	rsb	r0, r0, #32
 80067ee:	9b06      	ldr	r3, [sp, #24]
 80067f0:	4418      	add	r0, r3
 80067f2:	f010 001f 	ands.w	r0, r0, #31
 80067f6:	f000 8094 	beq.w	8006922 <_dtoa_r+0x922>
 80067fa:	f1c0 0320 	rsb	r3, r0, #32
 80067fe:	2b04      	cmp	r3, #4
 8006800:	f340 8085 	ble.w	800690e <_dtoa_r+0x90e>
 8006804:	9b05      	ldr	r3, [sp, #20]
 8006806:	f1c0 001c 	rsb	r0, r0, #28
 800680a:	4403      	add	r3, r0
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	4403      	add	r3, r0
 8006812:	4405      	add	r5, r0
 8006814:	9306      	str	r3, [sp, #24]
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dd05      	ble.n	8006828 <_dtoa_r+0x828>
 800681c:	4651      	mov	r1, sl
 800681e:	461a      	mov	r2, r3
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fcef 	bl	8007204 <__lshift>
 8006826:	4682      	mov	sl, r0
 8006828:	9b06      	ldr	r3, [sp, #24]
 800682a:	2b00      	cmp	r3, #0
 800682c:	dd05      	ble.n	800683a <_dtoa_r+0x83a>
 800682e:	4631      	mov	r1, r6
 8006830:	461a      	mov	r2, r3
 8006832:	4620      	mov	r0, r4
 8006834:	f000 fce6 	bl	8007204 <__lshift>
 8006838:	4606      	mov	r6, r0
 800683a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d072      	beq.n	8006926 <_dtoa_r+0x926>
 8006840:	4631      	mov	r1, r6
 8006842:	4650      	mov	r0, sl
 8006844:	f000 fd4a 	bl	80072dc <__mcmp>
 8006848:	2800      	cmp	r0, #0
 800684a:	da6c      	bge.n	8006926 <_dtoa_r+0x926>
 800684c:	2300      	movs	r3, #0
 800684e:	4651      	mov	r1, sl
 8006850:	220a      	movs	r2, #10
 8006852:	4620      	mov	r0, r4
 8006854:	f000 fb28 	bl	8006ea8 <__multadd>
 8006858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800685e:	4682      	mov	sl, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 81b0 	beq.w	8006bc6 <_dtoa_r+0xbc6>
 8006866:	2300      	movs	r3, #0
 8006868:	4639      	mov	r1, r7
 800686a:	220a      	movs	r2, #10
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fb1b 	bl	8006ea8 <__multadd>
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	4607      	mov	r7, r0
 8006878:	f300 8096 	bgt.w	80069a8 <_dtoa_r+0x9a8>
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	2b02      	cmp	r3, #2
 8006880:	dc59      	bgt.n	8006936 <_dtoa_r+0x936>
 8006882:	e091      	b.n	80069a8 <_dtoa_r+0x9a8>
 8006884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800688a:	e758      	b.n	800673e <_dtoa_r+0x73e>
 800688c:	9b04      	ldr	r3, [sp, #16]
 800688e:	1e5e      	subs	r6, r3, #1
 8006890:	9b08      	ldr	r3, [sp, #32]
 8006892:	42b3      	cmp	r3, r6
 8006894:	bfbf      	itttt	lt
 8006896:	9b08      	ldrlt	r3, [sp, #32]
 8006898:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800689a:	9608      	strlt	r6, [sp, #32]
 800689c:	1af3      	sublt	r3, r6, r3
 800689e:	bfb4      	ite	lt
 80068a0:	18d2      	addlt	r2, r2, r3
 80068a2:	1b9e      	subge	r6, r3, r6
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	bfbc      	itt	lt
 80068a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80068aa:	2600      	movlt	r6, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfb7      	itett	lt
 80068b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80068b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80068b8:	1a9d      	sublt	r5, r3, r2
 80068ba:	2300      	movlt	r3, #0
 80068bc:	e741      	b.n	8006742 <_dtoa_r+0x742>
 80068be:	9e08      	ldr	r6, [sp, #32]
 80068c0:	9d05      	ldr	r5, [sp, #20]
 80068c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068c4:	e748      	b.n	8006758 <_dtoa_r+0x758>
 80068c6:	9a08      	ldr	r2, [sp, #32]
 80068c8:	e770      	b.n	80067ac <_dtoa_r+0x7ac>
 80068ca:	9b07      	ldr	r3, [sp, #28]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	dc19      	bgt.n	8006904 <_dtoa_r+0x904>
 80068d0:	9b02      	ldr	r3, [sp, #8]
 80068d2:	b9bb      	cbnz	r3, 8006904 <_dtoa_r+0x904>
 80068d4:	9b03      	ldr	r3, [sp, #12]
 80068d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068da:	b99b      	cbnz	r3, 8006904 <_dtoa_r+0x904>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e2:	0d1b      	lsrs	r3, r3, #20
 80068e4:	051b      	lsls	r3, r3, #20
 80068e6:	b183      	cbz	r3, 800690a <_dtoa_r+0x90a>
 80068e8:	9b05      	ldr	r3, [sp, #20]
 80068ea:	3301      	adds	r3, #1
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	9b06      	ldr	r3, [sp, #24]
 80068f0:	3301      	adds	r3, #1
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	f04f 0801 	mov.w	r8, #1
 80068f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f47f af6f 	bne.w	80067de <_dtoa_r+0x7de>
 8006900:	2001      	movs	r0, #1
 8006902:	e774      	b.n	80067ee <_dtoa_r+0x7ee>
 8006904:	f04f 0800 	mov.w	r8, #0
 8006908:	e7f6      	b.n	80068f8 <_dtoa_r+0x8f8>
 800690a:	4698      	mov	r8, r3
 800690c:	e7f4      	b.n	80068f8 <_dtoa_r+0x8f8>
 800690e:	d082      	beq.n	8006816 <_dtoa_r+0x816>
 8006910:	9a05      	ldr	r2, [sp, #20]
 8006912:	331c      	adds	r3, #28
 8006914:	441a      	add	r2, r3
 8006916:	9205      	str	r2, [sp, #20]
 8006918:	9a06      	ldr	r2, [sp, #24]
 800691a:	441a      	add	r2, r3
 800691c:	441d      	add	r5, r3
 800691e:	9206      	str	r2, [sp, #24]
 8006920:	e779      	b.n	8006816 <_dtoa_r+0x816>
 8006922:	4603      	mov	r3, r0
 8006924:	e7f4      	b.n	8006910 <_dtoa_r+0x910>
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	dc37      	bgt.n	800699c <_dtoa_r+0x99c>
 800692c:	9b07      	ldr	r3, [sp, #28]
 800692e:	2b02      	cmp	r3, #2
 8006930:	dd34      	ble.n	800699c <_dtoa_r+0x99c>
 8006932:	9b04      	ldr	r3, [sp, #16]
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	b963      	cbnz	r3, 8006954 <_dtoa_r+0x954>
 800693a:	4631      	mov	r1, r6
 800693c:	2205      	movs	r2, #5
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fab2 	bl	8006ea8 <__multadd>
 8006944:	4601      	mov	r1, r0
 8006946:	4606      	mov	r6, r0
 8006948:	4650      	mov	r0, sl
 800694a:	f000 fcc7 	bl	80072dc <__mcmp>
 800694e:	2800      	cmp	r0, #0
 8006950:	f73f adbb 	bgt.w	80064ca <_dtoa_r+0x4ca>
 8006954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006956:	9d00      	ldr	r5, [sp, #0]
 8006958:	ea6f 0b03 	mvn.w	fp, r3
 800695c:	f04f 0800 	mov.w	r8, #0
 8006960:	4631      	mov	r1, r6
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fa7e 	bl	8006e64 <_Bfree>
 8006968:	2f00      	cmp	r7, #0
 800696a:	f43f aeab 	beq.w	80066c4 <_dtoa_r+0x6c4>
 800696e:	f1b8 0f00 	cmp.w	r8, #0
 8006972:	d005      	beq.n	8006980 <_dtoa_r+0x980>
 8006974:	45b8      	cmp	r8, r7
 8006976:	d003      	beq.n	8006980 <_dtoa_r+0x980>
 8006978:	4641      	mov	r1, r8
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fa72 	bl	8006e64 <_Bfree>
 8006980:	4639      	mov	r1, r7
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fa6e 	bl	8006e64 <_Bfree>
 8006988:	e69c      	b.n	80066c4 <_dtoa_r+0x6c4>
 800698a:	2600      	movs	r6, #0
 800698c:	4637      	mov	r7, r6
 800698e:	e7e1      	b.n	8006954 <_dtoa_r+0x954>
 8006990:	46bb      	mov	fp, r7
 8006992:	4637      	mov	r7, r6
 8006994:	e599      	b.n	80064ca <_dtoa_r+0x4ca>
 8006996:	bf00      	nop
 8006998:	40240000 	.word	0x40240000
 800699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80c8 	beq.w	8006b34 <_dtoa_r+0xb34>
 80069a4:	9b04      	ldr	r3, [sp, #16]
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	dd05      	ble.n	80069b8 <_dtoa_r+0x9b8>
 80069ac:	4639      	mov	r1, r7
 80069ae:	462a      	mov	r2, r5
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fc27 	bl	8007204 <__lshift>
 80069b6:	4607      	mov	r7, r0
 80069b8:	f1b8 0f00 	cmp.w	r8, #0
 80069bc:	d05b      	beq.n	8006a76 <_dtoa_r+0xa76>
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fa0f 	bl	8006de4 <_Balloc>
 80069c6:	4605      	mov	r5, r0
 80069c8:	b928      	cbnz	r0, 80069d6 <_dtoa_r+0x9d6>
 80069ca:	4b83      	ldr	r3, [pc, #524]	; (8006bd8 <_dtoa_r+0xbd8>)
 80069cc:	4602      	mov	r2, r0
 80069ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80069d2:	f7ff bb2e 	b.w	8006032 <_dtoa_r+0x32>
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	3202      	adds	r2, #2
 80069da:	0092      	lsls	r2, r2, #2
 80069dc:	f107 010c 	add.w	r1, r7, #12
 80069e0:	300c      	adds	r0, #12
 80069e2:	f001 f985 	bl	8007cf0 <memcpy>
 80069e6:	2201      	movs	r2, #1
 80069e8:	4629      	mov	r1, r5
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 fc0a 	bl	8007204 <__lshift>
 80069f0:	9b00      	ldr	r3, [sp, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	9304      	str	r3, [sp, #16]
 80069f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069fa:	4413      	add	r3, r2
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	46b8      	mov	r8, r7
 8006a06:	9306      	str	r3, [sp, #24]
 8006a08:	4607      	mov	r7, r0
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4650      	mov	r0, sl
 8006a12:	9301      	str	r3, [sp, #4]
 8006a14:	f7ff fa6a 	bl	8005eec <quorem>
 8006a18:	4641      	mov	r1, r8
 8006a1a:	9002      	str	r0, [sp, #8]
 8006a1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a20:	4650      	mov	r0, sl
 8006a22:	f000 fc5b 	bl	80072dc <__mcmp>
 8006a26:	463a      	mov	r2, r7
 8006a28:	9005      	str	r0, [sp, #20]
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fc71 	bl	8007314 <__mdiff>
 8006a32:	68c2      	ldr	r2, [r0, #12]
 8006a34:	4605      	mov	r5, r0
 8006a36:	bb02      	cbnz	r2, 8006a7a <_dtoa_r+0xa7a>
 8006a38:	4601      	mov	r1, r0
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	f000 fc4e 	bl	80072dc <__mcmp>
 8006a40:	4602      	mov	r2, r0
 8006a42:	4629      	mov	r1, r5
 8006a44:	4620      	mov	r0, r4
 8006a46:	9209      	str	r2, [sp, #36]	; 0x24
 8006a48:	f000 fa0c 	bl	8006e64 <_Bfree>
 8006a4c:	9b07      	ldr	r3, [sp, #28]
 8006a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a50:	9d04      	ldr	r5, [sp, #16]
 8006a52:	ea43 0102 	orr.w	r1, r3, r2
 8006a56:	9b06      	ldr	r3, [sp, #24]
 8006a58:	4319      	orrs	r1, r3
 8006a5a:	d110      	bne.n	8006a7e <_dtoa_r+0xa7e>
 8006a5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a60:	d029      	beq.n	8006ab6 <_dtoa_r+0xab6>
 8006a62:	9b05      	ldr	r3, [sp, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd02      	ble.n	8006a6e <_dtoa_r+0xa6e>
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	f883 9000 	strb.w	r9, [r3]
 8006a74:	e774      	b.n	8006960 <_dtoa_r+0x960>
 8006a76:	4638      	mov	r0, r7
 8006a78:	e7ba      	b.n	80069f0 <_dtoa_r+0x9f0>
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	e7e1      	b.n	8006a42 <_dtoa_r+0xa42>
 8006a7e:	9b05      	ldr	r3, [sp, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	db04      	blt.n	8006a8e <_dtoa_r+0xa8e>
 8006a84:	9907      	ldr	r1, [sp, #28]
 8006a86:	430b      	orrs	r3, r1
 8006a88:	9906      	ldr	r1, [sp, #24]
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	d120      	bne.n	8006ad0 <_dtoa_r+0xad0>
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	dded      	ble.n	8006a6e <_dtoa_r+0xa6e>
 8006a92:	4651      	mov	r1, sl
 8006a94:	2201      	movs	r2, #1
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 fbb4 	bl	8007204 <__lshift>
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4682      	mov	sl, r0
 8006aa0:	f000 fc1c 	bl	80072dc <__mcmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dc03      	bgt.n	8006ab0 <_dtoa_r+0xab0>
 8006aa8:	d1e1      	bne.n	8006a6e <_dtoa_r+0xa6e>
 8006aaa:	f019 0f01 	tst.w	r9, #1
 8006aae:	d0de      	beq.n	8006a6e <_dtoa_r+0xa6e>
 8006ab0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ab4:	d1d8      	bne.n	8006a68 <_dtoa_r+0xa68>
 8006ab6:	9a01      	ldr	r2, [sp, #4]
 8006ab8:	2339      	movs	r3, #57	; 0x39
 8006aba:	7013      	strb	r3, [r2, #0]
 8006abc:	462b      	mov	r3, r5
 8006abe:	461d      	mov	r5, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ac6:	2a39      	cmp	r2, #57	; 0x39
 8006ac8:	d06c      	beq.n	8006ba4 <_dtoa_r+0xba4>
 8006aca:	3201      	adds	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	e747      	b.n	8006960 <_dtoa_r+0x960>
 8006ad0:	2a00      	cmp	r2, #0
 8006ad2:	dd07      	ble.n	8006ae4 <_dtoa_r+0xae4>
 8006ad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ad8:	d0ed      	beq.n	8006ab6 <_dtoa_r+0xab6>
 8006ada:	9a01      	ldr	r2, [sp, #4]
 8006adc:	f109 0301 	add.w	r3, r9, #1
 8006ae0:	7013      	strb	r3, [r2, #0]
 8006ae2:	e73d      	b.n	8006960 <_dtoa_r+0x960>
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	9a08      	ldr	r2, [sp, #32]
 8006ae8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d043      	beq.n	8006b78 <_dtoa_r+0xb78>
 8006af0:	4651      	mov	r1, sl
 8006af2:	2300      	movs	r3, #0
 8006af4:	220a      	movs	r2, #10
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 f9d6 	bl	8006ea8 <__multadd>
 8006afc:	45b8      	cmp	r8, r7
 8006afe:	4682      	mov	sl, r0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	f04f 020a 	mov.w	r2, #10
 8006b08:	4641      	mov	r1, r8
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	d107      	bne.n	8006b1e <_dtoa_r+0xb1e>
 8006b0e:	f000 f9cb 	bl	8006ea8 <__multadd>
 8006b12:	4680      	mov	r8, r0
 8006b14:	4607      	mov	r7, r0
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	e775      	b.n	8006a0a <_dtoa_r+0xa0a>
 8006b1e:	f000 f9c3 	bl	8006ea8 <__multadd>
 8006b22:	4639      	mov	r1, r7
 8006b24:	4680      	mov	r8, r0
 8006b26:	2300      	movs	r3, #0
 8006b28:	220a      	movs	r2, #10
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 f9bc 	bl	8006ea8 <__multadd>
 8006b30:	4607      	mov	r7, r0
 8006b32:	e7f0      	b.n	8006b16 <_dtoa_r+0xb16>
 8006b34:	9b04      	ldr	r3, [sp, #16]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	9d00      	ldr	r5, [sp, #0]
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	f7ff f9d5 	bl	8005eec <quorem>
 8006b42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	f805 9b01 	strb.w	r9, [r5], #1
 8006b4c:	1aea      	subs	r2, r5, r3
 8006b4e:	9b01      	ldr	r3, [sp, #4]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	dd07      	ble.n	8006b64 <_dtoa_r+0xb64>
 8006b54:	4651      	mov	r1, sl
 8006b56:	2300      	movs	r3, #0
 8006b58:	220a      	movs	r2, #10
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 f9a4 	bl	8006ea8 <__multadd>
 8006b60:	4682      	mov	sl, r0
 8006b62:	e7ea      	b.n	8006b3a <_dtoa_r+0xb3a>
 8006b64:	9b01      	ldr	r3, [sp, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bfc8      	it	gt
 8006b6a:	461d      	movgt	r5, r3
 8006b6c:	9b00      	ldr	r3, [sp, #0]
 8006b6e:	bfd8      	it	le
 8006b70:	2501      	movle	r5, #1
 8006b72:	441d      	add	r5, r3
 8006b74:	f04f 0800 	mov.w	r8, #0
 8006b78:	4651      	mov	r1, sl
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 fb41 	bl	8007204 <__lshift>
 8006b82:	4631      	mov	r1, r6
 8006b84:	4682      	mov	sl, r0
 8006b86:	f000 fba9 	bl	80072dc <__mcmp>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	dc96      	bgt.n	8006abc <_dtoa_r+0xabc>
 8006b8e:	d102      	bne.n	8006b96 <_dtoa_r+0xb96>
 8006b90:	f019 0f01 	tst.w	r9, #1
 8006b94:	d192      	bne.n	8006abc <_dtoa_r+0xabc>
 8006b96:	462b      	mov	r3, r5
 8006b98:	461d      	mov	r5, r3
 8006b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b9e:	2a30      	cmp	r2, #48	; 0x30
 8006ba0:	d0fa      	beq.n	8006b98 <_dtoa_r+0xb98>
 8006ba2:	e6dd      	b.n	8006960 <_dtoa_r+0x960>
 8006ba4:	9a00      	ldr	r2, [sp, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d189      	bne.n	8006abe <_dtoa_r+0xabe>
 8006baa:	f10b 0b01 	add.w	fp, fp, #1
 8006bae:	2331      	movs	r3, #49	; 0x31
 8006bb0:	e796      	b.n	8006ae0 <_dtoa_r+0xae0>
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <_dtoa_r+0xbdc>)
 8006bb4:	f7ff ba99 	b.w	80060ea <_dtoa_r+0xea>
 8006bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f47f aa6d 	bne.w	800609a <_dtoa_r+0x9a>
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <_dtoa_r+0xbe0>)
 8006bc2:	f7ff ba92 	b.w	80060ea <_dtoa_r+0xea>
 8006bc6:	9b01      	ldr	r3, [sp, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	dcb5      	bgt.n	8006b38 <_dtoa_r+0xb38>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	f73f aeb1 	bgt.w	8006936 <_dtoa_r+0x936>
 8006bd4:	e7b0      	b.n	8006b38 <_dtoa_r+0xb38>
 8006bd6:	bf00      	nop
 8006bd8:	0800812e 	.word	0x0800812e
 8006bdc:	08007ff8 	.word	0x08007ff8
 8006be0:	080080c9 	.word	0x080080c9

08006be4 <_free_r>:
 8006be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006be6:	2900      	cmp	r1, #0
 8006be8:	d044      	beq.n	8006c74 <_free_r+0x90>
 8006bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bee:	9001      	str	r0, [sp, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bf6:	bfb8      	it	lt
 8006bf8:	18e4      	addlt	r4, r4, r3
 8006bfa:	f000 f8e7 	bl	8006dcc <__malloc_lock>
 8006bfe:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <_free_r+0x94>)
 8006c00:	9801      	ldr	r0, [sp, #4]
 8006c02:	6813      	ldr	r3, [r2, #0]
 8006c04:	b933      	cbnz	r3, 8006c14 <_free_r+0x30>
 8006c06:	6063      	str	r3, [r4, #4]
 8006c08:	6014      	str	r4, [r2, #0]
 8006c0a:	b003      	add	sp, #12
 8006c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c10:	f000 b8e2 	b.w	8006dd8 <__malloc_unlock>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d908      	bls.n	8006c2a <_free_r+0x46>
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1961      	adds	r1, r4, r5
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	bf01      	itttt	eq
 8006c20:	6819      	ldreq	r1, [r3, #0]
 8006c22:	685b      	ldreq	r3, [r3, #4]
 8006c24:	1949      	addeq	r1, r1, r5
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	e7ed      	b.n	8006c06 <_free_r+0x22>
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	b10b      	cbz	r3, 8006c34 <_free_r+0x50>
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d9fa      	bls.n	8006c2a <_free_r+0x46>
 8006c34:	6811      	ldr	r1, [r2, #0]
 8006c36:	1855      	adds	r5, r2, r1
 8006c38:	42a5      	cmp	r5, r4
 8006c3a:	d10b      	bne.n	8006c54 <_free_r+0x70>
 8006c3c:	6824      	ldr	r4, [r4, #0]
 8006c3e:	4421      	add	r1, r4
 8006c40:	1854      	adds	r4, r2, r1
 8006c42:	42a3      	cmp	r3, r4
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	d1e0      	bne.n	8006c0a <_free_r+0x26>
 8006c48:	681c      	ldr	r4, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	6053      	str	r3, [r2, #4]
 8006c4e:	440c      	add	r4, r1
 8006c50:	6014      	str	r4, [r2, #0]
 8006c52:	e7da      	b.n	8006c0a <_free_r+0x26>
 8006c54:	d902      	bls.n	8006c5c <_free_r+0x78>
 8006c56:	230c      	movs	r3, #12
 8006c58:	6003      	str	r3, [r0, #0]
 8006c5a:	e7d6      	b.n	8006c0a <_free_r+0x26>
 8006c5c:	6825      	ldr	r5, [r4, #0]
 8006c5e:	1961      	adds	r1, r4, r5
 8006c60:	428b      	cmp	r3, r1
 8006c62:	bf04      	itt	eq
 8006c64:	6819      	ldreq	r1, [r3, #0]
 8006c66:	685b      	ldreq	r3, [r3, #4]
 8006c68:	6063      	str	r3, [r4, #4]
 8006c6a:	bf04      	itt	eq
 8006c6c:	1949      	addeq	r1, r1, r5
 8006c6e:	6021      	streq	r1, [r4, #0]
 8006c70:	6054      	str	r4, [r2, #4]
 8006c72:	e7ca      	b.n	8006c0a <_free_r+0x26>
 8006c74:	b003      	add	sp, #12
 8006c76:	bd30      	pop	{r4, r5, pc}
 8006c78:	20000634 	.word	0x20000634

08006c7c <malloc>:
 8006c7c:	4b02      	ldr	r3, [pc, #8]	; (8006c88 <malloc+0xc>)
 8006c7e:	4601      	mov	r1, r0
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	f000 b823 	b.w	8006ccc <_malloc_r>
 8006c86:	bf00      	nop
 8006c88:	20000120 	.word	0x20000120

08006c8c <sbrk_aligned>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4e0e      	ldr	r6, [pc, #56]	; (8006cc8 <sbrk_aligned+0x3c>)
 8006c90:	460c      	mov	r4, r1
 8006c92:	6831      	ldr	r1, [r6, #0]
 8006c94:	4605      	mov	r5, r0
 8006c96:	b911      	cbnz	r1, 8006c9e <sbrk_aligned+0x12>
 8006c98:	f001 f81a 	bl	8007cd0 <_sbrk_r>
 8006c9c:	6030      	str	r0, [r6, #0]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f001 f815 	bl	8007cd0 <_sbrk_r>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d00a      	beq.n	8006cc0 <sbrk_aligned+0x34>
 8006caa:	1cc4      	adds	r4, r0, #3
 8006cac:	f024 0403 	bic.w	r4, r4, #3
 8006cb0:	42a0      	cmp	r0, r4
 8006cb2:	d007      	beq.n	8006cc4 <sbrk_aligned+0x38>
 8006cb4:	1a21      	subs	r1, r4, r0
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f001 f80a 	bl	8007cd0 <_sbrk_r>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d101      	bne.n	8006cc4 <sbrk_aligned+0x38>
 8006cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	20000638 	.word	0x20000638

08006ccc <_malloc_r>:
 8006ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd0:	1ccd      	adds	r5, r1, #3
 8006cd2:	f025 0503 	bic.w	r5, r5, #3
 8006cd6:	3508      	adds	r5, #8
 8006cd8:	2d0c      	cmp	r5, #12
 8006cda:	bf38      	it	cc
 8006cdc:	250c      	movcc	r5, #12
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	db01      	blt.n	8006ce8 <_malloc_r+0x1c>
 8006ce4:	42a9      	cmp	r1, r5
 8006ce6:	d905      	bls.n	8006cf4 <_malloc_r+0x28>
 8006ce8:	230c      	movs	r3, #12
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	2600      	movs	r6, #0
 8006cee:	4630      	mov	r0, r6
 8006cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006dc8 <_malloc_r+0xfc>
 8006cf8:	f000 f868 	bl	8006dcc <__malloc_lock>
 8006cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006d00:	461c      	mov	r4, r3
 8006d02:	bb5c      	cbnz	r4, 8006d5c <_malloc_r+0x90>
 8006d04:	4629      	mov	r1, r5
 8006d06:	4638      	mov	r0, r7
 8006d08:	f7ff ffc0 	bl	8006c8c <sbrk_aligned>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	4604      	mov	r4, r0
 8006d10:	d155      	bne.n	8006dbe <_malloc_r+0xf2>
 8006d12:	f8d8 4000 	ldr.w	r4, [r8]
 8006d16:	4626      	mov	r6, r4
 8006d18:	2e00      	cmp	r6, #0
 8006d1a:	d145      	bne.n	8006da8 <_malloc_r+0xdc>
 8006d1c:	2c00      	cmp	r4, #0
 8006d1e:	d048      	beq.n	8006db2 <_malloc_r+0xe6>
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4638      	mov	r0, r7
 8006d26:	eb04 0903 	add.w	r9, r4, r3
 8006d2a:	f000 ffd1 	bl	8007cd0 <_sbrk_r>
 8006d2e:	4581      	cmp	r9, r0
 8006d30:	d13f      	bne.n	8006db2 <_malloc_r+0xe6>
 8006d32:	6821      	ldr	r1, [r4, #0]
 8006d34:	1a6d      	subs	r5, r5, r1
 8006d36:	4629      	mov	r1, r5
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7ff ffa7 	bl	8006c8c <sbrk_aligned>
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d037      	beq.n	8006db2 <_malloc_r+0xe6>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	442b      	add	r3, r5
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	f8d8 3000 	ldr.w	r3, [r8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d038      	beq.n	8006dc2 <_malloc_r+0xf6>
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	42a2      	cmp	r2, r4
 8006d54:	d12b      	bne.n	8006dae <_malloc_r+0xe2>
 8006d56:	2200      	movs	r2, #0
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	e00f      	b.n	8006d7c <_malloc_r+0xb0>
 8006d5c:	6822      	ldr	r2, [r4, #0]
 8006d5e:	1b52      	subs	r2, r2, r5
 8006d60:	d41f      	bmi.n	8006da2 <_malloc_r+0xd6>
 8006d62:	2a0b      	cmp	r2, #11
 8006d64:	d917      	bls.n	8006d96 <_malloc_r+0xca>
 8006d66:	1961      	adds	r1, r4, r5
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	6025      	str	r5, [r4, #0]
 8006d6c:	bf18      	it	ne
 8006d6e:	6059      	strne	r1, [r3, #4]
 8006d70:	6863      	ldr	r3, [r4, #4]
 8006d72:	bf08      	it	eq
 8006d74:	f8c8 1000 	streq.w	r1, [r8]
 8006d78:	5162      	str	r2, [r4, r5]
 8006d7a:	604b      	str	r3, [r1, #4]
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	f104 060b 	add.w	r6, r4, #11
 8006d82:	f000 f829 	bl	8006dd8 <__malloc_unlock>
 8006d86:	f026 0607 	bic.w	r6, r6, #7
 8006d8a:	1d23      	adds	r3, r4, #4
 8006d8c:	1af2      	subs	r2, r6, r3
 8006d8e:	d0ae      	beq.n	8006cee <_malloc_r+0x22>
 8006d90:	1b9b      	subs	r3, r3, r6
 8006d92:	50a3      	str	r3, [r4, r2]
 8006d94:	e7ab      	b.n	8006cee <_malloc_r+0x22>
 8006d96:	42a3      	cmp	r3, r4
 8006d98:	6862      	ldr	r2, [r4, #4]
 8006d9a:	d1dd      	bne.n	8006d58 <_malloc_r+0x8c>
 8006d9c:	f8c8 2000 	str.w	r2, [r8]
 8006da0:	e7ec      	b.n	8006d7c <_malloc_r+0xb0>
 8006da2:	4623      	mov	r3, r4
 8006da4:	6864      	ldr	r4, [r4, #4]
 8006da6:	e7ac      	b.n	8006d02 <_malloc_r+0x36>
 8006da8:	4634      	mov	r4, r6
 8006daa:	6876      	ldr	r6, [r6, #4]
 8006dac:	e7b4      	b.n	8006d18 <_malloc_r+0x4c>
 8006dae:	4613      	mov	r3, r2
 8006db0:	e7cc      	b.n	8006d4c <_malloc_r+0x80>
 8006db2:	230c      	movs	r3, #12
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	4638      	mov	r0, r7
 8006db8:	f000 f80e 	bl	8006dd8 <__malloc_unlock>
 8006dbc:	e797      	b.n	8006cee <_malloc_r+0x22>
 8006dbe:	6025      	str	r5, [r4, #0]
 8006dc0:	e7dc      	b.n	8006d7c <_malloc_r+0xb0>
 8006dc2:	605b      	str	r3, [r3, #4]
 8006dc4:	deff      	udf	#255	; 0xff
 8006dc6:	bf00      	nop
 8006dc8:	20000634 	.word	0x20000634

08006dcc <__malloc_lock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__malloc_lock+0x8>)
 8006dce:	f7ff b86c 	b.w	8005eaa <__retarget_lock_acquire_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20000630 	.word	0x20000630

08006dd8 <__malloc_unlock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_unlock+0x8>)
 8006dda:	f7ff b867 	b.w	8005eac <__retarget_lock_release_recursive>
 8006dde:	bf00      	nop
 8006de0:	20000630 	.word	0x20000630

08006de4 <_Balloc>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	69c6      	ldr	r6, [r0, #28]
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	b976      	cbnz	r6, 8006e0c <_Balloc+0x28>
 8006dee:	2010      	movs	r0, #16
 8006df0:	f7ff ff44 	bl	8006c7c <malloc>
 8006df4:	4602      	mov	r2, r0
 8006df6:	61e0      	str	r0, [r4, #28]
 8006df8:	b920      	cbnz	r0, 8006e04 <_Balloc+0x20>
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <_Balloc+0x78>)
 8006dfc:	4818      	ldr	r0, [pc, #96]	; (8006e60 <_Balloc+0x7c>)
 8006dfe:	216b      	movs	r1, #107	; 0x6b
 8006e00:	f7ff f856 	bl	8005eb0 <__assert_func>
 8006e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e08:	6006      	str	r6, [r0, #0]
 8006e0a:	60c6      	str	r6, [r0, #12]
 8006e0c:	69e6      	ldr	r6, [r4, #28]
 8006e0e:	68f3      	ldr	r3, [r6, #12]
 8006e10:	b183      	cbz	r3, 8006e34 <_Balloc+0x50>
 8006e12:	69e3      	ldr	r3, [r4, #28]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e1a:	b9b8      	cbnz	r0, 8006e4c <_Balloc+0x68>
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e22:	1d72      	adds	r2, r6, #5
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 ff77 	bl	8007d1a <_calloc_r>
 8006e2c:	b160      	cbz	r0, 8006e48 <_Balloc+0x64>
 8006e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e32:	e00e      	b.n	8006e52 <_Balloc+0x6e>
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	2104      	movs	r1, #4
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 ff6e 	bl	8007d1a <_calloc_r>
 8006e3e:	69e3      	ldr	r3, [r4, #28]
 8006e40:	60f0      	str	r0, [r6, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e4      	bne.n	8006e12 <_Balloc+0x2e>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	6802      	ldr	r2, [r0, #0]
 8006e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e52:	2300      	movs	r3, #0
 8006e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e58:	e7f7      	b.n	8006e4a <_Balloc+0x66>
 8006e5a:	bf00      	nop
 8006e5c:	0800801c 	.word	0x0800801c
 8006e60:	0800813f 	.word	0x0800813f

08006e64 <_Bfree>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	69c6      	ldr	r6, [r0, #28]
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	b976      	cbnz	r6, 8006e8c <_Bfree+0x28>
 8006e6e:	2010      	movs	r0, #16
 8006e70:	f7ff ff04 	bl	8006c7c <malloc>
 8006e74:	4602      	mov	r2, r0
 8006e76:	61e8      	str	r0, [r5, #28]
 8006e78:	b920      	cbnz	r0, 8006e84 <_Bfree+0x20>
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <_Bfree+0x3c>)
 8006e7c:	4809      	ldr	r0, [pc, #36]	; (8006ea4 <_Bfree+0x40>)
 8006e7e:	218f      	movs	r1, #143	; 0x8f
 8006e80:	f7ff f816 	bl	8005eb0 <__assert_func>
 8006e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e88:	6006      	str	r6, [r0, #0]
 8006e8a:	60c6      	str	r6, [r0, #12]
 8006e8c:	b13c      	cbz	r4, 8006e9e <_Bfree+0x3a>
 8006e8e:	69eb      	ldr	r3, [r5, #28]
 8006e90:	6862      	ldr	r2, [r4, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e98:	6021      	str	r1, [r4, #0]
 8006e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	0800801c 	.word	0x0800801c
 8006ea4:	0800813f 	.word	0x0800813f

08006ea8 <__multadd>:
 8006ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	690d      	ldr	r5, [r1, #16]
 8006eae:	4607      	mov	r7, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	461e      	mov	r6, r3
 8006eb4:	f101 0c14 	add.w	ip, r1, #20
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f8dc 3000 	ldr.w	r3, [ip]
 8006ebe:	b299      	uxth	r1, r3
 8006ec0:	fb02 6101 	mla	r1, r2, r1, r6
 8006ec4:	0c1e      	lsrs	r6, r3, #16
 8006ec6:	0c0b      	lsrs	r3, r1, #16
 8006ec8:	fb02 3306 	mla	r3, r2, r6, r3
 8006ecc:	b289      	uxth	r1, r1
 8006ece:	3001      	adds	r0, #1
 8006ed0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ed4:	4285      	cmp	r5, r0
 8006ed6:	f84c 1b04 	str.w	r1, [ip], #4
 8006eda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ede:	dcec      	bgt.n	8006eba <__multadd+0x12>
 8006ee0:	b30e      	cbz	r6, 8006f26 <__multadd+0x7e>
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	dc19      	bgt.n	8006f1c <__multadd+0x74>
 8006ee8:	6861      	ldr	r1, [r4, #4]
 8006eea:	4638      	mov	r0, r7
 8006eec:	3101      	adds	r1, #1
 8006eee:	f7ff ff79 	bl	8006de4 <_Balloc>
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	b928      	cbnz	r0, 8006f02 <__multadd+0x5a>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <__multadd+0x84>)
 8006efa:	480d      	ldr	r0, [pc, #52]	; (8006f30 <__multadd+0x88>)
 8006efc:	21ba      	movs	r1, #186	; 0xba
 8006efe:	f7fe ffd7 	bl	8005eb0 <__assert_func>
 8006f02:	6922      	ldr	r2, [r4, #16]
 8006f04:	3202      	adds	r2, #2
 8006f06:	f104 010c 	add.w	r1, r4, #12
 8006f0a:	0092      	lsls	r2, r2, #2
 8006f0c:	300c      	adds	r0, #12
 8006f0e:	f000 feef 	bl	8007cf0 <memcpy>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4638      	mov	r0, r7
 8006f16:	f7ff ffa5 	bl	8006e64 <_Bfree>
 8006f1a:	4644      	mov	r4, r8
 8006f1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f20:	3501      	adds	r5, #1
 8006f22:	615e      	str	r6, [r3, #20]
 8006f24:	6125      	str	r5, [r4, #16]
 8006f26:	4620      	mov	r0, r4
 8006f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2c:	0800812e 	.word	0x0800812e
 8006f30:	0800813f 	.word	0x0800813f

08006f34 <__hi0bits>:
 8006f34:	0c03      	lsrs	r3, r0, #16
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	b9d3      	cbnz	r3, 8006f70 <__hi0bits+0x3c>
 8006f3a:	0400      	lsls	r0, r0, #16
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f42:	bf04      	itt	eq
 8006f44:	0200      	lsleq	r0, r0, #8
 8006f46:	3308      	addeq	r3, #8
 8006f48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f4c:	bf04      	itt	eq
 8006f4e:	0100      	lsleq	r0, r0, #4
 8006f50:	3304      	addeq	r3, #4
 8006f52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f56:	bf04      	itt	eq
 8006f58:	0080      	lsleq	r0, r0, #2
 8006f5a:	3302      	addeq	r3, #2
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	db05      	blt.n	8006f6c <__hi0bits+0x38>
 8006f60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f64:	f103 0301 	add.w	r3, r3, #1
 8006f68:	bf08      	it	eq
 8006f6a:	2320      	moveq	r3, #32
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	4770      	bx	lr
 8006f70:	2300      	movs	r3, #0
 8006f72:	e7e4      	b.n	8006f3e <__hi0bits+0xa>

08006f74 <__lo0bits>:
 8006f74:	6803      	ldr	r3, [r0, #0]
 8006f76:	f013 0207 	ands.w	r2, r3, #7
 8006f7a:	d00c      	beq.n	8006f96 <__lo0bits+0x22>
 8006f7c:	07d9      	lsls	r1, r3, #31
 8006f7e:	d422      	bmi.n	8006fc6 <__lo0bits+0x52>
 8006f80:	079a      	lsls	r2, r3, #30
 8006f82:	bf49      	itett	mi
 8006f84:	085b      	lsrmi	r3, r3, #1
 8006f86:	089b      	lsrpl	r3, r3, #2
 8006f88:	6003      	strmi	r3, [r0, #0]
 8006f8a:	2201      	movmi	r2, #1
 8006f8c:	bf5c      	itt	pl
 8006f8e:	6003      	strpl	r3, [r0, #0]
 8006f90:	2202      	movpl	r2, #2
 8006f92:	4610      	mov	r0, r2
 8006f94:	4770      	bx	lr
 8006f96:	b299      	uxth	r1, r3
 8006f98:	b909      	cbnz	r1, 8006f9e <__lo0bits+0x2a>
 8006f9a:	0c1b      	lsrs	r3, r3, #16
 8006f9c:	2210      	movs	r2, #16
 8006f9e:	b2d9      	uxtb	r1, r3
 8006fa0:	b909      	cbnz	r1, 8006fa6 <__lo0bits+0x32>
 8006fa2:	3208      	adds	r2, #8
 8006fa4:	0a1b      	lsrs	r3, r3, #8
 8006fa6:	0719      	lsls	r1, r3, #28
 8006fa8:	bf04      	itt	eq
 8006faa:	091b      	lsreq	r3, r3, #4
 8006fac:	3204      	addeq	r2, #4
 8006fae:	0799      	lsls	r1, r3, #30
 8006fb0:	bf04      	itt	eq
 8006fb2:	089b      	lsreq	r3, r3, #2
 8006fb4:	3202      	addeq	r2, #2
 8006fb6:	07d9      	lsls	r1, r3, #31
 8006fb8:	d403      	bmi.n	8006fc2 <__lo0bits+0x4e>
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	f102 0201 	add.w	r2, r2, #1
 8006fc0:	d003      	beq.n	8006fca <__lo0bits+0x56>
 8006fc2:	6003      	str	r3, [r0, #0]
 8006fc4:	e7e5      	b.n	8006f92 <__lo0bits+0x1e>
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	e7e3      	b.n	8006f92 <__lo0bits+0x1e>
 8006fca:	2220      	movs	r2, #32
 8006fcc:	e7e1      	b.n	8006f92 <__lo0bits+0x1e>
	...

08006fd0 <__i2b>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	f7ff ff05 	bl	8006de4 <_Balloc>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	b928      	cbnz	r0, 8006fea <__i2b+0x1a>
 8006fde:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <__i2b+0x24>)
 8006fe0:	4805      	ldr	r0, [pc, #20]	; (8006ff8 <__i2b+0x28>)
 8006fe2:	f240 1145 	movw	r1, #325	; 0x145
 8006fe6:	f7fe ff63 	bl	8005eb0 <__assert_func>
 8006fea:	2301      	movs	r3, #1
 8006fec:	6144      	str	r4, [r0, #20]
 8006fee:	6103      	str	r3, [r0, #16]
 8006ff0:	bd10      	pop	{r4, pc}
 8006ff2:	bf00      	nop
 8006ff4:	0800812e 	.word	0x0800812e
 8006ff8:	0800813f 	.word	0x0800813f

08006ffc <__multiply>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	4691      	mov	r9, r2
 8007002:	690a      	ldr	r2, [r1, #16]
 8007004:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	bfb8      	it	lt
 800700c:	460b      	movlt	r3, r1
 800700e:	460c      	mov	r4, r1
 8007010:	bfbc      	itt	lt
 8007012:	464c      	movlt	r4, r9
 8007014:	4699      	movlt	r9, r3
 8007016:	6927      	ldr	r7, [r4, #16]
 8007018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	6861      	ldr	r1, [r4, #4]
 8007020:	eb07 060a 	add.w	r6, r7, sl
 8007024:	42b3      	cmp	r3, r6
 8007026:	b085      	sub	sp, #20
 8007028:	bfb8      	it	lt
 800702a:	3101      	addlt	r1, #1
 800702c:	f7ff feda 	bl	8006de4 <_Balloc>
 8007030:	b930      	cbnz	r0, 8007040 <__multiply+0x44>
 8007032:	4602      	mov	r2, r0
 8007034:	4b44      	ldr	r3, [pc, #272]	; (8007148 <__multiply+0x14c>)
 8007036:	4845      	ldr	r0, [pc, #276]	; (800714c <__multiply+0x150>)
 8007038:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800703c:	f7fe ff38 	bl	8005eb0 <__assert_func>
 8007040:	f100 0514 	add.w	r5, r0, #20
 8007044:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007048:	462b      	mov	r3, r5
 800704a:	2200      	movs	r2, #0
 800704c:	4543      	cmp	r3, r8
 800704e:	d321      	bcc.n	8007094 <__multiply+0x98>
 8007050:	f104 0314 	add.w	r3, r4, #20
 8007054:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007058:	f109 0314 	add.w	r3, r9, #20
 800705c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007060:	9202      	str	r2, [sp, #8]
 8007062:	1b3a      	subs	r2, r7, r4
 8007064:	3a15      	subs	r2, #21
 8007066:	f022 0203 	bic.w	r2, r2, #3
 800706a:	3204      	adds	r2, #4
 800706c:	f104 0115 	add.w	r1, r4, #21
 8007070:	428f      	cmp	r7, r1
 8007072:	bf38      	it	cc
 8007074:	2204      	movcc	r2, #4
 8007076:	9201      	str	r2, [sp, #4]
 8007078:	9a02      	ldr	r2, [sp, #8]
 800707a:	9303      	str	r3, [sp, #12]
 800707c:	429a      	cmp	r2, r3
 800707e:	d80c      	bhi.n	800709a <__multiply+0x9e>
 8007080:	2e00      	cmp	r6, #0
 8007082:	dd03      	ble.n	800708c <__multiply+0x90>
 8007084:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007088:	2b00      	cmp	r3, #0
 800708a:	d05b      	beq.n	8007144 <__multiply+0x148>
 800708c:	6106      	str	r6, [r0, #16]
 800708e:	b005      	add	sp, #20
 8007090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007094:	f843 2b04 	str.w	r2, [r3], #4
 8007098:	e7d8      	b.n	800704c <__multiply+0x50>
 800709a:	f8b3 a000 	ldrh.w	sl, [r3]
 800709e:	f1ba 0f00 	cmp.w	sl, #0
 80070a2:	d024      	beq.n	80070ee <__multiply+0xf2>
 80070a4:	f104 0e14 	add.w	lr, r4, #20
 80070a8:	46a9      	mov	r9, r5
 80070aa:	f04f 0c00 	mov.w	ip, #0
 80070ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070b2:	f8d9 1000 	ldr.w	r1, [r9]
 80070b6:	fa1f fb82 	uxth.w	fp, r2
 80070ba:	b289      	uxth	r1, r1
 80070bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80070c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070c4:	f8d9 2000 	ldr.w	r2, [r9]
 80070c8:	4461      	add	r1, ip
 80070ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80070d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070d6:	b289      	uxth	r1, r1
 80070d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070dc:	4577      	cmp	r7, lr
 80070de:	f849 1b04 	str.w	r1, [r9], #4
 80070e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070e6:	d8e2      	bhi.n	80070ae <__multiply+0xb2>
 80070e8:	9a01      	ldr	r2, [sp, #4]
 80070ea:	f845 c002 	str.w	ip, [r5, r2]
 80070ee:	9a03      	ldr	r2, [sp, #12]
 80070f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070f4:	3304      	adds	r3, #4
 80070f6:	f1b9 0f00 	cmp.w	r9, #0
 80070fa:	d021      	beq.n	8007140 <__multiply+0x144>
 80070fc:	6829      	ldr	r1, [r5, #0]
 80070fe:	f104 0c14 	add.w	ip, r4, #20
 8007102:	46ae      	mov	lr, r5
 8007104:	f04f 0a00 	mov.w	sl, #0
 8007108:	f8bc b000 	ldrh.w	fp, [ip]
 800710c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007110:	fb09 220b 	mla	r2, r9, fp, r2
 8007114:	4452      	add	r2, sl
 8007116:	b289      	uxth	r1, r1
 8007118:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800711c:	f84e 1b04 	str.w	r1, [lr], #4
 8007120:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007128:	f8be 1000 	ldrh.w	r1, [lr]
 800712c:	fb09 110a 	mla	r1, r9, sl, r1
 8007130:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007134:	4567      	cmp	r7, ip
 8007136:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800713a:	d8e5      	bhi.n	8007108 <__multiply+0x10c>
 800713c:	9a01      	ldr	r2, [sp, #4]
 800713e:	50a9      	str	r1, [r5, r2]
 8007140:	3504      	adds	r5, #4
 8007142:	e799      	b.n	8007078 <__multiply+0x7c>
 8007144:	3e01      	subs	r6, #1
 8007146:	e79b      	b.n	8007080 <__multiply+0x84>
 8007148:	0800812e 	.word	0x0800812e
 800714c:	0800813f 	.word	0x0800813f

08007150 <__pow5mult>:
 8007150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007154:	4615      	mov	r5, r2
 8007156:	f012 0203 	ands.w	r2, r2, #3
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	d007      	beq.n	8007170 <__pow5mult+0x20>
 8007160:	4c25      	ldr	r4, [pc, #148]	; (80071f8 <__pow5mult+0xa8>)
 8007162:	3a01      	subs	r2, #1
 8007164:	2300      	movs	r3, #0
 8007166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800716a:	f7ff fe9d 	bl	8006ea8 <__multadd>
 800716e:	4607      	mov	r7, r0
 8007170:	10ad      	asrs	r5, r5, #2
 8007172:	d03d      	beq.n	80071f0 <__pow5mult+0xa0>
 8007174:	69f4      	ldr	r4, [r6, #28]
 8007176:	b97c      	cbnz	r4, 8007198 <__pow5mult+0x48>
 8007178:	2010      	movs	r0, #16
 800717a:	f7ff fd7f 	bl	8006c7c <malloc>
 800717e:	4602      	mov	r2, r0
 8007180:	61f0      	str	r0, [r6, #28]
 8007182:	b928      	cbnz	r0, 8007190 <__pow5mult+0x40>
 8007184:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <__pow5mult+0xac>)
 8007186:	481e      	ldr	r0, [pc, #120]	; (8007200 <__pow5mult+0xb0>)
 8007188:	f240 11b3 	movw	r1, #435	; 0x1b3
 800718c:	f7fe fe90 	bl	8005eb0 <__assert_func>
 8007190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007194:	6004      	str	r4, [r0, #0]
 8007196:	60c4      	str	r4, [r0, #12]
 8007198:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800719c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071a0:	b94c      	cbnz	r4, 80071b6 <__pow5mult+0x66>
 80071a2:	f240 2171 	movw	r1, #625	; 0x271
 80071a6:	4630      	mov	r0, r6
 80071a8:	f7ff ff12 	bl	8006fd0 <__i2b>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80071b2:	4604      	mov	r4, r0
 80071b4:	6003      	str	r3, [r0, #0]
 80071b6:	f04f 0900 	mov.w	r9, #0
 80071ba:	07eb      	lsls	r3, r5, #31
 80071bc:	d50a      	bpl.n	80071d4 <__pow5mult+0x84>
 80071be:	4639      	mov	r1, r7
 80071c0:	4622      	mov	r2, r4
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff ff1a 	bl	8006ffc <__multiply>
 80071c8:	4639      	mov	r1, r7
 80071ca:	4680      	mov	r8, r0
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff fe49 	bl	8006e64 <_Bfree>
 80071d2:	4647      	mov	r7, r8
 80071d4:	106d      	asrs	r5, r5, #1
 80071d6:	d00b      	beq.n	80071f0 <__pow5mult+0xa0>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	b938      	cbnz	r0, 80071ec <__pow5mult+0x9c>
 80071dc:	4622      	mov	r2, r4
 80071de:	4621      	mov	r1, r4
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7ff ff0b 	bl	8006ffc <__multiply>
 80071e6:	6020      	str	r0, [r4, #0]
 80071e8:	f8c0 9000 	str.w	r9, [r0]
 80071ec:	4604      	mov	r4, r0
 80071ee:	e7e4      	b.n	80071ba <__pow5mult+0x6a>
 80071f0:	4638      	mov	r0, r7
 80071f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f6:	bf00      	nop
 80071f8:	08008288 	.word	0x08008288
 80071fc:	0800801c 	.word	0x0800801c
 8007200:	0800813f 	.word	0x0800813f

08007204 <__lshift>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	460c      	mov	r4, r1
 800720a:	6849      	ldr	r1, [r1, #4]
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	4607      	mov	r7, r0
 8007216:	4691      	mov	r9, r2
 8007218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800721c:	f108 0601 	add.w	r6, r8, #1
 8007220:	42b3      	cmp	r3, r6
 8007222:	db0b      	blt.n	800723c <__lshift+0x38>
 8007224:	4638      	mov	r0, r7
 8007226:	f7ff fddd 	bl	8006de4 <_Balloc>
 800722a:	4605      	mov	r5, r0
 800722c:	b948      	cbnz	r0, 8007242 <__lshift+0x3e>
 800722e:	4602      	mov	r2, r0
 8007230:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <__lshift+0xd0>)
 8007232:	4829      	ldr	r0, [pc, #164]	; (80072d8 <__lshift+0xd4>)
 8007234:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007238:	f7fe fe3a 	bl	8005eb0 <__assert_func>
 800723c:	3101      	adds	r1, #1
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	e7ee      	b.n	8007220 <__lshift+0x1c>
 8007242:	2300      	movs	r3, #0
 8007244:	f100 0114 	add.w	r1, r0, #20
 8007248:	f100 0210 	add.w	r2, r0, #16
 800724c:	4618      	mov	r0, r3
 800724e:	4553      	cmp	r3, sl
 8007250:	db33      	blt.n	80072ba <__lshift+0xb6>
 8007252:	6920      	ldr	r0, [r4, #16]
 8007254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007258:	f104 0314 	add.w	r3, r4, #20
 800725c:	f019 091f 	ands.w	r9, r9, #31
 8007260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007264:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007268:	d02b      	beq.n	80072c2 <__lshift+0xbe>
 800726a:	f1c9 0e20 	rsb	lr, r9, #32
 800726e:	468a      	mov	sl, r1
 8007270:	2200      	movs	r2, #0
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	fa00 f009 	lsl.w	r0, r0, r9
 8007278:	4310      	orrs	r0, r2
 800727a:	f84a 0b04 	str.w	r0, [sl], #4
 800727e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007282:	459c      	cmp	ip, r3
 8007284:	fa22 f20e 	lsr.w	r2, r2, lr
 8007288:	d8f3      	bhi.n	8007272 <__lshift+0x6e>
 800728a:	ebac 0304 	sub.w	r3, ip, r4
 800728e:	3b15      	subs	r3, #21
 8007290:	f023 0303 	bic.w	r3, r3, #3
 8007294:	3304      	adds	r3, #4
 8007296:	f104 0015 	add.w	r0, r4, #21
 800729a:	4584      	cmp	ip, r0
 800729c:	bf38      	it	cc
 800729e:	2304      	movcc	r3, #4
 80072a0:	50ca      	str	r2, [r1, r3]
 80072a2:	b10a      	cbz	r2, 80072a8 <__lshift+0xa4>
 80072a4:	f108 0602 	add.w	r6, r8, #2
 80072a8:	3e01      	subs	r6, #1
 80072aa:	4638      	mov	r0, r7
 80072ac:	612e      	str	r6, [r5, #16]
 80072ae:	4621      	mov	r1, r4
 80072b0:	f7ff fdd8 	bl	8006e64 <_Bfree>
 80072b4:	4628      	mov	r0, r5
 80072b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80072be:	3301      	adds	r3, #1
 80072c0:	e7c5      	b.n	800724e <__lshift+0x4a>
 80072c2:	3904      	subs	r1, #4
 80072c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80072cc:	459c      	cmp	ip, r3
 80072ce:	d8f9      	bhi.n	80072c4 <__lshift+0xc0>
 80072d0:	e7ea      	b.n	80072a8 <__lshift+0xa4>
 80072d2:	bf00      	nop
 80072d4:	0800812e 	.word	0x0800812e
 80072d8:	0800813f 	.word	0x0800813f

080072dc <__mcmp>:
 80072dc:	b530      	push	{r4, r5, lr}
 80072de:	6902      	ldr	r2, [r0, #16]
 80072e0:	690c      	ldr	r4, [r1, #16]
 80072e2:	1b12      	subs	r2, r2, r4
 80072e4:	d10e      	bne.n	8007304 <__mcmp+0x28>
 80072e6:	f100 0314 	add.w	r3, r0, #20
 80072ea:	3114      	adds	r1, #20
 80072ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072fc:	42a5      	cmp	r5, r4
 80072fe:	d003      	beq.n	8007308 <__mcmp+0x2c>
 8007300:	d305      	bcc.n	800730e <__mcmp+0x32>
 8007302:	2201      	movs	r2, #1
 8007304:	4610      	mov	r0, r2
 8007306:	bd30      	pop	{r4, r5, pc}
 8007308:	4283      	cmp	r3, r0
 800730a:	d3f3      	bcc.n	80072f4 <__mcmp+0x18>
 800730c:	e7fa      	b.n	8007304 <__mcmp+0x28>
 800730e:	f04f 32ff 	mov.w	r2, #4294967295
 8007312:	e7f7      	b.n	8007304 <__mcmp+0x28>

08007314 <__mdiff>:
 8007314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	460c      	mov	r4, r1
 800731a:	4606      	mov	r6, r0
 800731c:	4611      	mov	r1, r2
 800731e:	4620      	mov	r0, r4
 8007320:	4690      	mov	r8, r2
 8007322:	f7ff ffdb 	bl	80072dc <__mcmp>
 8007326:	1e05      	subs	r5, r0, #0
 8007328:	d110      	bne.n	800734c <__mdiff+0x38>
 800732a:	4629      	mov	r1, r5
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff fd59 	bl	8006de4 <_Balloc>
 8007332:	b930      	cbnz	r0, 8007342 <__mdiff+0x2e>
 8007334:	4b3a      	ldr	r3, [pc, #232]	; (8007420 <__mdiff+0x10c>)
 8007336:	4602      	mov	r2, r0
 8007338:	f240 2137 	movw	r1, #567	; 0x237
 800733c:	4839      	ldr	r0, [pc, #228]	; (8007424 <__mdiff+0x110>)
 800733e:	f7fe fdb7 	bl	8005eb0 <__assert_func>
 8007342:	2301      	movs	r3, #1
 8007344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	bfa4      	itt	ge
 800734e:	4643      	movge	r3, r8
 8007350:	46a0      	movge	r8, r4
 8007352:	4630      	mov	r0, r6
 8007354:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007358:	bfa6      	itte	ge
 800735a:	461c      	movge	r4, r3
 800735c:	2500      	movge	r5, #0
 800735e:	2501      	movlt	r5, #1
 8007360:	f7ff fd40 	bl	8006de4 <_Balloc>
 8007364:	b920      	cbnz	r0, 8007370 <__mdiff+0x5c>
 8007366:	4b2e      	ldr	r3, [pc, #184]	; (8007420 <__mdiff+0x10c>)
 8007368:	4602      	mov	r2, r0
 800736a:	f240 2145 	movw	r1, #581	; 0x245
 800736e:	e7e5      	b.n	800733c <__mdiff+0x28>
 8007370:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007374:	6926      	ldr	r6, [r4, #16]
 8007376:	60c5      	str	r5, [r0, #12]
 8007378:	f104 0914 	add.w	r9, r4, #20
 800737c:	f108 0514 	add.w	r5, r8, #20
 8007380:	f100 0e14 	add.w	lr, r0, #20
 8007384:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007388:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800738c:	f108 0210 	add.w	r2, r8, #16
 8007390:	46f2      	mov	sl, lr
 8007392:	2100      	movs	r1, #0
 8007394:	f859 3b04 	ldr.w	r3, [r9], #4
 8007398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800739c:	fa11 f88b 	uxtah	r8, r1, fp
 80073a0:	b299      	uxth	r1, r3
 80073a2:	0c1b      	lsrs	r3, r3, #16
 80073a4:	eba8 0801 	sub.w	r8, r8, r1
 80073a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073b0:	fa1f f888 	uxth.w	r8, r8
 80073b4:	1419      	asrs	r1, r3, #16
 80073b6:	454e      	cmp	r6, r9
 80073b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073bc:	f84a 3b04 	str.w	r3, [sl], #4
 80073c0:	d8e8      	bhi.n	8007394 <__mdiff+0x80>
 80073c2:	1b33      	subs	r3, r6, r4
 80073c4:	3b15      	subs	r3, #21
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	3304      	adds	r3, #4
 80073cc:	3415      	adds	r4, #21
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	bf38      	it	cc
 80073d2:	2304      	movcc	r3, #4
 80073d4:	441d      	add	r5, r3
 80073d6:	4473      	add	r3, lr
 80073d8:	469e      	mov	lr, r3
 80073da:	462e      	mov	r6, r5
 80073dc:	4566      	cmp	r6, ip
 80073de:	d30e      	bcc.n	80073fe <__mdiff+0xea>
 80073e0:	f10c 0203 	add.w	r2, ip, #3
 80073e4:	1b52      	subs	r2, r2, r5
 80073e6:	f022 0203 	bic.w	r2, r2, #3
 80073ea:	3d03      	subs	r5, #3
 80073ec:	45ac      	cmp	ip, r5
 80073ee:	bf38      	it	cc
 80073f0:	2200      	movcc	r2, #0
 80073f2:	4413      	add	r3, r2
 80073f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073f8:	b17a      	cbz	r2, 800741a <__mdiff+0x106>
 80073fa:	6107      	str	r7, [r0, #16]
 80073fc:	e7a4      	b.n	8007348 <__mdiff+0x34>
 80073fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007402:	fa11 f288 	uxtah	r2, r1, r8
 8007406:	1414      	asrs	r4, r2, #16
 8007408:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800740c:	b292      	uxth	r2, r2
 800740e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007412:	f84e 2b04 	str.w	r2, [lr], #4
 8007416:	1421      	asrs	r1, r4, #16
 8007418:	e7e0      	b.n	80073dc <__mdiff+0xc8>
 800741a:	3f01      	subs	r7, #1
 800741c:	e7ea      	b.n	80073f4 <__mdiff+0xe0>
 800741e:	bf00      	nop
 8007420:	0800812e 	.word	0x0800812e
 8007424:	0800813f 	.word	0x0800813f

08007428 <__d2b>:
 8007428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800742c:	460f      	mov	r7, r1
 800742e:	2101      	movs	r1, #1
 8007430:	ec59 8b10 	vmov	r8, r9, d0
 8007434:	4616      	mov	r6, r2
 8007436:	f7ff fcd5 	bl	8006de4 <_Balloc>
 800743a:	4604      	mov	r4, r0
 800743c:	b930      	cbnz	r0, 800744c <__d2b+0x24>
 800743e:	4602      	mov	r2, r0
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <__d2b+0xac>)
 8007442:	4825      	ldr	r0, [pc, #148]	; (80074d8 <__d2b+0xb0>)
 8007444:	f240 310f 	movw	r1, #783	; 0x30f
 8007448:	f7fe fd32 	bl	8005eb0 <__assert_func>
 800744c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007454:	bb2d      	cbnz	r5, 80074a2 <__d2b+0x7a>
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	f1b8 0300 	subs.w	r3, r8, #0
 800745c:	d026      	beq.n	80074ac <__d2b+0x84>
 800745e:	4668      	mov	r0, sp
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	f7ff fd87 	bl	8006f74 <__lo0bits>
 8007466:	e9dd 1200 	ldrd	r1, r2, [sp]
 800746a:	b1e8      	cbz	r0, 80074a8 <__d2b+0x80>
 800746c:	f1c0 0320 	rsb	r3, r0, #32
 8007470:	fa02 f303 	lsl.w	r3, r2, r3
 8007474:	430b      	orrs	r3, r1
 8007476:	40c2      	lsrs	r2, r0
 8007478:	6163      	str	r3, [r4, #20]
 800747a:	9201      	str	r2, [sp, #4]
 800747c:	9b01      	ldr	r3, [sp, #4]
 800747e:	61a3      	str	r3, [r4, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	bf14      	ite	ne
 8007484:	2202      	movne	r2, #2
 8007486:	2201      	moveq	r2, #1
 8007488:	6122      	str	r2, [r4, #16]
 800748a:	b1bd      	cbz	r5, 80074bc <__d2b+0x94>
 800748c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007490:	4405      	add	r5, r0
 8007492:	603d      	str	r5, [r7, #0]
 8007494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007498:	6030      	str	r0, [r6, #0]
 800749a:	4620      	mov	r0, r4
 800749c:	b003      	add	sp, #12
 800749e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074a6:	e7d6      	b.n	8007456 <__d2b+0x2e>
 80074a8:	6161      	str	r1, [r4, #20]
 80074aa:	e7e7      	b.n	800747c <__d2b+0x54>
 80074ac:	a801      	add	r0, sp, #4
 80074ae:	f7ff fd61 	bl	8006f74 <__lo0bits>
 80074b2:	9b01      	ldr	r3, [sp, #4]
 80074b4:	6163      	str	r3, [r4, #20]
 80074b6:	3020      	adds	r0, #32
 80074b8:	2201      	movs	r2, #1
 80074ba:	e7e5      	b.n	8007488 <__d2b+0x60>
 80074bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074c4:	6038      	str	r0, [r7, #0]
 80074c6:	6918      	ldr	r0, [r3, #16]
 80074c8:	f7ff fd34 	bl	8006f34 <__hi0bits>
 80074cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074d0:	e7e2      	b.n	8007498 <__d2b+0x70>
 80074d2:	bf00      	nop
 80074d4:	0800812e 	.word	0x0800812e
 80074d8:	0800813f 	.word	0x0800813f

080074dc <__ssputs_r>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	688e      	ldr	r6, [r1, #8]
 80074e2:	461f      	mov	r7, r3
 80074e4:	42be      	cmp	r6, r7
 80074e6:	680b      	ldr	r3, [r1, #0]
 80074e8:	4682      	mov	sl, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	4690      	mov	r8, r2
 80074ee:	d82c      	bhi.n	800754a <__ssputs_r+0x6e>
 80074f0:	898a      	ldrh	r2, [r1, #12]
 80074f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074f6:	d026      	beq.n	8007546 <__ssputs_r+0x6a>
 80074f8:	6965      	ldr	r5, [r4, #20]
 80074fa:	6909      	ldr	r1, [r1, #16]
 80074fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007500:	eba3 0901 	sub.w	r9, r3, r1
 8007504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007508:	1c7b      	adds	r3, r7, #1
 800750a:	444b      	add	r3, r9
 800750c:	106d      	asrs	r5, r5, #1
 800750e:	429d      	cmp	r5, r3
 8007510:	bf38      	it	cc
 8007512:	461d      	movcc	r5, r3
 8007514:	0553      	lsls	r3, r2, #21
 8007516:	d527      	bpl.n	8007568 <__ssputs_r+0x8c>
 8007518:	4629      	mov	r1, r5
 800751a:	f7ff fbd7 	bl	8006ccc <_malloc_r>
 800751e:	4606      	mov	r6, r0
 8007520:	b360      	cbz	r0, 800757c <__ssputs_r+0xa0>
 8007522:	6921      	ldr	r1, [r4, #16]
 8007524:	464a      	mov	r2, r9
 8007526:	f000 fbe3 	bl	8007cf0 <memcpy>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	6126      	str	r6, [r4, #16]
 8007538:	6165      	str	r5, [r4, #20]
 800753a:	444e      	add	r6, r9
 800753c:	eba5 0509 	sub.w	r5, r5, r9
 8007540:	6026      	str	r6, [r4, #0]
 8007542:	60a5      	str	r5, [r4, #8]
 8007544:	463e      	mov	r6, r7
 8007546:	42be      	cmp	r6, r7
 8007548:	d900      	bls.n	800754c <__ssputs_r+0x70>
 800754a:	463e      	mov	r6, r7
 800754c:	6820      	ldr	r0, [r4, #0]
 800754e:	4632      	mov	r2, r6
 8007550:	4641      	mov	r1, r8
 8007552:	f000 fb81 	bl	8007c58 <memmove>
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	1b9b      	subs	r3, r3, r6
 800755a:	60a3      	str	r3, [r4, #8]
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	4433      	add	r3, r6
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	2000      	movs	r0, #0
 8007564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007568:	462a      	mov	r2, r5
 800756a:	f000 fbfe 	bl	8007d6a <_realloc_r>
 800756e:	4606      	mov	r6, r0
 8007570:	2800      	cmp	r0, #0
 8007572:	d1e0      	bne.n	8007536 <__ssputs_r+0x5a>
 8007574:	6921      	ldr	r1, [r4, #16]
 8007576:	4650      	mov	r0, sl
 8007578:	f7ff fb34 	bl	8006be4 <_free_r>
 800757c:	230c      	movs	r3, #12
 800757e:	f8ca 3000 	str.w	r3, [sl]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	e7e9      	b.n	8007564 <__ssputs_r+0x88>

08007590 <_svfiprintf_r>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	4698      	mov	r8, r3
 8007596:	898b      	ldrh	r3, [r1, #12]
 8007598:	061b      	lsls	r3, r3, #24
 800759a:	b09d      	sub	sp, #116	; 0x74
 800759c:	4607      	mov	r7, r0
 800759e:	460d      	mov	r5, r1
 80075a0:	4614      	mov	r4, r2
 80075a2:	d50e      	bpl.n	80075c2 <_svfiprintf_r+0x32>
 80075a4:	690b      	ldr	r3, [r1, #16]
 80075a6:	b963      	cbnz	r3, 80075c2 <_svfiprintf_r+0x32>
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	f7ff fb8f 	bl	8006ccc <_malloc_r>
 80075ae:	6028      	str	r0, [r5, #0]
 80075b0:	6128      	str	r0, [r5, #16]
 80075b2:	b920      	cbnz	r0, 80075be <_svfiprintf_r+0x2e>
 80075b4:	230c      	movs	r3, #12
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e0d0      	b.n	8007760 <_svfiprintf_r+0x1d0>
 80075be:	2340      	movs	r3, #64	; 0x40
 80075c0:	616b      	str	r3, [r5, #20]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9309      	str	r3, [sp, #36]	; 0x24
 80075c6:	2320      	movs	r3, #32
 80075c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d0:	2330      	movs	r3, #48	; 0x30
 80075d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007778 <_svfiprintf_r+0x1e8>
 80075d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075da:	f04f 0901 	mov.w	r9, #1
 80075de:	4623      	mov	r3, r4
 80075e0:	469a      	mov	sl, r3
 80075e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075e6:	b10a      	cbz	r2, 80075ec <_svfiprintf_r+0x5c>
 80075e8:	2a25      	cmp	r2, #37	; 0x25
 80075ea:	d1f9      	bne.n	80075e0 <_svfiprintf_r+0x50>
 80075ec:	ebba 0b04 	subs.w	fp, sl, r4
 80075f0:	d00b      	beq.n	800760a <_svfiprintf_r+0x7a>
 80075f2:	465b      	mov	r3, fp
 80075f4:	4622      	mov	r2, r4
 80075f6:	4629      	mov	r1, r5
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7ff ff6f 	bl	80074dc <__ssputs_r>
 80075fe:	3001      	adds	r0, #1
 8007600:	f000 80a9 	beq.w	8007756 <_svfiprintf_r+0x1c6>
 8007604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007606:	445a      	add	r2, fp
 8007608:	9209      	str	r2, [sp, #36]	; 0x24
 800760a:	f89a 3000 	ldrb.w	r3, [sl]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80a1 	beq.w	8007756 <_svfiprintf_r+0x1c6>
 8007614:	2300      	movs	r3, #0
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800761e:	f10a 0a01 	add.w	sl, sl, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800762a:	931a      	str	r3, [sp, #104]	; 0x68
 800762c:	4654      	mov	r4, sl
 800762e:	2205      	movs	r2, #5
 8007630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007634:	4850      	ldr	r0, [pc, #320]	; (8007778 <_svfiprintf_r+0x1e8>)
 8007636:	f7f8 fdfb 	bl	8000230 <memchr>
 800763a:	9a04      	ldr	r2, [sp, #16]
 800763c:	b9d8      	cbnz	r0, 8007676 <_svfiprintf_r+0xe6>
 800763e:	06d0      	lsls	r0, r2, #27
 8007640:	bf44      	itt	mi
 8007642:	2320      	movmi	r3, #32
 8007644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007648:	0711      	lsls	r1, r2, #28
 800764a:	bf44      	itt	mi
 800764c:	232b      	movmi	r3, #43	; 0x2b
 800764e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007652:	f89a 3000 	ldrb.w	r3, [sl]
 8007656:	2b2a      	cmp	r3, #42	; 0x2a
 8007658:	d015      	beq.n	8007686 <_svfiprintf_r+0xf6>
 800765a:	9a07      	ldr	r2, [sp, #28]
 800765c:	4654      	mov	r4, sl
 800765e:	2000      	movs	r0, #0
 8007660:	f04f 0c0a 	mov.w	ip, #10
 8007664:	4621      	mov	r1, r4
 8007666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800766a:	3b30      	subs	r3, #48	; 0x30
 800766c:	2b09      	cmp	r3, #9
 800766e:	d94d      	bls.n	800770c <_svfiprintf_r+0x17c>
 8007670:	b1b0      	cbz	r0, 80076a0 <_svfiprintf_r+0x110>
 8007672:	9207      	str	r2, [sp, #28]
 8007674:	e014      	b.n	80076a0 <_svfiprintf_r+0x110>
 8007676:	eba0 0308 	sub.w	r3, r0, r8
 800767a:	fa09 f303 	lsl.w	r3, r9, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	46a2      	mov	sl, r4
 8007684:	e7d2      	b.n	800762c <_svfiprintf_r+0x9c>
 8007686:	9b03      	ldr	r3, [sp, #12]
 8007688:	1d19      	adds	r1, r3, #4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	9103      	str	r1, [sp, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfbb      	ittet	lt
 8007692:	425b      	neglt	r3, r3
 8007694:	f042 0202 	orrlt.w	r2, r2, #2
 8007698:	9307      	strge	r3, [sp, #28]
 800769a:	9307      	strlt	r3, [sp, #28]
 800769c:	bfb8      	it	lt
 800769e:	9204      	strlt	r2, [sp, #16]
 80076a0:	7823      	ldrb	r3, [r4, #0]
 80076a2:	2b2e      	cmp	r3, #46	; 0x2e
 80076a4:	d10c      	bne.n	80076c0 <_svfiprintf_r+0x130>
 80076a6:	7863      	ldrb	r3, [r4, #1]
 80076a8:	2b2a      	cmp	r3, #42	; 0x2a
 80076aa:	d134      	bne.n	8007716 <_svfiprintf_r+0x186>
 80076ac:	9b03      	ldr	r3, [sp, #12]
 80076ae:	1d1a      	adds	r2, r3, #4
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	9203      	str	r2, [sp, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bfb8      	it	lt
 80076b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80076bc:	3402      	adds	r4, #2
 80076be:	9305      	str	r3, [sp, #20]
 80076c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007788 <_svfiprintf_r+0x1f8>
 80076c4:	7821      	ldrb	r1, [r4, #0]
 80076c6:	2203      	movs	r2, #3
 80076c8:	4650      	mov	r0, sl
 80076ca:	f7f8 fdb1 	bl	8000230 <memchr>
 80076ce:	b138      	cbz	r0, 80076e0 <_svfiprintf_r+0x150>
 80076d0:	9b04      	ldr	r3, [sp, #16]
 80076d2:	eba0 000a 	sub.w	r0, r0, sl
 80076d6:	2240      	movs	r2, #64	; 0x40
 80076d8:	4082      	lsls	r2, r0
 80076da:	4313      	orrs	r3, r2
 80076dc:	3401      	adds	r4, #1
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e4:	4825      	ldr	r0, [pc, #148]	; (800777c <_svfiprintf_r+0x1ec>)
 80076e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ea:	2206      	movs	r2, #6
 80076ec:	f7f8 fda0 	bl	8000230 <memchr>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d038      	beq.n	8007766 <_svfiprintf_r+0x1d6>
 80076f4:	4b22      	ldr	r3, [pc, #136]	; (8007780 <_svfiprintf_r+0x1f0>)
 80076f6:	bb1b      	cbnz	r3, 8007740 <_svfiprintf_r+0x1b0>
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	3307      	adds	r3, #7
 80076fc:	f023 0307 	bic.w	r3, r3, #7
 8007700:	3308      	adds	r3, #8
 8007702:	9303      	str	r3, [sp, #12]
 8007704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007706:	4433      	add	r3, r6
 8007708:	9309      	str	r3, [sp, #36]	; 0x24
 800770a:	e768      	b.n	80075de <_svfiprintf_r+0x4e>
 800770c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007710:	460c      	mov	r4, r1
 8007712:	2001      	movs	r0, #1
 8007714:	e7a6      	b.n	8007664 <_svfiprintf_r+0xd4>
 8007716:	2300      	movs	r3, #0
 8007718:	3401      	adds	r4, #1
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	4619      	mov	r1, r3
 800771e:	f04f 0c0a 	mov.w	ip, #10
 8007722:	4620      	mov	r0, r4
 8007724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007728:	3a30      	subs	r2, #48	; 0x30
 800772a:	2a09      	cmp	r2, #9
 800772c:	d903      	bls.n	8007736 <_svfiprintf_r+0x1a6>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0c6      	beq.n	80076c0 <_svfiprintf_r+0x130>
 8007732:	9105      	str	r1, [sp, #20]
 8007734:	e7c4      	b.n	80076c0 <_svfiprintf_r+0x130>
 8007736:	fb0c 2101 	mla	r1, ip, r1, r2
 800773a:	4604      	mov	r4, r0
 800773c:	2301      	movs	r3, #1
 800773e:	e7f0      	b.n	8007722 <_svfiprintf_r+0x192>
 8007740:	ab03      	add	r3, sp, #12
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	462a      	mov	r2, r5
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <_svfiprintf_r+0x1f4>)
 8007748:	a904      	add	r1, sp, #16
 800774a:	4638      	mov	r0, r7
 800774c:	f7fd fcd2 	bl	80050f4 <_printf_float>
 8007750:	1c42      	adds	r2, r0, #1
 8007752:	4606      	mov	r6, r0
 8007754:	d1d6      	bne.n	8007704 <_svfiprintf_r+0x174>
 8007756:	89ab      	ldrh	r3, [r5, #12]
 8007758:	065b      	lsls	r3, r3, #25
 800775a:	f53f af2d 	bmi.w	80075b8 <_svfiprintf_r+0x28>
 800775e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007760:	b01d      	add	sp, #116	; 0x74
 8007762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007766:	ab03      	add	r3, sp, #12
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	462a      	mov	r2, r5
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <_svfiprintf_r+0x1f4>)
 800776e:	a904      	add	r1, sp, #16
 8007770:	4638      	mov	r0, r7
 8007772:	f7fd ff63 	bl	800563c <_printf_i>
 8007776:	e7eb      	b.n	8007750 <_svfiprintf_r+0x1c0>
 8007778:	08008294 	.word	0x08008294
 800777c:	0800829e 	.word	0x0800829e
 8007780:	080050f5 	.word	0x080050f5
 8007784:	080074dd 	.word	0x080074dd
 8007788:	0800829a 	.word	0x0800829a

0800778c <__sfputc_r>:
 800778c:	6893      	ldr	r3, [r2, #8]
 800778e:	3b01      	subs	r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	b410      	push	{r4}
 8007794:	6093      	str	r3, [r2, #8]
 8007796:	da08      	bge.n	80077aa <__sfputc_r+0x1e>
 8007798:	6994      	ldr	r4, [r2, #24]
 800779a:	42a3      	cmp	r3, r4
 800779c:	db01      	blt.n	80077a2 <__sfputc_r+0x16>
 800779e:	290a      	cmp	r1, #10
 80077a0:	d103      	bne.n	80077aa <__sfputc_r+0x1e>
 80077a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077a6:	f7fe ba12 	b.w	8005bce <__swbuf_r>
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	1c58      	adds	r0, r3, #1
 80077ae:	6010      	str	r0, [r2, #0]
 80077b0:	7019      	strb	r1, [r3, #0]
 80077b2:	4608      	mov	r0, r1
 80077b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <__sfputs_r>:
 80077ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077bc:	4606      	mov	r6, r0
 80077be:	460f      	mov	r7, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	18d5      	adds	r5, r2, r3
 80077c4:	42ac      	cmp	r4, r5
 80077c6:	d101      	bne.n	80077cc <__sfputs_r+0x12>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e007      	b.n	80077dc <__sfputs_r+0x22>
 80077cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d0:	463a      	mov	r2, r7
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7ff ffda 	bl	800778c <__sfputc_r>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d1f3      	bne.n	80077c4 <__sfputs_r+0xa>
 80077dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077e0 <_vfiprintf_r>:
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	460d      	mov	r5, r1
 80077e6:	b09d      	sub	sp, #116	; 0x74
 80077e8:	4614      	mov	r4, r2
 80077ea:	4698      	mov	r8, r3
 80077ec:	4606      	mov	r6, r0
 80077ee:	b118      	cbz	r0, 80077f8 <_vfiprintf_r+0x18>
 80077f0:	6a03      	ldr	r3, [r0, #32]
 80077f2:	b90b      	cbnz	r3, 80077f8 <_vfiprintf_r+0x18>
 80077f4:	f7fe f8d0 	bl	8005998 <__sinit>
 80077f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077fa:	07d9      	lsls	r1, r3, #31
 80077fc:	d405      	bmi.n	800780a <_vfiprintf_r+0x2a>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	059a      	lsls	r2, r3, #22
 8007802:	d402      	bmi.n	800780a <_vfiprintf_r+0x2a>
 8007804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007806:	f7fe fb50 	bl	8005eaa <__retarget_lock_acquire_recursive>
 800780a:	89ab      	ldrh	r3, [r5, #12]
 800780c:	071b      	lsls	r3, r3, #28
 800780e:	d501      	bpl.n	8007814 <_vfiprintf_r+0x34>
 8007810:	692b      	ldr	r3, [r5, #16]
 8007812:	b99b      	cbnz	r3, 800783c <_vfiprintf_r+0x5c>
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f7fe fa16 	bl	8005c48 <__swsetup_r>
 800781c:	b170      	cbz	r0, 800783c <_vfiprintf_r+0x5c>
 800781e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007820:	07dc      	lsls	r4, r3, #31
 8007822:	d504      	bpl.n	800782e <_vfiprintf_r+0x4e>
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	b01d      	add	sp, #116	; 0x74
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	0598      	lsls	r0, r3, #22
 8007832:	d4f7      	bmi.n	8007824 <_vfiprintf_r+0x44>
 8007834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007836:	f7fe fb39 	bl	8005eac <__retarget_lock_release_recursive>
 800783a:	e7f3      	b.n	8007824 <_vfiprintf_r+0x44>
 800783c:	2300      	movs	r3, #0
 800783e:	9309      	str	r3, [sp, #36]	; 0x24
 8007840:	2320      	movs	r3, #32
 8007842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007846:	f8cd 800c 	str.w	r8, [sp, #12]
 800784a:	2330      	movs	r3, #48	; 0x30
 800784c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007a00 <_vfiprintf_r+0x220>
 8007850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007854:	f04f 0901 	mov.w	r9, #1
 8007858:	4623      	mov	r3, r4
 800785a:	469a      	mov	sl, r3
 800785c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007860:	b10a      	cbz	r2, 8007866 <_vfiprintf_r+0x86>
 8007862:	2a25      	cmp	r2, #37	; 0x25
 8007864:	d1f9      	bne.n	800785a <_vfiprintf_r+0x7a>
 8007866:	ebba 0b04 	subs.w	fp, sl, r4
 800786a:	d00b      	beq.n	8007884 <_vfiprintf_r+0xa4>
 800786c:	465b      	mov	r3, fp
 800786e:	4622      	mov	r2, r4
 8007870:	4629      	mov	r1, r5
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff ffa1 	bl	80077ba <__sfputs_r>
 8007878:	3001      	adds	r0, #1
 800787a:	f000 80a9 	beq.w	80079d0 <_vfiprintf_r+0x1f0>
 800787e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007880:	445a      	add	r2, fp
 8007882:	9209      	str	r2, [sp, #36]	; 0x24
 8007884:	f89a 3000 	ldrb.w	r3, [sl]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80a1 	beq.w	80079d0 <_vfiprintf_r+0x1f0>
 800788e:	2300      	movs	r3, #0
 8007890:	f04f 32ff 	mov.w	r2, #4294967295
 8007894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007898:	f10a 0a01 	add.w	sl, sl, #1
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078a4:	931a      	str	r3, [sp, #104]	; 0x68
 80078a6:	4654      	mov	r4, sl
 80078a8:	2205      	movs	r2, #5
 80078aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ae:	4854      	ldr	r0, [pc, #336]	; (8007a00 <_vfiprintf_r+0x220>)
 80078b0:	f7f8 fcbe 	bl	8000230 <memchr>
 80078b4:	9a04      	ldr	r2, [sp, #16]
 80078b6:	b9d8      	cbnz	r0, 80078f0 <_vfiprintf_r+0x110>
 80078b8:	06d1      	lsls	r1, r2, #27
 80078ba:	bf44      	itt	mi
 80078bc:	2320      	movmi	r3, #32
 80078be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078c2:	0713      	lsls	r3, r2, #28
 80078c4:	bf44      	itt	mi
 80078c6:	232b      	movmi	r3, #43	; 0x2b
 80078c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078cc:	f89a 3000 	ldrb.w	r3, [sl]
 80078d0:	2b2a      	cmp	r3, #42	; 0x2a
 80078d2:	d015      	beq.n	8007900 <_vfiprintf_r+0x120>
 80078d4:	9a07      	ldr	r2, [sp, #28]
 80078d6:	4654      	mov	r4, sl
 80078d8:	2000      	movs	r0, #0
 80078da:	f04f 0c0a 	mov.w	ip, #10
 80078de:	4621      	mov	r1, r4
 80078e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078e4:	3b30      	subs	r3, #48	; 0x30
 80078e6:	2b09      	cmp	r3, #9
 80078e8:	d94d      	bls.n	8007986 <_vfiprintf_r+0x1a6>
 80078ea:	b1b0      	cbz	r0, 800791a <_vfiprintf_r+0x13a>
 80078ec:	9207      	str	r2, [sp, #28]
 80078ee:	e014      	b.n	800791a <_vfiprintf_r+0x13a>
 80078f0:	eba0 0308 	sub.w	r3, r0, r8
 80078f4:	fa09 f303 	lsl.w	r3, r9, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	46a2      	mov	sl, r4
 80078fe:	e7d2      	b.n	80078a6 <_vfiprintf_r+0xc6>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	1d19      	adds	r1, r3, #4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	9103      	str	r1, [sp, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	bfbb      	ittet	lt
 800790c:	425b      	neglt	r3, r3
 800790e:	f042 0202 	orrlt.w	r2, r2, #2
 8007912:	9307      	strge	r3, [sp, #28]
 8007914:	9307      	strlt	r3, [sp, #28]
 8007916:	bfb8      	it	lt
 8007918:	9204      	strlt	r2, [sp, #16]
 800791a:	7823      	ldrb	r3, [r4, #0]
 800791c:	2b2e      	cmp	r3, #46	; 0x2e
 800791e:	d10c      	bne.n	800793a <_vfiprintf_r+0x15a>
 8007920:	7863      	ldrb	r3, [r4, #1]
 8007922:	2b2a      	cmp	r3, #42	; 0x2a
 8007924:	d134      	bne.n	8007990 <_vfiprintf_r+0x1b0>
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	9203      	str	r2, [sp, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfb8      	it	lt
 8007932:	f04f 33ff 	movlt.w	r3, #4294967295
 8007936:	3402      	adds	r4, #2
 8007938:	9305      	str	r3, [sp, #20]
 800793a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007a10 <_vfiprintf_r+0x230>
 800793e:	7821      	ldrb	r1, [r4, #0]
 8007940:	2203      	movs	r2, #3
 8007942:	4650      	mov	r0, sl
 8007944:	f7f8 fc74 	bl	8000230 <memchr>
 8007948:	b138      	cbz	r0, 800795a <_vfiprintf_r+0x17a>
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	eba0 000a 	sub.w	r0, r0, sl
 8007950:	2240      	movs	r2, #64	; 0x40
 8007952:	4082      	lsls	r2, r0
 8007954:	4313      	orrs	r3, r2
 8007956:	3401      	adds	r4, #1
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795e:	4829      	ldr	r0, [pc, #164]	; (8007a04 <_vfiprintf_r+0x224>)
 8007960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007964:	2206      	movs	r2, #6
 8007966:	f7f8 fc63 	bl	8000230 <memchr>
 800796a:	2800      	cmp	r0, #0
 800796c:	d03f      	beq.n	80079ee <_vfiprintf_r+0x20e>
 800796e:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <_vfiprintf_r+0x228>)
 8007970:	bb1b      	cbnz	r3, 80079ba <_vfiprintf_r+0x1da>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	3307      	adds	r3, #7
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	3308      	adds	r3, #8
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007980:	443b      	add	r3, r7
 8007982:	9309      	str	r3, [sp, #36]	; 0x24
 8007984:	e768      	b.n	8007858 <_vfiprintf_r+0x78>
 8007986:	fb0c 3202 	mla	r2, ip, r2, r3
 800798a:	460c      	mov	r4, r1
 800798c:	2001      	movs	r0, #1
 800798e:	e7a6      	b.n	80078de <_vfiprintf_r+0xfe>
 8007990:	2300      	movs	r3, #0
 8007992:	3401      	adds	r4, #1
 8007994:	9305      	str	r3, [sp, #20]
 8007996:	4619      	mov	r1, r3
 8007998:	f04f 0c0a 	mov.w	ip, #10
 800799c:	4620      	mov	r0, r4
 800799e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079a2:	3a30      	subs	r2, #48	; 0x30
 80079a4:	2a09      	cmp	r2, #9
 80079a6:	d903      	bls.n	80079b0 <_vfiprintf_r+0x1d0>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0c6      	beq.n	800793a <_vfiprintf_r+0x15a>
 80079ac:	9105      	str	r1, [sp, #20]
 80079ae:	e7c4      	b.n	800793a <_vfiprintf_r+0x15a>
 80079b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80079b4:	4604      	mov	r4, r0
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7f0      	b.n	800799c <_vfiprintf_r+0x1bc>
 80079ba:	ab03      	add	r3, sp, #12
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	462a      	mov	r2, r5
 80079c0:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <_vfiprintf_r+0x22c>)
 80079c2:	a904      	add	r1, sp, #16
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7fd fb95 	bl	80050f4 <_printf_float>
 80079ca:	4607      	mov	r7, r0
 80079cc:	1c78      	adds	r0, r7, #1
 80079ce:	d1d6      	bne.n	800797e <_vfiprintf_r+0x19e>
 80079d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079d2:	07d9      	lsls	r1, r3, #31
 80079d4:	d405      	bmi.n	80079e2 <_vfiprintf_r+0x202>
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	059a      	lsls	r2, r3, #22
 80079da:	d402      	bmi.n	80079e2 <_vfiprintf_r+0x202>
 80079dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079de:	f7fe fa65 	bl	8005eac <__retarget_lock_release_recursive>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	065b      	lsls	r3, r3, #25
 80079e6:	f53f af1d 	bmi.w	8007824 <_vfiprintf_r+0x44>
 80079ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079ec:	e71c      	b.n	8007828 <_vfiprintf_r+0x48>
 80079ee:	ab03      	add	r3, sp, #12
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	462a      	mov	r2, r5
 80079f4:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <_vfiprintf_r+0x22c>)
 80079f6:	a904      	add	r1, sp, #16
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7fd fe1f 	bl	800563c <_printf_i>
 80079fe:	e7e4      	b.n	80079ca <_vfiprintf_r+0x1ea>
 8007a00:	08008294 	.word	0x08008294
 8007a04:	0800829e 	.word	0x0800829e
 8007a08:	080050f5 	.word	0x080050f5
 8007a0c:	080077bb 	.word	0x080077bb
 8007a10:	0800829a 	.word	0x0800829a

08007a14 <__sflush_r>:
 8007a14:	898a      	ldrh	r2, [r1, #12]
 8007a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	0710      	lsls	r0, r2, #28
 8007a1e:	460c      	mov	r4, r1
 8007a20:	d458      	bmi.n	8007ad4 <__sflush_r+0xc0>
 8007a22:	684b      	ldr	r3, [r1, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dc05      	bgt.n	8007a34 <__sflush_r+0x20>
 8007a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dc02      	bgt.n	8007a34 <__sflush_r+0x20>
 8007a2e:	2000      	movs	r0, #0
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	d0f9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a40:	682f      	ldr	r7, [r5, #0]
 8007a42:	6a21      	ldr	r1, [r4, #32]
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	d032      	beq.n	8007aae <__sflush_r+0x9a>
 8007a48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	075a      	lsls	r2, r3, #29
 8007a4e:	d505      	bpl.n	8007a5c <__sflush_r+0x48>
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	1ac0      	subs	r0, r0, r3
 8007a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a56:	b10b      	cbz	r3, 8007a5c <__sflush_r+0x48>
 8007a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a5a:	1ac0      	subs	r0, r0, r3
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a62:	6a21      	ldr	r1, [r4, #32]
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b0      	blx	r6
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	d106      	bne.n	8007a7c <__sflush_r+0x68>
 8007a6e:	6829      	ldr	r1, [r5, #0]
 8007a70:	291d      	cmp	r1, #29
 8007a72:	d82b      	bhi.n	8007acc <__sflush_r+0xb8>
 8007a74:	4a29      	ldr	r2, [pc, #164]	; (8007b1c <__sflush_r+0x108>)
 8007a76:	410a      	asrs	r2, r1
 8007a78:	07d6      	lsls	r6, r2, #31
 8007a7a:	d427      	bmi.n	8007acc <__sflush_r+0xb8>
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	6062      	str	r2, [r4, #4]
 8007a80:	04d9      	lsls	r1, r3, #19
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	6022      	str	r2, [r4, #0]
 8007a86:	d504      	bpl.n	8007a92 <__sflush_r+0x7e>
 8007a88:	1c42      	adds	r2, r0, #1
 8007a8a:	d101      	bne.n	8007a90 <__sflush_r+0x7c>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b903      	cbnz	r3, 8007a92 <__sflush_r+0x7e>
 8007a90:	6560      	str	r0, [r4, #84]	; 0x54
 8007a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a94:	602f      	str	r7, [r5, #0]
 8007a96:	2900      	cmp	r1, #0
 8007a98:	d0c9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	d002      	beq.n	8007aa8 <__sflush_r+0x94>
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7ff f89e 	bl	8006be4 <_free_r>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	6360      	str	r0, [r4, #52]	; 0x34
 8007aac:	e7c0      	b.n	8007a30 <__sflush_r+0x1c>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b0      	blx	r6
 8007ab4:	1c41      	adds	r1, r0, #1
 8007ab6:	d1c8      	bne.n	8007a4a <__sflush_r+0x36>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0c5      	beq.n	8007a4a <__sflush_r+0x36>
 8007abe:	2b1d      	cmp	r3, #29
 8007ac0:	d001      	beq.n	8007ac6 <__sflush_r+0xb2>
 8007ac2:	2b16      	cmp	r3, #22
 8007ac4:	d101      	bne.n	8007aca <__sflush_r+0xb6>
 8007ac6:	602f      	str	r7, [r5, #0]
 8007ac8:	e7b1      	b.n	8007a2e <__sflush_r+0x1a>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	e7ad      	b.n	8007a30 <__sflush_r+0x1c>
 8007ad4:	690f      	ldr	r7, [r1, #16]
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	d0a9      	beq.n	8007a2e <__sflush_r+0x1a>
 8007ada:	0793      	lsls	r3, r2, #30
 8007adc:	680e      	ldr	r6, [r1, #0]
 8007ade:	bf08      	it	eq
 8007ae0:	694b      	ldreq	r3, [r1, #20]
 8007ae2:	600f      	str	r7, [r1, #0]
 8007ae4:	bf18      	it	ne
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	eba6 0807 	sub.w	r8, r6, r7
 8007aec:	608b      	str	r3, [r1, #8]
 8007aee:	f1b8 0f00 	cmp.w	r8, #0
 8007af2:	dd9c      	ble.n	8007a2e <__sflush_r+0x1a>
 8007af4:	6a21      	ldr	r1, [r4, #32]
 8007af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007af8:	4643      	mov	r3, r8
 8007afa:	463a      	mov	r2, r7
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b0      	blx	r6
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dc06      	bgt.n	8007b12 <__sflush_r+0xfe>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	e78e      	b.n	8007a30 <__sflush_r+0x1c>
 8007b12:	4407      	add	r7, r0
 8007b14:	eba8 0800 	sub.w	r8, r8, r0
 8007b18:	e7e9      	b.n	8007aee <__sflush_r+0xda>
 8007b1a:	bf00      	nop
 8007b1c:	dfbffffe 	.word	0xdfbffffe

08007b20 <_fflush_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	690b      	ldr	r3, [r1, #16]
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	b913      	cbnz	r3, 8007b30 <_fflush_r+0x10>
 8007b2a:	2500      	movs	r5, #0
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	b118      	cbz	r0, 8007b3a <_fflush_r+0x1a>
 8007b32:	6a03      	ldr	r3, [r0, #32]
 8007b34:	b90b      	cbnz	r3, 8007b3a <_fflush_r+0x1a>
 8007b36:	f7fd ff2f 	bl	8005998 <__sinit>
 8007b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f3      	beq.n	8007b2a <_fflush_r+0xa>
 8007b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b44:	07d0      	lsls	r0, r2, #31
 8007b46:	d404      	bmi.n	8007b52 <_fflush_r+0x32>
 8007b48:	0599      	lsls	r1, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_fflush_r+0x32>
 8007b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4e:	f7fe f9ac 	bl	8005eaa <__retarget_lock_acquire_recursive>
 8007b52:	4628      	mov	r0, r5
 8007b54:	4621      	mov	r1, r4
 8007b56:	f7ff ff5d 	bl	8007a14 <__sflush_r>
 8007b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b5c:	07da      	lsls	r2, r3, #31
 8007b5e:	4605      	mov	r5, r0
 8007b60:	d4e4      	bmi.n	8007b2c <_fflush_r+0xc>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	059b      	lsls	r3, r3, #22
 8007b66:	d4e1      	bmi.n	8007b2c <_fflush_r+0xc>
 8007b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6a:	f7fe f99f 	bl	8005eac <__retarget_lock_release_recursive>
 8007b6e:	e7dd      	b.n	8007b2c <_fflush_r+0xc>

08007b70 <fiprintf>:
 8007b70:	b40e      	push	{r1, r2, r3}
 8007b72:	b503      	push	{r0, r1, lr}
 8007b74:	4601      	mov	r1, r0
 8007b76:	ab03      	add	r3, sp, #12
 8007b78:	4805      	ldr	r0, [pc, #20]	; (8007b90 <fiprintf+0x20>)
 8007b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b7e:	6800      	ldr	r0, [r0, #0]
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f7ff fe2d 	bl	80077e0 <_vfiprintf_r>
 8007b86:	b002      	add	sp, #8
 8007b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b8c:	b003      	add	sp, #12
 8007b8e:	4770      	bx	lr
 8007b90:	20000120 	.word	0x20000120

08007b94 <__swhatbuf_r>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	460c      	mov	r4, r1
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	b096      	sub	sp, #88	; 0x58
 8007ba0:	4615      	mov	r5, r2
 8007ba2:	461e      	mov	r6, r3
 8007ba4:	da0d      	bge.n	8007bc2 <__swhatbuf_r+0x2e>
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007bac:	f04f 0100 	mov.w	r1, #0
 8007bb0:	bf0c      	ite	eq
 8007bb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007bb6:	2340      	movne	r3, #64	; 0x40
 8007bb8:	2000      	movs	r0, #0
 8007bba:	6031      	str	r1, [r6, #0]
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	b016      	add	sp, #88	; 0x58
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	466a      	mov	r2, sp
 8007bc4:	f000 f862 	bl	8007c8c <_fstat_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dbec      	blt.n	8007ba6 <__swhatbuf_r+0x12>
 8007bcc:	9901      	ldr	r1, [sp, #4]
 8007bce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007bd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007bd6:	4259      	negs	r1, r3
 8007bd8:	4159      	adcs	r1, r3
 8007bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bde:	e7eb      	b.n	8007bb8 <__swhatbuf_r+0x24>

08007be0 <__smakebuf_r>:
 8007be0:	898b      	ldrh	r3, [r1, #12]
 8007be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007be4:	079d      	lsls	r5, r3, #30
 8007be6:	4606      	mov	r6, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	d507      	bpl.n	8007bfc <__smakebuf_r+0x1c>
 8007bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	6123      	str	r3, [r4, #16]
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	6163      	str	r3, [r4, #20]
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	ab01      	add	r3, sp, #4
 8007bfe:	466a      	mov	r2, sp
 8007c00:	f7ff ffc8 	bl	8007b94 <__swhatbuf_r>
 8007c04:	9900      	ldr	r1, [sp, #0]
 8007c06:	4605      	mov	r5, r0
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f7ff f85f 	bl	8006ccc <_malloc_r>
 8007c0e:	b948      	cbnz	r0, 8007c24 <__smakebuf_r+0x44>
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	059a      	lsls	r2, r3, #22
 8007c16:	d4ef      	bmi.n	8007bf8 <__smakebuf_r+0x18>
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	f043 0302 	orr.w	r3, r3, #2
 8007c20:	81a3      	strh	r3, [r4, #12]
 8007c22:	e7e3      	b.n	8007bec <__smakebuf_r+0xc>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	6020      	str	r0, [r4, #0]
 8007c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	6163      	str	r3, [r4, #20]
 8007c32:	9b01      	ldr	r3, [sp, #4]
 8007c34:	6120      	str	r0, [r4, #16]
 8007c36:	b15b      	cbz	r3, 8007c50 <__smakebuf_r+0x70>
 8007c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f000 f837 	bl	8007cb0 <_isatty_r>
 8007c42:	b128      	cbz	r0, 8007c50 <__smakebuf_r+0x70>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	431d      	orrs	r5, r3
 8007c54:	81a5      	strh	r5, [r4, #12]
 8007c56:	e7cf      	b.n	8007bf8 <__smakebuf_r+0x18>

08007c58 <memmove>:
 8007c58:	4288      	cmp	r0, r1
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	eb01 0402 	add.w	r4, r1, r2
 8007c60:	d902      	bls.n	8007c68 <memmove+0x10>
 8007c62:	4284      	cmp	r4, r0
 8007c64:	4623      	mov	r3, r4
 8007c66:	d807      	bhi.n	8007c78 <memmove+0x20>
 8007c68:	1e43      	subs	r3, r0, #1
 8007c6a:	42a1      	cmp	r1, r4
 8007c6c:	d008      	beq.n	8007c80 <memmove+0x28>
 8007c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c76:	e7f8      	b.n	8007c6a <memmove+0x12>
 8007c78:	4402      	add	r2, r0
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	428a      	cmp	r2, r1
 8007c7e:	d100      	bne.n	8007c82 <memmove+0x2a>
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c8a:	e7f7      	b.n	8007c7c <memmove+0x24>

08007c8c <_fstat_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d07      	ldr	r5, [pc, #28]	; (8007cac <_fstat_r+0x20>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	4611      	mov	r1, r2
 8007c98:	602b      	str	r3, [r5, #0]
 8007c9a:	f7fa fb40 	bl	800231e <_fstat>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	d102      	bne.n	8007ca8 <_fstat_r+0x1c>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	b103      	cbz	r3, 8007ca8 <_fstat_r+0x1c>
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	bd38      	pop	{r3, r4, r5, pc}
 8007caa:	bf00      	nop
 8007cac:	2000062c 	.word	0x2000062c

08007cb0 <_isatty_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d06      	ldr	r5, [pc, #24]	; (8007ccc <_isatty_r+0x1c>)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	f7fa fb3f 	bl	800233e <_isatty>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_isatty_r+0x1a>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_isatty_r+0x1a>
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	2000062c 	.word	0x2000062c

08007cd0 <_sbrk_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d06      	ldr	r5, [pc, #24]	; (8007cec <_sbrk_r+0x1c>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	f7fa fb48 	bl	8002370 <_sbrk>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_sbrk_r+0x1a>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_sbrk_r+0x1a>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	2000062c 	.word	0x2000062c

08007cf0 <memcpy>:
 8007cf0:	440a      	add	r2, r1
 8007cf2:	4291      	cmp	r1, r2
 8007cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf8:	d100      	bne.n	8007cfc <memcpy+0xc>
 8007cfa:	4770      	bx	lr
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d06:	4291      	cmp	r1, r2
 8007d08:	d1f9      	bne.n	8007cfe <memcpy+0xe>
 8007d0a:	bd10      	pop	{r4, pc}

08007d0c <abort>:
 8007d0c:	b508      	push	{r3, lr}
 8007d0e:	2006      	movs	r0, #6
 8007d10:	f000 f890 	bl	8007e34 <raise>
 8007d14:	2001      	movs	r0, #1
 8007d16:	f7fa fab3 	bl	8002280 <_exit>

08007d1a <_calloc_r>:
 8007d1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d1c:	fba1 2402 	umull	r2, r4, r1, r2
 8007d20:	b94c      	cbnz	r4, 8007d36 <_calloc_r+0x1c>
 8007d22:	4611      	mov	r1, r2
 8007d24:	9201      	str	r2, [sp, #4]
 8007d26:	f7fe ffd1 	bl	8006ccc <_malloc_r>
 8007d2a:	9a01      	ldr	r2, [sp, #4]
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	b930      	cbnz	r0, 8007d3e <_calloc_r+0x24>
 8007d30:	4628      	mov	r0, r5
 8007d32:	b003      	add	sp, #12
 8007d34:	bd30      	pop	{r4, r5, pc}
 8007d36:	220c      	movs	r2, #12
 8007d38:	6002      	str	r2, [r0, #0]
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	e7f8      	b.n	8007d30 <_calloc_r+0x16>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	f7fd ffda 	bl	8005cf8 <memset>
 8007d44:	e7f4      	b.n	8007d30 <_calloc_r+0x16>

08007d46 <__ascii_mbtowc>:
 8007d46:	b082      	sub	sp, #8
 8007d48:	b901      	cbnz	r1, 8007d4c <__ascii_mbtowc+0x6>
 8007d4a:	a901      	add	r1, sp, #4
 8007d4c:	b142      	cbz	r2, 8007d60 <__ascii_mbtowc+0x1a>
 8007d4e:	b14b      	cbz	r3, 8007d64 <__ascii_mbtowc+0x1e>
 8007d50:	7813      	ldrb	r3, [r2, #0]
 8007d52:	600b      	str	r3, [r1, #0]
 8007d54:	7812      	ldrb	r2, [r2, #0]
 8007d56:	1e10      	subs	r0, r2, #0
 8007d58:	bf18      	it	ne
 8007d5a:	2001      	movne	r0, #1
 8007d5c:	b002      	add	sp, #8
 8007d5e:	4770      	bx	lr
 8007d60:	4610      	mov	r0, r2
 8007d62:	e7fb      	b.n	8007d5c <__ascii_mbtowc+0x16>
 8007d64:	f06f 0001 	mvn.w	r0, #1
 8007d68:	e7f8      	b.n	8007d5c <__ascii_mbtowc+0x16>

08007d6a <_realloc_r>:
 8007d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6e:	4680      	mov	r8, r0
 8007d70:	4614      	mov	r4, r2
 8007d72:	460e      	mov	r6, r1
 8007d74:	b921      	cbnz	r1, 8007d80 <_realloc_r+0x16>
 8007d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	f7fe bfa6 	b.w	8006ccc <_malloc_r>
 8007d80:	b92a      	cbnz	r2, 8007d8e <_realloc_r+0x24>
 8007d82:	f7fe ff2f 	bl	8006be4 <_free_r>
 8007d86:	4625      	mov	r5, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8e:	f000 f86d 	bl	8007e6c <_malloc_usable_size_r>
 8007d92:	4284      	cmp	r4, r0
 8007d94:	4607      	mov	r7, r0
 8007d96:	d802      	bhi.n	8007d9e <_realloc_r+0x34>
 8007d98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d9c:	d812      	bhi.n	8007dc4 <_realloc_r+0x5a>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4640      	mov	r0, r8
 8007da2:	f7fe ff93 	bl	8006ccc <_malloc_r>
 8007da6:	4605      	mov	r5, r0
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d0ed      	beq.n	8007d88 <_realloc_r+0x1e>
 8007dac:	42bc      	cmp	r4, r7
 8007dae:	4622      	mov	r2, r4
 8007db0:	4631      	mov	r1, r6
 8007db2:	bf28      	it	cs
 8007db4:	463a      	movcs	r2, r7
 8007db6:	f7ff ff9b 	bl	8007cf0 <memcpy>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	f7fe ff11 	bl	8006be4 <_free_r>
 8007dc2:	e7e1      	b.n	8007d88 <_realloc_r+0x1e>
 8007dc4:	4635      	mov	r5, r6
 8007dc6:	e7df      	b.n	8007d88 <_realloc_r+0x1e>

08007dc8 <__ascii_wctomb>:
 8007dc8:	b149      	cbz	r1, 8007dde <__ascii_wctomb+0x16>
 8007dca:	2aff      	cmp	r2, #255	; 0xff
 8007dcc:	bf85      	ittet	hi
 8007dce:	238a      	movhi	r3, #138	; 0x8a
 8007dd0:	6003      	strhi	r3, [r0, #0]
 8007dd2:	700a      	strbls	r2, [r1, #0]
 8007dd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dd8:	bf98      	it	ls
 8007dda:	2001      	movls	r0, #1
 8007ddc:	4770      	bx	lr
 8007dde:	4608      	mov	r0, r1
 8007de0:	4770      	bx	lr

08007de2 <_raise_r>:
 8007de2:	291f      	cmp	r1, #31
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	d904      	bls.n	8007df6 <_raise_r+0x14>
 8007dec:	2316      	movs	r3, #22
 8007dee:	6003      	str	r3, [r0, #0]
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007df8:	b112      	cbz	r2, 8007e00 <_raise_r+0x1e>
 8007dfa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dfe:	b94b      	cbnz	r3, 8007e14 <_raise_r+0x32>
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 f831 	bl	8007e68 <_getpid_r>
 8007e06:	462a      	mov	r2, r5
 8007e08:	4601      	mov	r1, r0
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e10:	f000 b818 	b.w	8007e44 <_kill_r>
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d00a      	beq.n	8007e2e <_raise_r+0x4c>
 8007e18:	1c59      	adds	r1, r3, #1
 8007e1a:	d103      	bne.n	8007e24 <_raise_r+0x42>
 8007e1c:	2316      	movs	r3, #22
 8007e1e:	6003      	str	r3, [r0, #0]
 8007e20:	2001      	movs	r0, #1
 8007e22:	e7e7      	b.n	8007df4 <_raise_r+0x12>
 8007e24:	2400      	movs	r4, #0
 8007e26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	4798      	blx	r3
 8007e2e:	2000      	movs	r0, #0
 8007e30:	e7e0      	b.n	8007df4 <_raise_r+0x12>
	...

08007e34 <raise>:
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <raise+0xc>)
 8007e36:	4601      	mov	r1, r0
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f7ff bfd2 	b.w	8007de2 <_raise_r>
 8007e3e:	bf00      	nop
 8007e40:	20000120 	.word	0x20000120

08007e44 <_kill_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	; (8007e64 <_kill_r+0x20>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	4611      	mov	r1, r2
 8007e50:	602b      	str	r3, [r5, #0]
 8007e52:	f7fa fa05 	bl	8002260 <_kill>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	d102      	bne.n	8007e60 <_kill_r+0x1c>
 8007e5a:	682b      	ldr	r3, [r5, #0]
 8007e5c:	b103      	cbz	r3, 8007e60 <_kill_r+0x1c>
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	bf00      	nop
 8007e64:	2000062c 	.word	0x2000062c

08007e68 <_getpid_r>:
 8007e68:	f7fa b9f2 	b.w	8002250 <_getpid>

08007e6c <_malloc_usable_size_r>:
 8007e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e70:	1f18      	subs	r0, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfbc      	itt	lt
 8007e76:	580b      	ldrlt	r3, [r1, r0]
 8007e78:	18c0      	addlt	r0, r0, r3
 8007e7a:	4770      	bx	lr

08007e7c <_init>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr

08007e88 <_fini>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr
